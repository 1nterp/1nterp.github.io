<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on InterP Blog</title><link>https://interp.blog/tags/python/</link><description>Recent content in Python on InterP Blog</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Tue, 23 Aug 2022 22:26:07 +0900</lastBuildDate><atom:link href="https://interp.blog/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>VSCode Python 디버그 반응이 없을 때</title><link>https://interp.blog/vscode-python-debugging-no-response/</link><pubDate>Tue, 23 Aug 2022 22:26:07 +0900</pubDate><guid>https://interp.blog/vscode-python-debugging-no-response/</guid><description>&lt;h2 id="증상">증상&lt;/h2>
&lt;p>VSCode 에서 Python 파일을 디버깅하려 하면, &lt;strong>아~무런 반응이 없다.&lt;/strong> 그냥 실행 자체를 하지 않은 것 같다!&lt;/p>
&lt;h2 id="분석">분석&lt;/h2>
&lt;p>관련 로그가 남아있지 않기 때문에, 분석이 쉽지 않다. 그나마 갱신되는 로그가 &amp;lsquo;Python&amp;rsquo; 에서 보이는 한 줄의 명령어인데&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">DAP Server launched with command: /home/interp/work/project/venv/bin/python \
/home/interp/.vscode-server/extensions/ms-python.python-2022.12.1/pythonFiles/lib/python/debugpy/adapter
&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 명령어를 그대로 &lt;strong>터미널에서&lt;/strong> 쳐 보니 해결책이 보였다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">Traceback &lt;span class="o">(&lt;/span>most recent call last&lt;span class="o">)&lt;/span>:
File &lt;span class="s2">&amp;#34;/home/i520508/.pyenv/versions/3.6.12/lib/python3.6/runpy.py&amp;#34;&lt;/span>, line 193, in _run_module_as_main
&lt;span class="s2">&amp;#34;__main__&amp;#34;&lt;/span>, mod_spec&lt;span class="o">)&lt;/span>
File &lt;span class="s2">&amp;#34;/home/i520508/.pyenv/versions/3.6.12/lib/python3.6/runpy.py&amp;#34;&lt;/span>, line 85, in _run_code
exec&lt;span class="o">(&lt;/span>code, run_globals&lt;span class="o">)&lt;/span>
File &lt;span class="s2">&amp;#34;/INT3/homes/i520508/.vscode-server/extensions/ms-python.python-2022.12.1/pythonFiles/lib/python/debugpy/adapter/__main__.py&amp;#34;&lt;/span>, line 212, in &amp;lt;module&amp;gt;
__import__&lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;debugpy&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
File &lt;span class="s2">&amp;#34;/INT3/homes/i520508/.vscode-server/extensions/ms-python.python-2022.12.1/pythonFiles/lib/python/debugpy/adapter/../../debugpy/__init__.py&amp;#34;&lt;/span>, line 28, in &amp;lt;module&amp;gt;
&lt;span class="s2">&amp;#34;Python 3.6 and below is not supported by this version of debugpy; &amp;#34;&lt;/span>
AssertionError: Python 3.6 and below is not supported by this version of debugpy&lt;span class="p">;&lt;/span> use debugpy 1.5.1 or earlier.
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="원인">원인&lt;/h2>
&lt;p>Python Extension 에서 debugpy 버전을 올렸는데, 이게 더 이상 Python 3.6 에서 호환되지 않는 것이다. &lt;a class="link" href="https://marketplace.visualstudio.com/items/ms-python.python/changelog" target="_blank" rel="noopener"
>Changelog&lt;/a>를 보니, 2022.10.0 버전부터 debugpy 를 1.6.2 로 올린 것을 확인할 수 있었다.&lt;/p>
&lt;h2 id="해결-1-python3-버전-업그레이드-하기">해결 (1) Python3 버전 업그레이드 하기&lt;/h2>
&lt;p>그러면 해결책은 간단하다. 원하는 대로 해주거나, 되돌아가거나.&lt;/p>
&lt;p>나는 virtualenv 를 사용하고 있어서, &lt;code>pip freeze&lt;/code> 를 통해 설치된 라이브러리를 전부 백업해 두고, virtualenv 를 Python 3.7 버전으로 다시 만들어 환경을 구성했다.&lt;/p>
&lt;h2 id="해결-2-vscode-python-extension-다운그레이드-하기">해결 (2) VSCode Python Extension 다운그레이드 하기&lt;/h2>
&lt;p>다른 해결책으로는, extension 의 버전을 다운그레이드 하는 방법이다.&lt;/p>
&lt;figure class="align-center ">
&lt;img loading="lazy" src="downgrade.png#center"/>
&lt;/figure>
&lt;p>Extension 탭에서 Python 을 찾은 다음, &lt;strong>Install Another Version&lt;/strong> 을 선택한다. 잠시 기다리면, 버전 목록이 나타나며, 초록색 부분 (그 아래도 상관없음) 을 클릭하면 된다.&lt;/p>
&lt;p>별로 추천하고 싶진 않다. Python 3.10 이 나온 마당에 이왕이면 Python 버전을 올리는게 좋을 것 같다.&lt;/p>
&lt;h2 id="해결-3-symbolic-link-경로-문제">해결 (3) Symbolic link 경로 문제&lt;/h2>
&lt;p>Symbolic link 경로로 workspace directory 를 열어 둔 경우에도 디버깅 문제가 생겼었다. 해결책은, 실제 directory 경로로 workspace 를 열어야 한다.&lt;/p>
&lt;p>나는 /home/interp/ 를 &lt;code>$HOME&lt;/code> 으로 쓰지만, 사실은 /SSD/home/interp 를 /home/interp 라는 Symbolic link 로 만들어 쓰고 있다. 이 때는 디렉토리를 열 때 &lt;em>/SSD/home/interp/&amp;hellip;&lt;/em> 로 시작하도록 경로를 입력해야 Python 디버거가 정상 작동했다.&lt;/p></description></item><item><title>BDD in Python: Behave</title><link>https://interp.blog/bdd-in-python-behave/</link><pubDate>Fri, 19 Aug 2022 09:00:36 +0900</pubDate><guid>https://interp.blog/bdd-in-python-behave/</guid><description>&lt;p>&lt;a class="link" href="https://interp.blog/bdd-behavior-driven-development/" >지난 포스팅&lt;/a>으로 BDD 는 어떤 개발방법론이고, 어떤 면에서 이 방법이 필요한지를 정리해 봤다. &lt;/p>
&lt;p>이번 포스팅을 시작으로, 직접 다양한 언어에서 BDD 를 적용하는 방법을 정리해 볼 예정이다. 첫 시간으로는 &lt;strong>파이썬&lt;/strong> (Python) 언어를 가지고 할 것이다. Python 라이브러리 중 하나인 &lt;a class="link" href="https://behave.readthedocs.io/en/stable/" target="_blank" rel="noopener"
>behave&lt;/a> 를 통해, BDD 테스트 프레임워크를 구성하고, 예제 시나리오를 만들어서 테스트 자동화가 어떻게 이뤄질 수 있을지 알아보자.&lt;/p>
&lt;h2 id="예제-프로젝트-생성">예제 프로젝트 생성&lt;/h2>
&lt;div style="background-color: var(--body-background); width: 98%;padding: 10px;border-radius: 5px;font-size: .8em;display: flex;">
&lt;div style="width: 16px;margin-right: 7px; margin-left: 4px;">
💡
&lt;/div>
&lt;div>
모든 명령어는 리눅스 OS 또는 WSL 환경에서 실행한다고 가정한다.
&lt;/div>
&lt;/div>
&lt;p>파이썬이 설치된 환경에서 다음과 같이 디렉터리만 만들면 된다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">mkdir behave-test &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> behave-test
&lt;/code>&lt;/pre>&lt;/div>&lt;p>나는 virtualenv 를 이용해 환경을 분리해 두도록 하겠다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">virtualenv venv
&lt;span class="nb">source&lt;/span> venv/bin/activate
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="behave-설치">behave 설치&lt;/h2>
&lt;p>&lt;code>pip install behave&lt;/code> 만 하면 된다.&lt;/p>
&lt;h2 id="featuressteps-디렉터리-생성">&lt;code>features/steps&lt;/code> 디렉터리 생성&lt;/h2>
&lt;p>behave 는 &lt;code>features/steps&lt;/code> 를 필요로 한다. 만들어 주자.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">mkdir -p features/steps
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>디렉터리만 만들고 곧장 &lt;code>behave&lt;/code> 를 실행하면, &lt;code>ConfigError: No feature files in $(pwd)/features&lt;/code> 라는 메시지가 뜰 것이다.&lt;/p>
&lt;h2 id="feature-파일-만들기">&lt;code>.feature&lt;/code> 파일 만들기&lt;/h2>
&lt;p>&lt;code>features/hotdog.feature&lt;/code> 라는 파일을 하나 만들어보자. 핫도그 12개에서 5개를 먹으면 반드시 7개가 남아야 한다는 내용이다. 단순 영어로 되어 있지만, 문법에 대해 더 자세히 알고 싶다면 &lt;a class="link" href="https://interp.tistory.com/entry/BDD-%EC%9D%98%EB%AF%B8%EC%99%80-%ED%95%84%EC%9A%94%EC%84%B1" target="_blank" rel="noopener"
>이전 포스팅&lt;/a>을 꼭 참고하고 오자.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gherkin" data-lang="gherkin">&lt;span class="k">Feature:&lt;/span>&lt;span class="nf"> eat hotdogs
&lt;/span>&lt;span class="nf">
&lt;/span>&lt;span class="nf"> &lt;/span>&lt;span class="k">Scenario:&lt;/span>&lt;span class="nf"> Eat 5 out of 12
&lt;/span>&lt;span class="nf">&lt;/span>&lt;span class="k"> Given &lt;/span>&lt;span class="nf">there are &lt;/span>&lt;span class="s">12&lt;/span>&lt;span class="nf"> hotdogs
&lt;/span>&lt;span class="nf"> &lt;/span>&lt;span class="k">When &lt;/span>&lt;span class="nf">I eat &lt;/span>&lt;span class="s">5&lt;/span>&lt;span class="nf">
&lt;/span>&lt;span class="nf"> &lt;/span>&lt;span class="k">Then &lt;/span>&lt;span class="nf">there should be &lt;/span>&lt;span class="s">7&lt;/span>&lt;span class="nf"> remaining
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>이제 다시 &lt;code>behave&lt;/code> 를 실행하면, 아래 구조로 되어 있는 테스트 파일이 존재하지 않다고 하면서, 스니펫 (snippet) 을 출력해 주고 내부를 구현해 달라고 한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ behave
Feature: eat hotdogs &lt;span class="c1"># features/hotdog.feature:1&lt;/span>
Scenario: Eat &lt;span class="m">5&lt;/span> out of &lt;span class="m">12&lt;/span> &lt;span class="c1"># features/hotdog.feature:3&lt;/span>
Given there are &lt;span class="m">12&lt;/span> hotdogs &lt;span class="c1"># None&lt;/span>
When I eat &lt;span class="m">5&lt;/span> &lt;span class="c1"># None&lt;/span>
Then there should be &lt;span class="m">7&lt;/span> remaining &lt;span class="c1"># None&lt;/span>
Failing scenarios:
features/hotdog.feature:3 Eat &lt;span class="m">5&lt;/span> out of &lt;span class="m">12&lt;/span>
&lt;span class="m">0&lt;/span> features passed, &lt;span class="m">1&lt;/span> failed, &lt;span class="m">0&lt;/span> skipped
&lt;span class="m">0&lt;/span> scenarios passed, &lt;span class="m">1&lt;/span> failed, &lt;span class="m">0&lt;/span> skipped
&lt;span class="m">0&lt;/span> steps passed, &lt;span class="m">0&lt;/span> failed, &lt;span class="m">0&lt;/span> skipped, &lt;span class="m">3&lt;/span> undefined
Took 0m0.000s
You can implement step definitions &lt;span class="k">for&lt;/span> undefined steps with these snippets:
@given&lt;span class="o">(&lt;/span>u&lt;span class="s1">&amp;#39;there are 12 hotdogs&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
def step_impl&lt;span class="o">(&lt;/span>context&lt;span class="o">)&lt;/span>:
raise NotImplementedError&lt;span class="o">(&lt;/span>u&lt;span class="s1">&amp;#39;STEP: Given there are 12 hotdogs&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
@when&lt;span class="o">(&lt;/span>u&lt;span class="s1">&amp;#39;I eat 5&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
def step_impl&lt;span class="o">(&lt;/span>context&lt;span class="o">)&lt;/span>:
raise NotImplementedError&lt;span class="o">(&lt;/span>u&lt;span class="s1">&amp;#39;STEP: When I eat 5&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
@then&lt;span class="o">(&lt;/span>u&lt;span class="s1">&amp;#39;there should be 7 remaining&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
def step_impl&lt;span class="o">(&lt;/span>context&lt;span class="o">)&lt;/span>:
raise NotImplementedError&lt;span class="o">(&lt;/span>u&lt;span class="s1">&amp;#39;STEP: Then there should be 7 remaining&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="테스트-python-파일-만들기">테스트 Python 파일 만들기&lt;/h2>
&lt;p>방금 출력된 내용을 단순히 복사해서 &lt;code>features/steps/hotdog.py&lt;/code> 라는 파일을 만들었다. 참고로 파일 이름은 상관없지만 반드시 &lt;code>features/steps&lt;/code> 디렉터리에 위치해야 한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">behave&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="nd">@given&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">u&lt;/span>&lt;span class="s1">&amp;#39;there are 12 hotdogs&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">step_impl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">NotImplementedError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">u&lt;/span>&lt;span class="s1">&amp;#39;STEP: Given there are 12 hotdogs&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nd">@when&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">u&lt;/span>&lt;span class="s1">&amp;#39;I eat 5&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">step_impl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">NotImplementedError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">u&lt;/span>&lt;span class="s1">&amp;#39;STEP: When I eat 5&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nd">@then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">u&lt;/span>&lt;span class="s1">&amp;#39;there should be 7 remaining&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">step_impl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">raise&lt;/span> &lt;span class="ne">NotImplementedError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">u&lt;/span>&lt;span class="s1">&amp;#39;STEP: Then there should be 7 remaining&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>시나리오의 각 구절 (&lt;em>GIVEN, WHEN, THEN&lt;/em>) 에 연결되는 기준은, 각 method 에 위치한 decorator 인 &lt;code>@given&lt;/code>, &lt;code>@when&lt;/code>, &lt;code>@then&lt;/code> 에 따라 달려있기 때문에, 파일 이름은 상관없고 해당 decorator 만 수정하지 않으면 된다. &lt;/p>
&lt;p>그리고 주의할 것은, 반드시 맨 위에 &lt;code>from behave import *&lt;/code> 와 같이 &lt;code>behave&lt;/code> 라이브러리를 import 해야 한다는 것이다.&lt;/p>
&lt;hr>
&lt;p>이렇게 하고 다시 &lt;code>behave&lt;/code> 를 실행하면, 예상대로 &lt;code>NotImplementedError&lt;/code> exception 이 발생하면서 traceback 이 출력되고, 테스트는 실패한 것으로 간주한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ behave
Feature: eat hotdogs &lt;span class="c1"># features/hotdog.feature:1&lt;/span>
Scenario: Eat &lt;span class="m">5&lt;/span> out of &lt;span class="m">12&lt;/span> &lt;span class="c1"># features/hotdog.feature:3&lt;/span>
Given there are &lt;span class="m">12&lt;/span> hotdogs &lt;span class="c1"># features/steps/hotdog.py:3 0.000s&lt;/span>
Traceback &lt;span class="o">(&lt;/span>most recent call last&lt;span class="o">)&lt;/span>:
File &lt;span class="s2">&amp;#34;/home/behave-test/venv/lib/python3.6/site-packages/behave/model.py&amp;#34;&lt;/span>, line 1329, in run
match.run&lt;span class="o">(&lt;/span>runner.context&lt;span class="o">)&lt;/span>
File &lt;span class="s2">&amp;#34;/home/behave-test/venv/lib/python3.6/site-packages/behave/matchers.py&amp;#34;&lt;/span>, line 98, in run
self.func&lt;span class="o">(&lt;/span>context, *args, **kwargs&lt;span class="o">)&lt;/span>
File &lt;span class="s2">&amp;#34;features/steps/hotdog.py&amp;#34;&lt;/span>, line 5, in step_impl
raise NotImplementedError&lt;span class="o">(&lt;/span>u&lt;span class="s1">&amp;#39;STEP: Given there are 12 hotdogs&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
NotImplementedError: STEP: Given there are &lt;span class="m">12&lt;/span> hotdogs
When I eat &lt;span class="m">5&lt;/span> &lt;span class="c1"># None&lt;/span>
Then there should be &lt;span class="m">7&lt;/span> remaining &lt;span class="c1"># None&lt;/span>
Failing scenarios:
features/hotdog.feature:3 Eat &lt;span class="m">5&lt;/span> out of &lt;span class="m">12&lt;/span>
&lt;span class="m">0&lt;/span> features passed, &lt;span class="m">1&lt;/span> failed, &lt;span class="m">0&lt;/span> skipped
&lt;span class="m">0&lt;/span> scenarios passed, &lt;span class="m">1&lt;/span> failed, &lt;span class="m">0&lt;/span> skipped
&lt;span class="m">0&lt;/span> steps passed, &lt;span class="m">1&lt;/span> failed, &lt;span class="m">2&lt;/span> skipped, &lt;span class="m">0&lt;/span> undefined
Took 0m0.000s
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="테스트-파일-구현하기">테스트 파일 구현하기&lt;/h2>
&lt;p>이제 테스트 파일 안의 method 를 구현해 보자.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">from&lt;/span> &lt;span class="nn">behave&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="o">*&lt;/span>
&lt;span class="nd">@given&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">u&lt;/span>&lt;span class="s1">&amp;#39;there are &lt;/span>&lt;span class="si">{num_hotdog}&lt;/span>&lt;span class="s1"> hotdogs&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">step_impl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_hotdog&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hotdogs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num_hotdog&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nd">@when&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">u&lt;/span>&lt;span class="s1">&amp;#39;I eat &lt;/span>&lt;span class="si">{eaten_hotdog}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">step_impl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">eaten_hotdog&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hotdogs&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">eaten_hotdog&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nd">@then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">u&lt;/span>&lt;span class="s1">&amp;#39;there should be &lt;/span>&lt;span class="si">{remaining_hotdog}&lt;/span>&lt;span class="s1"> remaining&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">def&lt;/span> &lt;span class="nf">step_impl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">remaining_hotdog&lt;/span>&lt;span class="p">):&lt;/span>
&lt;span class="k">assert&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hotdogs&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">remaining_hotdog&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>decorator 에서 숫자를 나타내는 부분을 &lt;code>num_hotdog&lt;/code> 같은 식으로 파라메터로 치환한 것을 주목해 달라. 이렇게 해 두면, 나중에 숫자만 바꾼 시나리오를 추가해도, 위의 세 개 method 를 재사용할 수 있는 장점이 있다.&lt;/p>
&lt;p>그리고 behave 는 &lt;a class="link" href="https://behave.readthedocs.io/en/stable/tutorial.html?highlight=eq_#context" target="_blank" rel="noopener"
>&lt;code>context&lt;/code> 라는 파라메터를 입력으로 받을 수 있도록&lt;/a> 지원한다. 해당 시나리오가 진행되는 동안 유효한 객체이며, 따라서 여기에 원하는 attribute 를 만들어 값을 저장하고 열람할 수 있다. 예제 시나리오에서는, 남은 핫도그 개수를 &lt;code>context.hotdogs&lt;/code> 로 보관한다.&lt;/p>
&lt;blockquote>
&lt;p>엄밀히 말하면, when 에 해당하는 method 에서 핫도그 개수를 차감하는 부분은 &lt;strong>여기서 구현하면 안 된다&lt;/strong>. 실제 업무에 사용하려면, 여기서 &lt;strong>&amp;lsquo;실제로 구현한 로직&amp;rsquo; 을&lt;/strong> &lt;strong>호출해야&lt;/strong> 한다. 그래야 검증을 할 수 있으니 말이다!&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>다시 &lt;code>behave&lt;/code> 를 실행하면, 이제야 모든 테스트가 통과되었음을 알 수 있다!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ behave
Feature: eat hotdogs &lt;span class="c1"># features/hotdog.feature:1&lt;/span>
Scenario: Eat &lt;span class="m">5&lt;/span> out of &lt;span class="m">12&lt;/span> &lt;span class="c1"># features/hotdog.feature:3&lt;/span>
Given there are &lt;span class="m">12&lt;/span> hotdogs &lt;span class="c1"># features/steps/hotdog.py:3 0.000s&lt;/span>
When I eat &lt;span class="m">5&lt;/span> &lt;span class="c1"># features/steps/hotdog.py:8 0.000s&lt;/span>
Then there should be &lt;span class="m">7&lt;/span> remaining &lt;span class="c1"># features/steps/hotdog.py:12 0.000s&lt;/span>
&lt;span class="m">1&lt;/span> feature passed, &lt;span class="m">0&lt;/span> failed, &lt;span class="m">0&lt;/span> skipped
&lt;span class="m">1&lt;/span> scenario passed, &lt;span class="m">0&lt;/span> failed, &lt;span class="m">0&lt;/span> skipped
&lt;span class="m">3&lt;/span> steps passed, &lt;span class="m">0&lt;/span> failed, &lt;span class="m">0&lt;/span> skipped, &lt;span class="m">0&lt;/span> undefined
Took 0m0.000s
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="숫자만-바꾼-시나리오를-추가하면">숫자만 바꾼 시나리오를 추가하면?&lt;/h2>
&lt;p>시나리오&lt;strong>만&lt;/strong> 추가하더라도 이미 재사용이 가능한 형태로 테스트 method 를 구현했기 때문에, 아래처럼 성공적으로 작동한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">$ behave
Feature: eat hotdogs &lt;span class="c1"># features/hotdog.feature:1&lt;/span>
Scenario: Eat &lt;span class="m">5&lt;/span> out of &lt;span class="m">12&lt;/span> &lt;span class="c1"># features/hotdog.feature:3&lt;/span>
Given there are &lt;span class="m">12&lt;/span> hotdogs &lt;span class="c1"># features/steps/hotdog.py:3 0.000s&lt;/span>
When I eat &lt;span class="m">5&lt;/span> &lt;span class="c1"># features/steps/hotdog.py:8 0.000s&lt;/span>
Then there should be &lt;span class="m">7&lt;/span> remaining &lt;span class="c1"># features/steps/hotdog.py:12 0.000s&lt;/span>
Scenario: Eat &lt;span class="m">10&lt;/span> out of &lt;span class="m">20&lt;/span> &lt;span class="c1"># features/hotdog.feature:8&lt;/span>
Given there are &lt;span class="m">20&lt;/span> hotdogs &lt;span class="c1"># features/steps/hotdog.py:3 0.000s&lt;/span>
When I eat &lt;span class="m">10&lt;/span> &lt;span class="c1"># features/steps/hotdog.py:8 0.000s&lt;/span>
Then there should be &lt;span class="m">10&lt;/span> remaining &lt;span class="c1"># features/steps/hotdog.py:12 0.000s&lt;/span>
&lt;span class="m">1&lt;/span> feature passed, &lt;span class="m">0&lt;/span> failed, &lt;span class="m">0&lt;/span> skipped
&lt;span class="m">2&lt;/span> scenarios passed, &lt;span class="m">0&lt;/span> failed, &lt;span class="m">0&lt;/span> skipped
&lt;span class="m">6&lt;/span> steps passed, &lt;span class="m">0&lt;/span> failed, &lt;span class="m">0&lt;/span> skipped, &lt;span class="m">0&lt;/span> undefined
Took 0m0.001s
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="마치며">마치며&lt;/h2>
&lt;p>이제 이 테스트 케이스를 구현할 때 mock 라이브러리를 통해 mocking 을 하면, 기능 검증을 충분히 할 수 있을 것이다. 시나리오를 추가하는 것은 개발자 뿐만이 아닌 비 개발자나 QA 도 할 수 있어야 하고, 개발자는 그렇게 푸시된 새로운 시나리오를 보고 커버리지를 달성하기 위해 테스트에 좀 더 집중할 수 있을 것이다.&lt;/p>
&lt;p>한 가지 맹점은, 기존 시나리오가 바뀌면 테스트 케이스 개발 과정에서 엄청난 고통이 뒤따를 수 있단 것이다. 따라서 (전에도 말했지만) 항상 시나리오는 합의 하에 신중히 추가되어야 한다.&lt;/p>
&lt;p>다음 시간에는 golang 으로 똑같은 시나리오를 테스트 해 볼 예정이다.&lt;/p></description></item></channel></rss>