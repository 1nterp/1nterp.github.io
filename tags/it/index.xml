<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IT on InterP Blog</title><link>https://interp.blog/tags/it/</link><description>Recent content in IT on InterP Blog</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sun, 27 Nov 2022 12:00:01 +0900</lastBuildDate><atom:link href="https://interp.blog/tags/it/index.xml" rel="self" type="application/rss+xml"/><item><title>스태프 엔지니어</title><link>https://interp.blog/staff-engineer/</link><pubDate>Sun, 27 Nov 2022 12:00:01 +0900</pubDate><guid>https://interp.blog/staff-engineer/</guid><description>&lt;img src="https://interp.blog/staff-engineer/feature.jpeg" alt="Featured image of post 스태프 엔지니어" />&lt;figure>
&lt;img loading="lazy" src="feature.jpeg" width="45%"/>
&lt;/figure>
&lt;p>여기 두 명의 개발자가 있다.&lt;/p>
&lt;ul>
&lt;li>나는 매니저가 되는 게 싫다. 회사에서도 하라는 걸 극구 거부했다. 기술을 놓지 않고 싶다.&lt;/li>
&lt;li>내가 신입 때, 개발자는 40이 되면 은퇴해야 한다고 들었다. 내가 40이 되었을 때엔, 사람들은 50이 되면 은퇴해야 한다고 말했다. 이제 나는 50에 가까워지고 있는데 은퇴해야 하나? 난 여전히 엔지니어다. 그리고 이 일을 계속 할 자신이 있다.&lt;/li>
&lt;/ul>
&lt;p>이 책을 처음 접했을 때, 적어도 두 분께는 알려드려야 될 것 같았다. 길벗 출판사에서 새로 펴낸 소프트웨어 엔지니어 교양서 &amp;lsquo;&lt;a class="link" href="http://www.yes24.com/Product/Goods/112904809" target="_blank" rel="noopener"
>스태프 엔지니어&lt;/a>&amp;rsquo; 말이다.&lt;/p>
&lt;h1 id="스태프-엔지니어">스태프 엔지니어?&lt;/h1>
&lt;p>앞선 두 분의 개발자에게 있어, 다음 커리어는 무엇일까? 물론 개발 역량만 충분하다면 계속 시니어 엔지니어를 하셔도 될거라고 생각한다. 그러나 특정 팀이나 프로젝트에만 소속되어 있어서, 권한이 제한되거나 조직 비전에 불만이 있어도 묵살당하기 일쑤였다. 그런 걸 봐 온 나로서는, 그 길이 정답이라고 콕 집을 순 없었다.&lt;/p>
&lt;p>관리자와 비교했을 때, &lt;strong>스태프 엔지니어는 기술 직군으로 커리어를 이어나갈 수 있는 또 다른 트랙&lt;/strong>이라고 소개한다. 한국에서는 아직 생소할 수도 있는 단어지만, 사실 스태프 엔지니어의 대표 역할인 &lt;em>&amp;lsquo;테크 리드&lt;/em>&amp;rsquo; 나 &lt;em>&amp;lsquo;아키텍트&amp;rsquo;&lt;/em> 같은 직함을 들어보면 그렇게 낯설지는 않다.&lt;/p>
&lt;p>관리자가 아닌 기술 커리어 트랙이 대체 왜 필요한 걸까? (역시 스태프 엔지니어이신) 이 책의 역자 장현희 님의 서문 중 일부가 답이 될 것 같았다.&lt;/p>
&lt;blockquote>
&lt;p>조직의 입장에서도 이런 식의 승진 절차는 한편으로는 손해이기도 합니다. 시니어 언제니어로 좋은 성과를 내던 사람이 팀장 승진 대상이 됩니다. &lt;strong>이 사람이 팀장이 되면 조직은 유능한 시니어 엔지니어 한 명을 잃고 초보 팀장 한 명을 얻게 되는 셈이기 때문이지요.&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>그렇다고 스태프 엔지니어가 시니어 엔지니어의 연장선이라는 것은 아니다. 이제는 팀 간, 부서 간을 넘나들며 플레이해야 하는 역할이기 때문이다. &amp;lsquo;테크 리드&amp;rsquo; 나 &amp;lsquo;아키텍트&amp;rsquo;, &amp;lsquo;해결사&amp;rsquo;, &amp;lsquo;오른팔&amp;rsquo; 처럼 책에서 구분해 둔 스태프 엔지니어 역할을 읽다 보면 정말 다양한 사람을 만나고, 또 다양한 일을 다뤄야 한다는 사실을 알 수 있다.&lt;/p>
&lt;h1 id="따라한다고-되는-게-아니다">따라한다고 되는 게 아니다&lt;/h1>
&lt;p>길벗 출판사의 다른 커리어 조언서인 &amp;lsquo;소프트 스킬/커리어 스킬&amp;rsquo; 이나 &amp;lsquo;이펙티브 엔지니어&amp;rsquo;, &amp;lsquo;&lt;a class="link" href="https://interp.blog/simple-software/" >심플 소프트웨어&lt;/a>&amp;rsquo; 와 책 디자인은 비슷한데, 이 책은 앞선 책들과 다른 점이 있다. 책의 지침을 다 따라한다고 해도 스태프 엔지니어가 될 수 없다는 점이다.&lt;/p>
&lt;p>앞선 책들은 (물론 주제가 다르긴 해도) 사실 비슷한 구석이 있었다. 전반적인 커리어 관리, 업무 태도, 효율적인 업무를 위한 조언들 말이다. &amp;ldquo;야, 너두 할 수 있어&amp;rdquo; 같은 느낌이랄까. 하지만 이 책을 읽는 동안엔 왠지 모를 압박을 받았다. &lt;strong>&amp;ldquo;이래도 할 거야?&amp;quot;&lt;/strong> 같은. 지침서가 아니라, 다큐멘터리를 보는 느낌이었다.&lt;/p>
&lt;p>하고 싶다고 해서 되는 것도 아니다. 스태프 엔지니어가 되려면 노력과 운이 동시에 필요하다는 것이다. 개인적인 노력도 중요하지만, 네트워킹을 통해 스폰서 내지는 지지 기반을 만들어야 한다. 그러기 위해선, 자신이 어떤 일을 원하는지 어떤 역할로써 스태프 엔지니어가 될 것인지 스폰서 (대개는 팀장이나 본부장) 에게 공유해야 하는 것이 첫 번째라고 조언한다.&lt;/p>
&lt;p>하지만 스태프 엔지니어가 된다고 해서, 더욱 커진 권한을 통해 자신의 비전을 마구잡이로 주입해도 된다는 말은 아니다. 책에서 표현하는 &lt;em>&amp;ldquo;관리자를 놀라게 하는 일들&amp;rdquo;&lt;/em> 이 그런 것일텐데, 결국 회사 입장에서는 회사 비전에 가장 잘 맞추는 사람을 승진시키려고 할 것이기 때문이다. 따라서, 자신이 하고자 하는 일과 회사 비전을 최대한 맞추되, 그 속에서도 회사가 우선시되어야 한다고 강조한다.&lt;/p>
&lt;p>회사와의 비전을 정 못 맞추겠다면 이직해서 스태프 엔지니어 자리에 앉는 것도 고려할 수 있다는 사실 역시 물론 짚어준다. 지지기반이 낮을 순 있지만, 다니는 회사의 규모가 크거나 스태프 엔지니어 자리가 쉽게 나지 않을 때는 고려해 볼 수 있다는 것이다.&lt;/p>
&lt;h1 id="경험담만-들어도-이득">경험담만 들어도 이득&lt;/h1>
&lt;p>이 책을 집어들고 &amp;lsquo;난 이제 스태프 엔지니어가 되고 말겠어!&amp;rsquo; 라고 외치진 말자. 이 책이 당장의 업무에 직접적인 영향을 줄 수 있다고 보긴 힘들다. 반대로 말하면, 지금 내 위치를 점검해 보고 스태프 엔지니어들의 경험담을 들어볼 수 있다.&lt;/p>
&lt;p>이미 그 길을 걸어온 사람들의 경험담을 듣고, 그들이 조언하는 것을 듣는 것은 매우 소중한 기회이다. 스태프 엔지니어 같은 직함에 매달리지 말고, 그냥 잘 하는 선배 개발자들의 직업관, 마음가짐, 업무에 대한 경험담을 듣는 것만으로도 이 책은 절반의 역할을 다 했다고 생각한다. 실제로 책 후반부는 모조리 14명의 스태프 엔지니어들의 인터뷰로 준비되어 있다. 책에서 주석으로 알려주는 다양한 블로그나, 인터뷰 말미에 나오는 추천도서 역시 쏠쏠하다.&lt;/p>
&lt;p>그런 면에서, 꼭 시니어 엔지니어가 아닌 신입 개발자라도 이 책은 큰 도움이 될 것이다. 물론 그런 경우라면 &amp;lsquo;커리어 스킬&amp;rsquo; 을 읽는 게 더욱 도움이 될 거라 보는데, 그 이유는 이 책의 전반부가 너무 지엽적인 조언들로 가득하기 때문이다. 인터뷰만 보는 걸 추천하는 이유이기도 하다.&lt;/p>
&lt;hr>
&lt;p>이 책에서 엮은 다양한 경험담과 조언들을 통해, 최소한 나의 다음 커리어에 대해 고민해 볼 수 있었다. 그리고 언제나처럼, 승진은 개인이 잘 해서 되는게 아니라는 사실, 네트워킹은 필수불가결한 요소라는 것도 같이 알아 갈 수 있었다. (본인처럼) 다음 커리어에 대해 불안감을 가진 개발자/엔지니어에게도, 이 책이 도움이 되지 않을까 생각해 본다.&lt;/p>
&lt;p>&lt;em>※ 출판사의 서평 이벤트를 통해 증정받은 책으로 작성하였습니다.&lt;/em>&lt;/p></description></item><item><title>심플 소프트웨어</title><link>https://interp.blog/simple-software/</link><pubDate>Mon, 09 May 2022 17:43:44 +0900</pubDate><guid>https://interp.blog/simple-software/</guid><description>&lt;img src="https://interp.blog/simple-software/book.jpg" alt="Featured image of post 심플 소프트웨어" />&lt;figure class="align-center ">
&lt;img loading="lazy" src="book.jpg#center" width="40%"/>
&lt;/figure>
&lt;p>&lt;a class="link" href="https://www.gilbut.co.kr/search/search_book_list#code=003000000&amp;amp;sub_code=003000000%3E003001000&amp;amp;view_mode=&amp;amp;list_size=15&amp;amp;order=date&amp;amp;descending=true&amp;amp;page=1" title="길벗 출판사"
target="_blank" rel="noopener"
>길벗 출판사&lt;/a>에서 나온 비슷한 디자인의 책이 몇 권 있다. IT 교양서로 분류된 책 중에서 어두운 표지색을 내려오는 세로 제목 사이에 아이콘이 끼워져 있는데, &amp;lsquo;소프트웨어 장인&amp;rsquo;, &amp;lsquo;소프트 스킬&amp;rsquo;, &amp;lsquo;커리어 스킬&amp;rsquo; 세 권이 있다. 우연히도 세 권을 다 읽어봤는데, 이 시리즈 (?) 에서 한 권 더 추가된 &amp;lsquo;심플 소프트웨어&amp;rsquo; 를 최근에 도서관에서 빌려보게 되었다.&lt;/p>
&lt;p>앞선 세 권과 비슷하게, 이 책 역시 작가의 블로그 내용을 엮어 낸 것이다. (&lt;a class="link" href="https://www.codesimplicity.com/" target="_blank" rel="noopener"
>https://www.codesimplicity.com/&lt;/a>)&lt;/p>
&lt;p>하지만 책에서만 소개되는 챕터가 존재하고, 챕터 간에 흐름이 끊기거나 하지 않고 나름 긴밀히 엮여있기 때문에 단순한 번역본으로 보기엔 무리가 있다. 한 챕터의 내용이 길지 않기 때문에, 가볍게 끊어 읽기에도 좋다. (무엇보다 다른 책들에 비해 책이 얇다. 아주 큰 차이점이다!)&lt;/p>
&lt;h2 id="이왕-할-거면-잘-하려고-노력하자">이왕 할 거면, 잘 하려고 노력하자.&lt;/h2>
&lt;p>책 뒷면에 보면 &amp;lsquo;할 거면 잘 해라!&amp;rsquo; 라고 적혀있다. 나는 처음에 이 뒷면을 보고, 자뭇 도발적이라고 생각했다. 하지만 읽다 보니, &amp;lsquo;못 하면 안 돼!&amp;rsquo; 라는 뜻이 아니었다. 이왕 개발자를 할 거라면 잘 하고 싶은 마음으로 책을 펼쳤으면 하는 저자의 바람이라고 이해해주면 좋겠다.&lt;/p>
&lt;h2 id="단순한-개발을-해야-하는-이유">단순한 개발을 해야 하는 이유&lt;/h2>
&lt;p>모든 챕터의 시작은 바로 &amp;lsquo;단순함&amp;rsquo; 에서 출발한다. 단순해지면, 아래 목표들을 이루기가 수월하다는 것이다.&lt;/p>
&lt;ol>
&lt;li>테스팅이 쉽다.&lt;/li>
&lt;li>버그가 적다.&lt;/li>
&lt;li>기능 추가를 해도 코드 품질이 크게 떨어지지 않는다.&lt;/li>
&lt;li>(다른) 개발자가 이해하기 쉽다.&lt;/li>
&lt;li>보안이 향상된다.&lt;/li>
&lt;/ol>
&lt;h2 id="먼저-이해하고-공부하기">먼저, 이해하고 공부하기&lt;/h2>
&lt;p>저자는 먼저, 개발자는 자신이 뭘 개발하는지 완벽히 이해하려고 노력해야 한다고 한다. 그동안 만나왔던 개발자의 10% ~ 20% 만이, 무엇을 개발하고 있는지 이해하고 있었다고 한다. 만약 무엇을 개발하고 있는지, 내가 보는 코드에 있는 개념이나 기법, 단어 중 어느 하나라도 모르고 있다면, 내가 참고하고 있는 설계에서 모르는 것이 하나라도 있다면, 무조건 그 부분을 이해하고 개발을 계속하라고 조언한다.&lt;/p>
&lt;p>이해가 잘 안되면, 공부를 해야 한다. 더 자세한 설명을 해 주는 매뉴얼이나 참고서를 보거나, 프로그래밍 언어를 다시 배워야 할 수도 있다. 다른 사람에게 물어봐야 할 수도 있다. 이해가 되지 않았는데 일을 하는 것은 일종의 헛일이 될 수 있다고, 저자는 몇 번이고 지적한다. 당장은 문제가 해결될 지 몰라도, 결국 유지보수와 설계 변경으로 인한 비용을 몇 배나 지불하고 나서야 잘못됐다는 것을 깨닫는다고 말이다.&lt;/p>
&lt;br/>
&lt;script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-0712823212859607"
crossorigin="anonymous">&lt;/script>
&lt;ins class="adsbygoogle"
style="display:block"
data-ad-format="fluid"
data-ad-layout-key="-fx-q+4w-88+2u"
data-ad-client="ca-pub-0712823212859607"
data-ad-slot="1092971030">&lt;/ins>
&lt;script>
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script>
&lt;br/>
&lt;h3 id="생산성-향상을-조직에-불어넣기">생산성 향상을 조직에 불어넣기&lt;/h3>
&lt;p>리펙터링이나 생산성 향상을 위한 도구나 기법 도입은, 심플 소프트웨어를 지향하기 위한 수단이므로 항상 염두에 둬야 하는 부분이다. 하지만 현실은 씁슬하게도, 다른 개발자나 상사에 의해 반려되는 아이디어이기도 하다. &amp;ldquo;다 좋은 거 알지, 그런데 제품 출시부터 먼저 해야 하지 않을까?&amp;rdquo;&lt;/p>
&lt;p>맞는 말이다. 그래서 저자가 남긴 조언은 다음과 같다.&lt;/p>
&lt;ul>
&lt;li>개발자가 생각하는 진짜 문제를 확인해라. 혼자 생각하거나, 다른 사람이 지적한 생산성 관련 문제를 가지고 가지 마라. 개발자가 짜증난다고 생각한 부분이 어디인지 파악해라.&lt;/li>
&lt;li>암달의 법칙을 적용해서, 가장 쉽게 할 수 있으면서 효과가 가장 좋은 문제를 먼저 해결하라. 그러면 개발자의 신뢰를 얻을 수 있고, 보다 큰 리펙터링 업무를 지지해 줄 우군을 만들 수 있다.&lt;/li>
&lt;li>이 계획을 막는 사람이 소수 남아있을 수 있다. 하지만 대부분은 업무를 효율적으로 처리하고 싶어하므로, 다수의 의견이 될 수 있다. 그렇다고 소수를 맹목적으로 비난하면 안 된다. 항상 친절하게 대하되, 회유하거나 협상하거나, 아니면 무시해라.&lt;/li>
&lt;/ul>
&lt;h2 id="단순한-개발을-위한-것-리펙터링">단순한 개발을 위한 것: 리펙터링&lt;/h2>
&lt;p>리펙터링으로 돌아가면, 기능 추가를 하기 전에 리펙터링을 먼저 해두라고 조언한다. 그래야지만, 기능 추가에 따르는 코드 품질 저하를 막을 수 있다는 것이다.&lt;/p>
&lt;p>전적으로 동의한다. 내 생각을 덧붙이자면, 나는 이 과정이 &lt;strong>기능을 추가하기 전에 코드를 이해하는 과정이라고 생각&lt;/strong>한다. (앞서 말했던 &amp;lsquo;이해하고 공부하기&amp;rsquo; 와 연결된다.) 비유를 섞자면, 일종의 집안일이다. 귀찮지만, 그리고 티는 별로 안나지만, 꼭 해야 하는 일. 하지 않으면 삶이 팍팍해지고, 치우지 않은 것들이 장애물이나 위협이 되지만, 하고 나면 효율적으로 삶을 영위할 수 있는 그런 일 말이다.&lt;/p>
&lt;p>물론 저자는 무분별한 리펙터링을 경계한다. 집에 불이 났는데 정원을 가꾸는 꼴이란다. 리펙터링은 항상 기능 중심에서 이뤄져야 한다. 그리고 리펙터링은 해도 해도 끝이 없기 때문에, 한계를 정해두라고 한다. 어느 정도 해야 다른 사람들이 알아볼 수 있을지를 생각한다면, 그 쯤 했을 때 그만 둘 수 있을 것이다.&lt;/p>
&lt;h2 id="사용자는-문제를-알려주고-개발자는-문제를-해결한다">사용자는 문제를 알려주고, 개발자는 문제를 해결한다.&lt;/h2>
&lt;p>나는 이 책의 초입에 &amp;lsquo;설계 2원칙&amp;rsquo; 이라고 말한 것 보다, 이 1원칙만 고수해야 한다고 생각한다. (참고로 설계 2원칙이란 것은 별게 없고, 개발 비용이 크더라도 유지보수 비용이 훨씬 크게 줄어들면 반드시 해야 한다는 것과, 유지보수 비용과 코드 복잡성은 비례한다는 것이었다.)&lt;/p>
&lt;p>아마 저자가 (간접적이나마) 가장 많이 언급한 개념이 이것이 아닐까 한다. 사용자가 제기한 문제만 효율적으로 풀어도, 훌륭한 개발자이다. 개발자가 문제를 만들어 알아서 해결하려 들면, 그것은 개발자의 오만이고, 코드 복잡성을 비정상적으로 증가시키는 요인이 된다.&lt;/p>
&lt;p>위에서 &amp;lsquo;리펙터링&amp;rsquo; 이야기를 할 때, 개발자가 겪는 진짜 문제를 수집하란 말을 했었다. 이 경우에는 &amp;lsquo;개발자&amp;rsquo; 가 사용자가 된다.&lt;/p>
&lt;h2 id="마지막으로">마지막으로&lt;/h2>
&lt;p>이 외에도 &amp;lsquo;테스트할 때 고려해야 할 것&amp;rsquo; 이나 &amp;lsquo;오픈 소스 프로젝트를 성공적으로 이끌었던 경험담&amp;rsquo; 등을 같이 공유하고 있으니, 쉽게 읽히는 책이니만큼 다른 개발자 분들에게 추천하고픈 책이다.&lt;/p>
&lt;p>마지막으로 언급하고픈 챕터가 하나 있는데, 내용은 짧지만 메시지는 강력하다. 하지만 개발에 국한된 내용은 아니어서 짧게 소개하고자 한다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>성공은 혁신이 아니라 실행에서 온다.&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>이 제목을 보자마자, &amp;lsquo;생활의 달인&amp;rsquo; 에서 어떤 맛집 사장님이 음식을 준비하는 과정이 전파를 탄 기억이 어렴풋이 났다. 새벽 5시에 일어나 몇 시간 동안 갖가지 재료들로 음식을 준비고 있노라면, PD 가 &amp;lsquo;이런거 다 보여주셔도 돼요?&amp;rsquo; 라고 묻는데, 사장님이 자신만만한 미소를 지으시던 것 같다. 마치 &lt;strong>&amp;lsquo;할 수 있으면 해보시던가&amp;rsquo;&lt;/strong> 같은 느낌.&lt;/p>
&lt;p>아무리 좋은 아이디어라도 실행하지 않으면 쓸모가 없다. 이론가는 이론가일 뿐이고, 발명가는 발명가일 뿐이다라고 저자는 말한다. 전혀 다른 각도로 큰 교훈을 얻은 것 같아서, 이 책이 큰 도움이 되었다.&lt;/p>
&lt;br/>
&lt;script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-0712823212859607"
crossorigin="anonymous">&lt;/script>
&lt;ins class="adsbygoogle"
style="display:block"
data-ad-client="ca-pub-0712823212859607"
data-ad-slot="6929871144"
data-ad-format="auto"
data-full-width-responsive="true">&lt;/ins>
&lt;script>
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script>
&lt;br/></description></item></channel></rss>