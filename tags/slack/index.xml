<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Slack on InterP Blog</title><link>https://interp.blog/tags/slack/</link><description>Recent content in Slack on InterP Blog</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Wed, 22 Nov 2023 21:38:53 +0900</lastBuildDate><atom:link href="https://interp.blog/tags/slack/index.xml" rel="self" type="application/rss+xml"/><item><title>Github Pull Request 리뷰 요청 자동화하기</title><link>https://interp.blog/github-actions-pr-review-request/</link><pubDate>Wed, 22 Nov 2023 21:38:53 +0900</pubDate><guid>https://interp.blog/github-actions-pr-review-request/</guid><description>&lt;img src="https://interp.blog/github-actions-pr-review-request/feature.jpg" alt="Featured image of post Github Pull Request 리뷰 요청 자동화하기" />&lt;p>Github 에서 Pull Request 를 생성하면, CI/CD 파이프라인을 통과해서 리뷰 받을 준비를 마쳤음에도 여전히 오픈되어 있는 경우가 있다. 스크럼 회의 시간에 리뷰를 요청해 보기도 하고, 직접 메시지를 보내기도 하지만.. Pull Request 가 많은 경우엔 이런 작업이 여간 귀찮은 일이 아니다.&lt;/p>
&lt;p>&lt;del>답답해서 내가 뛴다는 마음으로&lt;/del> Github Actions 를 이용해, Pull Request 가 특정 조건을 만족하면 매일 아침 팀 Slack 채널에 &amp;lsquo;리뷰 요청&amp;rsquo; 메시지를 보내는 Workflow 를 만들어 보기로 했다. 여기서는 Github Action 이나 Workflow 소개 없이, 문제 해결 과정만 적어 두었다.&lt;/p>
&lt;h1 id="대상-pull-request-조건">대상 Pull Request 조건&lt;/h1>
&lt;ul>
&lt;li>Open&lt;/li>
&lt;li>Approval 을 받지 않음&lt;/li>
&lt;li>마지막 커밋에서 CI/CD 파이프라인을 통과함&lt;/li>
&lt;li>&lt;code>Ready for review&lt;/code> 레이블이 존재함&lt;/li>
&lt;/ul>
&lt;h1 id="workflow-기본-구조">Workflow 기본 구조&lt;/h1>
&lt;p>우선 &lt;del>ChatGPT의 도움을 조금 받아&lt;/del> 다음 2개의 Step 이 포함된 Job 을 지정하는 것부터 출발했다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Notify PR Review Request&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">schedule&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">cron&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;0 0 * * *&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 매일 00:00&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">notify&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Get Pull Requests&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pulls&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/github-script@v6&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">github-token&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{secrets.GITHUB_TOKEN}}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> // ...
&lt;/span>&lt;span class="sd"> // return ...&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Send Slack message&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">steps.pulls.outputs.result != &amp;#39;&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">8398a7/action-slack@v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">custom&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">custom_payload&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ fromJSON(steps.pulls.outputs.result) }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">SLACK_WEBHOOK_URL&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.SLACK_WEBHOOK_URL }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>actions/github-script&lt;/code> 와 &lt;code>8398a7/action-slack&lt;/code> 을 사용했고, 각각 &lt;code>$GITHUB_TOKEN&lt;/code> 과 &lt;code>$SLACK_WEBHOOK_URL&lt;/code> Variable 을 필요로 한다.&lt;/p>
&lt;p>Github Token 은 &lt;a class="link" href="https://docs.github.com/en/actions/security-guides/automatic-token-authentication#about-the-github_token-secret" target="_blank" rel="noopener"
>이미 내장되어 있지만&lt;/a>, Slack Webhook URL 은 직접 생성해서 등록해야 한다.&lt;/p>
&lt;h1 id="slack-app-생성">Slack App 생성&lt;/h1>
&lt;p>Slack Workspace 에 App 생성이 가능한 계정에 로그인 되어 있다면, 다음을 따르면 된다.&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="https://api.slack.com/apps?new_app=1" target="_blank" rel="noopener"
>다음 링크&lt;/a> 로 이동&lt;/li>
&lt;li>&amp;lsquo;From scratch&amp;rsquo; 를 선택&lt;/li>
&lt;li>App 이름을 지정하고, 대상 워크스페이스를 선택&lt;/li>
&lt;li>App 화면이 뜨면, &amp;lsquo;Features &amp;gt; Incoming Webhooks&amp;rsquo; 을 선택&lt;/li>
&lt;li>페이지 하단에 &amp;lsquo;Add New Webhook to Workspace&amp;rsquo; 를 클릭&lt;/li>
&lt;li>채널을 추가하면 채널의 Webhook URL 을 확인할 수 있다.&lt;/li>
&lt;/ol>
&lt;div style="background-color: var(--body-background); width: 98%; margin:1px; padding: 20px; border-radius: 5px;font-size: .8em;display: flex;">
&lt;div style="width: 16px;margin-right: 7px; margin-left: 4px;">
🪴
&lt;/div>
&lt;div>
&amp;lsquo;Display Information&amp;rsquo;에서 App 아이콘과 이름을 자유롭게 선택할 수도 있으니 참고하자.
&lt;/div>
&lt;/div>
&lt;p>이제 이 Webhook URL 을 Github Secret 으로 등록하면 된다. &lt;em>Settings &amp;gt; Secrets and variables&lt;/em> 에서 등록이 가능하며, 위에서 지정한 것 처럼 &lt;code>SLACK_WEBHOOK_URL&lt;/code> 이라는 이름으로 등록하면 된다.&lt;/p>
&lt;h1 id="rest-api-graphql-api">REST API? GraphQL API!&lt;/h1>
&lt;p>첫 번째 step 인 &lt;code>actions/github-script&lt;/code> 을 채워보자.&lt;/p>
&lt;p>REST API 를 활용한 함수를 사용하는 방법과, GraphQL 을 짜서 한 번에 쿼리하는 방법이 있다. 코드가 좀 더 간결해질 것 같아 두 번째 방법을 사용했는데, 첫 번째 방법을 통해 순차적으로 쿼리하는 것도 물론 가능하다.&lt;/p>
&lt;p>GraphQL 에 대해 잘 모르겠다면, &lt;a class="link" href="https://graphql-kr.github.io/learn/" target="_blank" rel="noopener"
>이 문서&lt;/a> 를 참고하자. Github GraphQL API 에 대한 자세한 내용은 &lt;a class="link" href="https://docs.github.com/ko/graphql" target="_blank" rel="noopener"
>이 문서&lt;/a> 도 참고하자.&lt;/p>
&lt;p>우선, 대상이 되는 정보(&lt;em>제목, URL, 리뷰 상태, 레이블, 최근 커밋의 상태&lt;/em>) 를 모두 뽑아와야 하므로, 아래와 같은 쿼리가 필요하다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-graphql" data-lang="graphql">&lt;span class="kd">query&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">repository&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="py">owner&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;${context.repo.owner}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;${context.repo.repo}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">pullRequests&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="py">states&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">OPEN&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">first&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">100&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">nodes&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">title&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">url&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">reviewDecision&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">labels&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="py">first&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">10&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">nodes&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">name&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">commits&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="py">last&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">nodes&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">commit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">statusCheckRollup&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="py">state&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 쿼리는 현재 담당하는 프로젝트 크기에 맞춰 몇 가지 제약을 뒀다. Open 된 Pull Request 가 100개를 넘지 않고, Label 이 10개 미만으로 추가되는 프로젝트 환경이어야 유효하다. 커다란 프로젝트에서는 참고해야 한다.&lt;/p>
&lt;p>여기 &lt;code>repository&lt;/code> 를 지정할 때 &lt;code>${context.repo}&lt;/code> 의 값을 썼는데, 이는 &lt;code>github-scripts&lt;/code> 에서 제공하는 변수이다. 자세한 내용은 &lt;a class="link" href="https://github.com/actions/toolkit/blob/main/packages/github/src/context.ts" target="_blank" rel="noopener"
>이 소스코드&lt;/a> 를 참고해도 되지만, 지금은 &amp;lsquo;&lt;em>현재 project 의 owner/repo 이름&lt;/em>&amp;rsquo; 을 의미한다고만 알아두자.&lt;/p>
&lt;h1 id="github-scripts-완성">Github Scripts 완성&lt;/h1>
&lt;p>이제 GraphQL 을 사용해서 쿼리를 실행하고, 결과를 필터링해 Map 형태로 반환해보자. 참고로 &lt;code>github-scripts&lt;/code> 는 Javascript 를 사용한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Get Pull Requests&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pulls&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/github-script@v6&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">github-token&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{secrets.GITHUB_TOKEN}}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> const query = `...` // 위의 GraphQL 쿼리
&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> const result = await github.graphql(query);
&lt;/span>&lt;span class="sd"> const prs = result.repository.pullRequests.nodes;
&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> const filteredPRs = prs.filter(pr =&amp;gt;
&lt;/span>&lt;span class="sd"> pr.reviewDecision !== &amp;#39;APPROVED&amp;#39; &amp;amp;&amp;amp;
&lt;/span>&lt;span class="sd"> pr.labels.nodes.find(label =&amp;gt; label.name === &amp;#39;Ready for review&amp;#39;) &amp;amp;&amp;amp;
&lt;/span>&lt;span class="sd"> pr.commits.nodes[0].commit.statusCheckRollup.state === &amp;#34;SUCCESS&amp;#34;
&lt;/span>&lt;span class="sd"> );
&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> if (filteredPRs.length &amp;gt; 0) {
&lt;/span>&lt;span class="sd"> // Slack message block 생성
&lt;/span>&lt;span class="sd"> }&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>filteredPRs&lt;/code> 에는 위에서 정의한 조건을 만족하는 Pull Request 들이 담긴다. 이제 이 정보를 Slack message block 으로 만들어서 보내면 된다.&lt;/p>
&lt;h1 id="통합-문제">통합 문제&lt;/h1>
&lt;p>여기서 두 가지 난관이 있었는데,&lt;/p>
&lt;ul>
&lt;li>Step 간에 JSON 으로 정보 교환이 가능한가&lt;/li>
&lt;li>Slack message 를 일반 텍스트가 아니라, 멋지게 만드려면 어떻게 해야 하는가&lt;/li>
&lt;/ul>
&lt;p>첫 번째는 쉽게 해결했다. &lt;code>fromJSON()&lt;/code> 을 활용하면 &lt;code>github-scripts&lt;/code> 에서 반환되는 (따옴표가 전부 escape 된) JSON String 을 그대로 받아다 쓸 수 있었다. 더욱 자세한 내용은 &lt;a class="link" href="https://github.blog/changelog/2020-04-15-github-actions-new-workflow-features/#expressions-in-jobcontinue-on-error" target="_blank" rel="noopener"
>블로그 문서&lt;/a> 를 참고하자.&lt;/p>
&lt;p>두 번째가 조금 어려웠는데, 결국 찾았다. 다음 매뉴얼과 Playground 페이지를 통해 Slack 의 (Block-kit 이라고 하는) custom message 구조를 이해하고 만들어 볼 수 있었다.&lt;/p>
&lt;ul>
&lt;li>매뉴얼: &lt;a class="link" href="https://api.slack.com/reference/block-kit" target="_blank" rel="noopener"
>https://api.slack.com/reference/block-kit&lt;/a>&lt;/li>
&lt;li>Playground: &lt;a class="link" href="https://api.slack.com/tools/block-kit-builder" target="_blank" rel="noopener"
>https://api.slack.com/tools/block-kit-builder&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>그러면 문제는 좀 더 간단해진다.&lt;/p>
&lt;ol>
&lt;li>&lt;code>github-scripts&lt;/code> 에서는 Slack Message 구조를 전부 만들어서 JSON 으로 내보내고&lt;/li>
&lt;li>&lt;code>action-slack&lt;/code> 에서는 JSON 자체를 받아서 출력하면 된다.&lt;/li>
&lt;/ol>
&lt;h2 id="slack-message-구조-생성">Slack message 구조 생성&lt;/h2>
&lt;p>다시 &lt;code>github-scripts&lt;/code> step 으로 돌아가 보자. 제일 처음에 헤더가 되는 block 을 미리 지정한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">blocks&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;header&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;plain_text&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;👀 PR 목록&amp;#34;&lt;/span>&lt;span class="p">}},&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;divider&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">];&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>그 다음, &lt;code>filteredPRs&lt;/code> 결과가 존재하는 경우에 &lt;code>blocks&lt;/code> 안에 메시지를 채워넣는다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">filteredPRs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// Slack message block 생성
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">blocks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">({&lt;/span>
&lt;span class="s2">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;section&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s2">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;mrkdwn&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">filteredPRs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pr&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="sb">`• &amp;lt;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">pr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">|*&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">pr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">title&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">*&amp;gt; `&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;\n&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="p">});&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>마지막으로, &lt;code>blocks&lt;/code> 를 반환하면 된다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript"> &lt;span class="c1">// 디버깅
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">blocks&lt;/span> &lt;span class="p">}));&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">blocks&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="slack-step-완성">Slack Step 완성&lt;/h2>
&lt;p>&lt;code>pulls&lt;/code> step 에서 반환된 값을 JSON 으로 변환해 그대로 넣는다. 맨 처음 Step 과 크게 달라진 것은 없다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Send Slack message&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">steps.pulls.outputs.result != &amp;#39;&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">8398a7/action-slack@v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">custom&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">custom_payload&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ fromJSON(steps.pulls.outputs.result) }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">SLACK_WEBHOOK_URL&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.SLACK_WEBHOOK_URL }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="마무리-작업">마무리 작업&lt;/h1>
&lt;p>이제 작업은 끝났고 테스트만 남았다.&lt;/p>
&lt;h2 id="main-이-아닌-특정-브랜치에서-workflow-실행하기">main 이 아닌, 특정 브랜치에서 Workflow 실행하기&lt;/h2>
&lt;p>우선, 위 workflow 에서 &lt;code>on:&lt;/code> 절에 다음이 추가되어야 한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">workflow_dispatch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 뭘 더 넣을 필요없이 이게 전부다.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>나는 &lt;code>gh&lt;/code> CLI 를 사용해서 로그인한 다음, 아래 명령어로 실행했다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">gh workflow run &lt;span class="s1">&amp;#39;Notify PR Review Request&amp;#39;&lt;/span> --ref &lt;span class="o">{&lt;/span>branch&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="github-scripts-디버깅">Github Scripts 디버깅&lt;/h2>
&lt;p>문법 오류를 잡기 위해서는, Javascript Linter 가 작동하는 IDE 에서 먼저 작성한 다음, 옮겨오는 것을 추천한다.&lt;/p>
&lt;h2 id="graphql-디버깅">GraphQL 디버깅&lt;/h2>
&lt;p>API 문서를 뒤져보면 Personal access token 을 사용해서 쿼리를 할 수 있는 방법이 존재한다. 원하는 값이 나오는지 확인한 뒤에 Github Scripts 에 적용해 주자.&lt;/p>
&lt;hr>
&lt;p>이 Workflow 는 특정 이벤트 기반이 아니라, 주기적으로 실행되면서 상태를 직접 체크해야 하기 때문에 Workflow 가 복잡해 진 것 같다. 그래도 Github Actions 를 이용하면, 일일히 리뷰 요청을 하지 않아도 된다. Github Scripts 에서 반환되는 값을 어떻게 받아 처리할지도 사실 막막했는데, &lt;code>fromJSON()&lt;/code> 을 사용하니 간단했다.&lt;/p>
&lt;p>전혀 다른 문제를 Github Actions 로 자동화하려는 경우에도, 이 글이 여러모로 도움이 되었으면 좋겠다.&lt;/p>
&lt;figure class="align-center ">
&lt;img loading="lazy" src="image.png#center" width="70%"/>
&lt;/figure></description></item></channel></rss>