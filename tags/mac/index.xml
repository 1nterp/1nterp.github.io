<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mac on InterP Blog</title><link>https://interp.blog/tags/mac/</link><description>Recent content in Mac on InterP Blog</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sat, 25 Jan 2025 22:29:39 +0900</lastBuildDate><atom:link href="https://interp.blog/tags/mac/index.xml" rel="self" type="application/rss+xml"/><item><title>Mac 용 달력 프로그램, itsycal</title><link>https://interp.blog/itsycal-mac-calendar/</link><pubDate>Sat, 25 Jan 2025 22:29:39 +0900</pubDate><guid>https://interp.blog/itsycal-mac-calendar/</guid><description>&lt;img src="https://interp.blog/itsycal-mac-calendar/feature.jpg" alt="Featured image of post Mac 용 달력 프로그램, itsycal" />&lt;p>Mac 을 업무에 사용하면서 가장 많이 쓰는 앱을 소개하면 좋겠다고 생각했다. 뭐가 있을까? &lt;del>당연히 Visual Studio Code 겠지만&lt;/del> 개발자가 아니더라도 범용적으로 쓸 수 있는 앱을 찾아보기로 했다.&lt;/p>
&lt;p>갑자기, 작업표시줄 위에 떠 있는 &lt;strong>1월 25일 (토)&lt;/strong> 가 보였다. 오늘이 몇월 몇일인지 바로 확인할 수 있는, 이번 주가 몇 번째 주인지 확인할 수 있는, 다른 캘린더와 연결해서 일정을 간단히 확인할 수 있는 앱, &lt;a class="link" href="https://www.mowglii.com/itsycal/" target="_blank" rel="noopener"
>itsycal&lt;/a> 이다.&lt;/p>
&lt;figure>
&lt;img loading="lazy" src="./image.png"
alt="실제 사용화면" width="70%"/> &lt;figcaption>
&lt;p>실제 사용화면&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;h1 id="시간말고-날짜도-확인하고-싶어">시간말고 날짜도 확인하고 싶어&lt;/h1>
&lt;p>내가 잘 모를 순 있겠지만, 작업표시줄에 시간만 나타낼 수 밖에 없어서 날짜도 바로 확인하고 싶었다.&lt;/p>
&lt;p>홈페이지에서는 영어 포맷으로 나타나나 있지만, 지금처럼 얼마든지 한글로 바꿀 수 있다.&lt;/p>
&lt;h1 id="몇째-주인지-확인하고-싶어">몇째 주인지 확인하고 싶어&lt;/h1>
&lt;p>회사 특성상, 일정을 이야기해야 할 때 주 번호 (Calendar Week) 를 자주 언급해야 할 때가 있다. 그래서 지금이 몇째 주인지 빠르게 파악할 수 있어야 하는데, 메일 프로그램인 아웃룩에서도 지원은 한다.&lt;/p>
&lt;figure>
&lt;img loading="lazy" src="outlook.png"
alt="&amp;amp;lsquo;설정 &amp;amp;gt; 캘린더 &amp;amp;gt; 주 번호 표시&amp;amp;rsquo; 선택하면 이렇게 보인다 (스크린샷은 영문판)" width="100%"/> &lt;figcaption>
&lt;p>&amp;lsquo;설정 &amp;gt; 캘린더 &amp;gt; 주 번호 표시&amp;rsquo; 선택하면 이렇게 보인다 (스크린샷은 영문판)&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>아웃룩 열고 보고 하는게 번거로워 보이기도 했고, 무엇보다 현재 주가 아니라 4월 첫째주는 몇 번째 주야? 를 알려면 그때부터 더욱 복잡해졌기 때문이다. 휙휙 넘겨서 보는게 훨씬 더 쉬운 이 캘린더가 마음에 들었던 이유다.&lt;/p>
&lt;h1 id="다른-앱들은-뭐예요">다른 앱들은 뭐예요?&lt;/h1>
&lt;p>아, 표시줄에 있는 다른 앱은 다음과 같다. 따로 소개해 드릴 시간이 있을 것 같다.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://apps.apple.com/kr/app/flow-%EB%BD%80%EB%AA%A8%EB%8F%84%EB%A1%9C-%EC%A7%91%EC%A4%91-%EC%8B%9C%EA%B0%84%EA%B4%80%EB%A6%AC-%EA%B3%B5%EB%B6%80-%ED%83%80%EC%9D%B4%EB%A8%B8/id1423210932" target="_blank" rel="noopener"
>Flow&lt;/a>: 뽀모도로 앱이다. 무료로 쓰고, 업무 시간을 기록하기 위한 용도로 간단히 쓴다.&lt;/li>
&lt;li>&lt;a class="link" href="https://maccy.app/" target="_blank" rel="noopener"
>Maccy&lt;/a>: 남들 다 쓰는 클립보드 저장 앱이다.&lt;/li>
&lt;/ul>
&lt;p>&lt;em>가볍고 귀여운 캘린더, 바로 확인할 수 있는 간단한 캘린더를 원하십니까? 그렇다면 지금 바로 설치하세요!&lt;/em> 라고 추천해 주고 싶다.&lt;/p></description></item><item><title>iCloud Obsidian 주기적으로 백업하기</title><link>https://interp.blog/backup-from-icloud-obsidian/</link><pubDate>Sun, 17 Dec 2023 13:27:40 +0900</pubDate><guid>https://interp.blog/backup-from-icloud-obsidian/</guid><description>&lt;img src="https://interp.blog/backup-from-icloud-obsidian/feature.png" alt="Featured image of post iCloud Obsidian 주기적으로 백업하기" />&lt;p>나는 개인 노트 작성에 &lt;a class="link" href="https://obsidian.md/" target="_blank" rel="noopener"
>옵시디언 (obsidian)&lt;/a> 을 사용한다.&lt;/p>
&lt;p>작년까지는 &lt;a class="link" href="https://www.notion.so/" target="_blank" rel="noopener"
>노션 (Notion)&lt;/a> 을 주로 사용했지만, 노션은 데이터베이스 형태로 기록할 만한 것들만 남겨두고, 실제 글들을 아이디어로 엮는 작업은 옵시디언에서 하고 있다. 주로 Macbook 앞에서 작성하지만, 컴퓨터를 쓰지 않을 때는 iPhone 에서 끄적이고 싶을 때 옵시디언 앱을 연다. 어느 쪽에서 쓰더라도, iCloud 를 통해 동기화가 이루어지므로 끊임없이 적을 수 있는 장점도 있다. (최근 워크스페이스가 늘어나면서 모바일 로딩 속도가 느려지는 문제가 있는 듯 하다. 이 때문에 임시 메모장 용도로만 다시 노션을 써야하나 고민 중이긴 하다.)&lt;/p>
&lt;p>아무튼, 옵시디언은 정제된 메모들과 아이디어가 있는 공간이기 때문에, 몇년이고 잘 보존되어야 한다는 욕심이 생겼다. 대학원 시절 잘 &lt;a class="link" href="https://www.joongang.co.kr/article/9019118" target="_blank" rel="noopener"
>사용하던 스프링노트가 서비스 종료&lt;/a>되면서, 백업을 받아두긴 했지만 재활용하기가 너무 힘든 부분이 있었다. 백업을 해 두면, iCloud 를 더 이상 사용하지 않는다거나, 불의의 사고가 생기더라도 저장장치에서 새출발 할 수 있지 않을까 해서 이리저리 알아봤다.&lt;/p>
&lt;figure>
&lt;img loading="lazy" src="springnote.png"
alt="추억의 스프링노트.." width="50%"/> &lt;figcaption>
&lt;p>추억의 스프링노트..&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;p>옵시디언 저장소를 (옵시디언에서는 &lt;em>Vault&lt;/em> 라고 부른다) 아예 OneDrive 나 다른 저장소에 두면 되겠지만, &lt;u>모바일용 옵시디언에서는 외부 파일 클라우드 서비스를 지원하지 않는다.&lt;/u> iPhone 에서만 쓰거나, iCloud 에 동기화하거나.&lt;/p>
&lt;figure>
&lt;img loading="lazy" src="obsidian_mobile.jpeg"
alt="모바일 옵시디언에서 저장소 동기화는 iCloud 에서만 가능하다" width="30%"/> &lt;figcaption>
&lt;p>모바일 옵시디언에서 저장소 동기화는 iCloud 에서만 가능하다&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;h1 id="문제">문제&lt;/h1>
&lt;p>iCloud 로 동기화 중인 옵시디언 저장소를 다른 파일 동기화 서비스에도 백업해 둘 순 없을까?&lt;/p>
&lt;h1 id="디자인">디자인&lt;/h1>
&lt;p>우선 내 작업 환경을 고려해서 다음 아이디어를 생각해 냈다.&lt;/p>
&lt;ul>
&lt;li>Macbook 이 꺼질 일은 없고, 매일 Macbook 을 사용하니까 Macbook 에서 iCloud 내용을 복사하는 반복 작업을 만들면?&lt;/li>
&lt;li>대부분의 파일 동기화 서비스는 Mac OS 를 지원하니까, Macbook 내부 특정 위치를 동기화하게 만든 다음 그곳으로 iCloud 내용을 복사하면?&lt;/li>
&lt;/ul>
&lt;p>생각보다 간단하게 문제 해결 방법이 정리되었고, 단순 &lt;code>cp&lt;/code> 명령어보다 훨씬 더 좋은 방법을 적용할 수 있었다. (이번에 새로 알게 된 것은 아니고 원래 알고 있었지만&amp;hellip;)&lt;/p>
&lt;h1 id="rsync-를-써보자">rsync 를 써보자!&lt;/h1>
&lt;p>&lt;code>rsync&lt;/code> 는 파일 타임스탬프를 기반으로 (원격 시스템을 포함한) 두 경로 사이를 동기화하는데 사용된다. 당연히 로컬 환경에서도 사용이 가능하다! 하지만 MacOS 에 기본적으로 설치된 버전은 2.x 이기 때문에 인코딩 문제같은 자잘한 걸림돌이 많다. 그래서 먼저, 3.x 버전으로 업그레이드 해보자.&lt;/p>
&lt;p>무릇 MacOS 유저라면 &lt;a class="link" href="https://brew.sh/" target="_blank" rel="noopener"
>Homebrew&lt;/a> 를 설치했으리라 믿는다. 그럼 바로 설치해보자!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">brew install rsync
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Homebrew 에서 설치한 바이너리 명령어들의 설치 경로가 Intel/Silicon Mac 마다 다르다. 해당 경로가 &lt;code>$PATH&lt;/code> 최상단에 있는지 확인하자.&lt;/p>
&lt;ul>
&lt;li>Intel: &lt;code>/usr/local/bin&lt;/code>&lt;/li>
&lt;li>Silicon (M1, M2..): &lt;code>/opt/homebrew/bin&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">HOMEBREW_BIN_PATH&lt;/span>&lt;span class="si">}&lt;/span>:&lt;span class="si">${&lt;/span>&lt;span class="nv">PATH&lt;/span>&lt;span class="si">}&lt;/span>
which rsync &lt;span class="c1"># 확인&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>자, 이제 다음 명령어로 동기화를 해보자!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">rsync -uva --delete &lt;span class="si">${&lt;/span>&lt;span class="nv">source&lt;/span>&lt;span class="si">}&lt;/span>/ &lt;span class="si">${&lt;/span>&lt;span class="nv">destination&lt;/span>&lt;span class="si">}&lt;/span>/
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>man rsync&lt;/code> 를 통해서도 얻을 수 있는 정보이지만, 정리해두면 다음과 같다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>-u&lt;/code>: 업데이트 된 파일만 destination 으로 복사&lt;/li>
&lt;li>&lt;code>-v&lt;/code>: 동기화되는 파일 목록과 결과 통계 출력&lt;/li>
&lt;li>&lt;code>-a&lt;/code>: archive mode (recursive + symbolic link + preserve metadata)&lt;/li>
&lt;li>&lt;code>--delete&lt;/code>: 관계없는 파일은 destination 에서 삭제&lt;/li>
&lt;/ul>
&lt;p>반드시 &lt;code>--dry-run&lt;/code> 을 추가해서, 저장 경로에 어떤 파일이 생성되고 삭제되는지 직접 테스트를 해 보자.&lt;/p>
&lt;h1 id="crontab-에-등록">Crontab 에 등록&lt;/h1>
&lt;p>이제는 매일 동기화하도록 해보자. 그런데 주의할 점은, 반드시 바이너리와 두 디렉토리를 모두 절대경로로 작성해야 한다는 것이다. &lt;code>crontab&lt;/code> 은 &lt;code>PATH&lt;/code> 를 인식하지 못하기 때문이며, 실행하는 위치를 특정할 수 없기 때문에 상대경로로 쓸 수 없다.&lt;/p>
&lt;p>말하자면 이런 식이다. (매일 오전 11시에 돌아간다)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 이러면 안 되고&lt;/span>
&lt;span class="m">0&lt;/span> &lt;span class="m">11&lt;/span> * * * rsync -uva --delete src/ dest/
&lt;span class="c1"># 이래야 한다.&lt;/span>
&lt;span class="m">0&lt;/span> &lt;span class="m">11&lt;/span> * * * /opt/homebrew/bin/rsync -uva --delete /Users/username/src/ /Users/username/dest/
&lt;/code>&lt;/pre>&lt;/div>&lt;p>날짜와 함께 로그를 남기고 싶다면, 이렇게 &lt;code>log.log&lt;/code> 에 내용을 쌓는 방법도 있다. 더 좋은 방법이 있겠지만, 간단하니 우선은 이렇게 확인 중이다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="m">0&lt;/span> &lt;span class="m">11&lt;/span> * * * date &amp;gt;&amp;gt; /Users/username/log.log &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> /opt/homebrew/bin/rsync -uva --delete /Users/username/src/ /Users/username/dest/ &amp;gt;&amp;gt; /Users/username/log.log
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="operation-not-permitted">Operation not permitted&lt;/h2>
&lt;p>혹시 위 명령어를 보게 된다면 다음을 참고하자.&lt;/p>
&lt;ol>
&lt;li>&amp;lsquo;설정&amp;rsquo; 열기&lt;/li>
&lt;li>검색에서 &amp;lsquo;디스크&amp;rsquo; 를 입력해서, &amp;lsquo;응용 프로그램이 모든 사용자 파일에 접근하는 것을 허용&amp;rsquo; 선택&lt;/li>
&lt;li>목록 맨 아래에 더하기 (+) 기호 클릭&lt;/li>
&lt;li>Command + Shift + G 를 눌러서, &lt;code>/usr/sbin/cron&lt;/code> 입력&lt;/li>
&lt;li>&lt;code>cron&lt;/code> 이 활성화되어 있는지 확인 후, 설정 창 닫기&lt;/li>
&lt;/ol>
&lt;p>🔗 참고 : &lt;a class="link" href="https://apple.stackexchange.com/questions/378553/crontab-operation-not-permitted" target="_blank" rel="noopener"
>https://apple.stackexchange.com/questions/378553/crontab-operation-not-permitted&lt;/a>&lt;/p>
&lt;hr>
&lt;p>&lt;code>/Users/username/dest&lt;/code> 부분은 파일 동기화 클라이언트로 지정해 두면 클라우드/NAS 로 동기화가 자동으로 이뤄질 것이다!&lt;/p></description></item><item><title>Mac 디스플레이 해상도 조절 팁</title><link>https://interp.blog/mac-display-resolution-adjustment/</link><pubDate>Tue, 18 Apr 2023 14:04:01 +0900</pubDate><guid>https://interp.blog/mac-display-resolution-adjustment/</guid><description>&lt;img src="https://interp.blog/mac-display-resolution-adjustment/feature.png" alt="Featured image of post Mac 디스플레이 해상도 조절 팁" />&lt;p>내 Macbook M1 Pro 에는 두 개의 디스플레이가 있다.&lt;/p>
&lt;ul>
&lt;li>DELL U3818DW&lt;/li>
&lt;li>BenQ EX2780Q&lt;/li>
&lt;/ul>
&lt;figure>
&lt;img loading="lazy" src="monitor.png" width="50%"/>
&lt;/figure>
&lt;p>델 38인치 와이드 모니터는 주사율이 60Hz 밖에 지원되지 않지만, 벤큐의 27인치 모니터는 게이밍 답게 144Hz 까지 지원한다. &lt;del>나름 들어줄 만한 스피커도 있어서 서브로 잘 쓰는 중이다&lt;/del>&lt;/p>
&lt;h1 id="증상">증상&lt;/h1>
&lt;p>그런데 이 &amp;lsquo;디스플레이&amp;rsquo; 옵션에서는 HiDPI 설정만 하면 주사율이 50Hz 까지만 올릴 수 있다. HiDPI 를 끄면 144Hz 까지 선택할 수 있는데 말이다.&lt;/p>
&lt;p>내가 원하는 것은, 자글거리는 폰트를 두고 고주사율로 쓰는 게 아니라, HiDPI 이면서 144Hz 로 쓰고 싶었다. 좋은 방법이 없을까?&lt;/p>
&lt;figure>
&lt;img loading="lazy" src="problem.png" width="50%"/>
&lt;/figure>
&lt;h1 id="해결-1-better-display-설치">해결 (1) Better Display 설치&lt;/h1>
&lt;p>&lt;a class="link" href="https://github.com/waydabber/BetterDisplay" target="_blank" rel="noopener"
>Better Display&lt;/a> 를 설치할 수 있다. 기본적으로 무료이고, 특정 기능을 사용하려면 구입해야 하지만 여기서는 무료 기능만 있어도 충분하다.&lt;/p>
&lt;p>설치하고 실행하면, 아래와 같이 해상도, 주사율 설정이 가능하다. HiDPI 설정하고도 주사율을 144Hz 까지 올릴 수 있다!&lt;/p>
&lt;figure>
&lt;img loading="lazy" src="betterdisplay-option.png" width="70%"/>
&lt;/figure>
&lt;p>참고할 점은, 아까 디스플레이 설정에서 HiDPI 를 선택하면 자동으로 주사율 50Hz 가 선택될텐데, 이 상태에서 Better Display 를 실행시키면 해상도가 모두 보이지 않는다. 이 때는 &lt;strong>주사율을 먼저 50Hz 보다 높은 값으로 변경&lt;/strong>하면 된다. 그러면 해상도 옵션이 늘어난다.&lt;/p>
&lt;h1 id="해결-2-더욱-세밀한-hidpi-해상도-설정">해결 (2) 더욱 세밀한 HiDPI 해상도 설정&lt;/h1>
&lt;p>여기서 문제는, Better Display 를 해도 HiDPI 해상도 옵션이 몇개 없다는 사실이다. 나는 조금 더 큰 폰트 크기를 원했기 때문에, 두 개의 옵션 사이에 있는 중간 정도의 HiDPI 해상도를 원했다. 그렇다면 어떻게 해야 할까.&lt;/p>
&lt;figure>
&lt;img loading="lazy" src="all-resolution.png" width="50%"/>
&lt;/figure>
&lt;ol>
&lt;li>먼저 &amp;lsquo;디스플레이&amp;rsquo; 옵션에서 모니터를 선택한 뒤, &amp;lsquo;&lt;em>모든 해상도 보기&lt;/em>&amp;rsquo; 를 클릭한다.&lt;/li>
&lt;li>원하는 HiDPI 해상도를 선택한다. (나는 두 가지 옵션의 사이에 있는 1920x1080 을 선택했다)&lt;/li>
&lt;li>Better Display 에 가서, &lt;em>아무것도 건드리지 말고&lt;/em> &lt;strong>주사율 (Refresh rate)&lt;/strong> 만 144Hz 로 올린다.&lt;/li>
&lt;/ol>
&lt;p>그러면 원하는 해상도로 고주사율의 디스플레이를 사용할 수 있다!&lt;/p></description></item><item><title>VSCode Vim 에서 키를 눌러 계속 입력하게 만들기</title><link>https://interp.blog/vscode-vim-mac-key-pressing-input/</link><pubDate>Mon, 03 Apr 2023 16:17:59 +0900</pubDate><guid>https://interp.blog/vscode-vim-mac-key-pressing-input/</guid><description>&lt;img src="https://interp.blog/vscode-vim-mac-key-pressing-input/feature.png" alt="Featured image of post VSCode Vim 에서 키를 눌러 계속 입력하게 만들기" />&lt;h1 id="문제">문제&lt;/h1>
&lt;p>Visual Studio Code 에서 Vim Plugin 을 쓰던 중, 입력한 것을 되돌리기 위해 &lt;code>u&lt;/code> 를 꾹 눌렀다.&lt;/p>
&lt;p>그러면 아래와 같이 &lt;strong>u&lt;/strong> 라는 알파벳에 어떤 변형을 가할 것인지 묻는다. 한/영만 필요한 나에게는 필요없는 기능인데..&lt;/p>
&lt;figure>
&lt;img loading="lazy" src="symptom.png"/>
&lt;/figure>
&lt;p>(참고로, &lt;code>u&lt;/code> 를 꾹 누르는게 아니라 반복해서 입력해도 한 번만 입력되는 경우엔 &lt;a class="link" href="https://interp.blog/vscode-vim-undo-redo-key-repeat" >블로그의 다른 포스팅&lt;/a>을 참고하자.)&lt;/p>
&lt;h1 id="해결">해결&lt;/h1>
&lt;p>터미널에서 다음을 입력하고, VSCode 를 &lt;strong>재시작&lt;/strong>한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="참고">참고&lt;/h1>
&lt;p>출처는 여기 &lt;a class="link" href="https://stackoverflow.com/questions/39972335/how-do-i-press-and-hold-a-key-and-have-it-repeat-in-vscode" target="_blank" rel="noopener"
>Stack overflow&lt;/a> 페이지에서 찾을 수 있다.&lt;/p>
&lt;p>참고로 모든 프로그램에서 저 변형 대화창을 끄고 싶다면 다음과 같이 입력한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">defaults write -g ApplePressAndHoldEnabled -bool false
&lt;/code>&lt;/pre>&lt;/div>&lt;p>윗 부분의 출처는 &lt;a class="link" href="https://junho85.pe.kr/1462" target="_blank" rel="noopener"
>준호씨의 블로그&lt;/a> 포스팅이다. (감사합니다!)&lt;/p></description></item><item><title>Apple Silicon Mac 에 Tensorflow 설치</title><link>https://interp.blog/apple-silicon-mac-tensorflow-install/</link><pubDate>Mon, 27 Feb 2023 00:00:00 +0900</pubDate><guid>https://interp.blog/apple-silicon-mac-tensorflow-install/</guid><description>&lt;img src="https://interp.blog/apple-silicon-mac-tensorflow-install/feature.png" alt="Featured image of post Apple Silicon Mac 에 Tensorflow 설치" />&lt;p>책 &lt;a class="link" href="http://www.yes24.com/Product/Goods/112028850" target="_blank" rel="noopener"
>개발자를 위한 머신러닝&amp;amp;딥러닝&lt;/a> 을 구매해서 읽어보고 있는데, 실습을 해 보기 위해 M1 Pro 칩의 Macbook Pro 에 환경을 설정하려고 했다.&lt;/p>
&lt;p>처음에는 virtualenv 로 가상 환경을 구성하고 tensorflow 를 pip 로 설치하면 되지 않을까? 하는 순진한 생각이었다. 그런데 예제 코드를 돌려보니 뿜어져 나오는 에러에 당황하고 말았다.&lt;/p>
&lt;p>다른 가이드들도 많지만 한번 이해하는 차원에서 여기 다시 정리해 둔다.&lt;/p>
&lt;h1 id="miniconda-설치">Miniconda 설치&lt;/h1>
&lt;p>&lt;a class="link" href="https://www.anaconda.com/products/distribution" target="_blank" rel="noopener"
>Anaconda&lt;/a> 에서 제공하는 tensorflow 관련 dependency 를 설치하기 위해, Anaconda 를 설치해야 한다. 하지만 여기서는 전체 설치를 할 필요는 없고 &lt;strong>Miniconda&lt;/strong> 만 설치해도 된다.&lt;/p>
&lt;p>다음 경로 중 하나를 선택해 Shell script 파일을 다운로드 받는다. 두 번째가 직접 다운로드 가능한 경로이다.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.conda.io/en/latest/miniconda.html" target="_blank" rel="noopener"
>Miniconda Download page&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh" target="_blank" rel="noopener"
>Shell script 다운로드 링크&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>파일이 위치한 곳에서, 다음 명령을 차례대로 입력한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">bash ./Miniconda3-latest-MacOSX-arm64.sh -b -p &lt;span class="nv">$HOME&lt;/span>/miniconda
&lt;span class="nb">source&lt;/span> &lt;span class="nv">$HOME&lt;/span>/miniconda/bin/activate
conda
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>conda&lt;/code> 명령에 에러가 없으면 설치가 완료되었다. 추가로 다음을 입력해 주자.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">conda init &lt;span class="o">{&lt;/span>shell&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>{shell}&lt;/code> 에는 현재 사용중인 쉘을 입력한다. bash, zsh 같은 것 말이다. 잘 모르겠다면 &lt;code>echo $SHELL&lt;/code> 을 입력해서 알아내자.&lt;/p>
&lt;h1 id="conda-환경에서-tensorflow-설치">Conda 환경에서 Tensorflow 설치&lt;/h1>
&lt;p>&lt;a class="link" href="https://developer.apple.com/metal/tensorflow-plugin/" target="_blank" rel="noopener"
>Apple Developer Page&lt;/a> 에 안내된 대로 설치하면 완료된다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">conda create -n tf-env &lt;span class="nv">python&lt;/span>&lt;span class="o">=&lt;/span>3.8
conda install -c apple tensorflow-deps
&lt;/code>&lt;/pre>&lt;/div>&lt;p>위와 같이 conda environment 를 설정한다.&lt;/p>
&lt;p>Python 버전은 &lt;em>3.8&lt;/em> 이 테스트되었고 다른 버전에 대해서는 자잘한 문제를 일으킬 수 있으니, 버전 업그레이드는 추천하지 않는다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">conda activate tf-cert3.8
pip install tensorflow-macos&lt;span class="o">==&lt;/span>2.9.0
pip install tensorflow-metal&lt;span class="o">==&lt;/span>0.5.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>tensorflow-macos&lt;/code> 나 &lt;code>tensorflow-metal&lt;/code> 의 버전도 가급적이면 그대로 놔 두길 추천한다. 참고로 최신 버전은 현재 &lt;em>2.11.0&lt;/em> 까지 확인되었다.&lt;/p>
&lt;h1 id="설치-확인">설치 확인&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">tensorflow&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">tf&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__version__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>버전이 잘 출력되면 성공이다.&lt;/p>
&lt;h1 id="테스트-코드-확인">테스트 코드 확인&lt;/h1>
&lt;p>여려 예제가 있겠지만, 책의 첫 번째 예제 코드를 실행해 보자.&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/rickiepark/aiml4coders/blob/main/ch01/01-first-model.ipynb" target="_blank" rel="noopener"
>여기에서&lt;/a> Jupyter Notebook 파일로 제공되고 있으니 코드만 긁어다가 파이썬으로 실행해서 문제가 없어야 한다. (혹시 코드가 궁금하다면, 책을 한 번 읽어보길 권한다!)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="kn">import&lt;/span> &lt;span class="nn">tensorflow&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">tf&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">tensorflow.keras&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Sequential&lt;/span>
&lt;span class="kn">from&lt;/span> &lt;span class="nn">tensorflow.keras.layers&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Dense&lt;/span>
&lt;span class="n">dense&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Dense&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">units&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">input_shape&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">model&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Sequential&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">dense&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="n">model&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">compile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">optimizer&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;sgd&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">loss&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;mean_squared_error&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">xs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">2.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">4.0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">float&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">ys&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">3.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">5.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">7.0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">float&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="n">model&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">xs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ys&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">epochs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Mac 에서 Eclipse Home/End 키 바인딩 하기</title><link>https://interp.blog/mac-eclipse-key-binding-home-end/</link><pubDate>Tue, 20 Dec 2022 10:57:42 +0900</pubDate><guid>https://interp.blog/mac-eclipse-key-binding-home-end/</guid><description>&lt;p>아이폰, 아이패드, 애플워치까지 갖고 있지만 macbook 을 본격적으로 써 본지 만 1년도 안 된다. 그래서 윈도우에서 즐겨 쓰던 Home/End 가 Mac 에서는 Cmd 키와 화살표로만 이뤄지는 걸 극복하는데 너무 힘들었다. 물론 적응하면 되겠지만, 습관이란 게 무서운 거라고.&lt;/p>
&lt;p>결국 어떻게 하면 고칠까 알아보면서 하나씩 적용하고 있다. 일단 KeyBindings 에서 Home/End 키로 줄 시작과 줄 끝으로 이동하도록 해 두는 걸 적용했다. (&lt;a class="link" href="https://apple.stackexchange.com/questions/16135/remap-home-and-end-to-beginning-and-end-of-line" target="_blank" rel="noopener"
>링크&lt;/a>)&lt;/p>
&lt;p>그런데 어째선지, Eclipse 기반의 에디터에서는 이것과 무관하게 Home/End 가 &amp;lsquo;페이지 시작/끝&amp;rsquo; 으로 작동하는게 아닌가! Page Up/Down 키가 옆에 버젓이 있는데도 말이다! 최근에 PostgreSQL (정확히는 &lt;a class="link" href="https://docs.timescale.com/" target="_blank" rel="noopener"
>TimescaleDB&lt;/a>) 를 조사할 기회가 생겨서 &lt;a class="link" href="https://dbeaver.io/" target="_blank" rel="noopener"
>DBeaver&lt;/a> 를 설치했는데, 이 친구도 Eclipse 기반의 에디터라서 KeyBindings 설정 내용과 딴판으로 놀았었다.&lt;/p>
&lt;p>그렇다, 이 글을 쓰는 이유 되시겠다.&lt;/p>
&lt;h2 id="키-설정을-바꿔야-한다">키 설정을 바꿔야 한다&lt;/h2>
&lt;ol>
&lt;li>Eclipse 의 Preference (설정) 을 열어보자. 어딘지 모르겠다면 &lt;code>Cmd + ,&lt;/code> 를 누르면 된다.&lt;/li>
&lt;li>여기서 &lt;code>Key&lt;/code> 라고 검색해 보면 &lt;strong>User Interface -&amp;gt; Key (키)&lt;/strong> 부분에 하이라이트가 되어 있다.&lt;/li>
&lt;li>카테고리를 눌러 Text Editor (텍스트 편집기) 로 이동한다.&lt;/li>
&lt;/ol>
&lt;p>여기서 다음 항목을 입맛대로 바꾸면 된다.&lt;/p>
&lt;ul>
&lt;li>Line Start (행 시작) : Home &lt;code>↖&lt;/code>&lt;/li>
&lt;li>Select Line Start (행 시작 선택) : Shift+Home &lt;code>⇧↖&lt;/code>&lt;/li>
&lt;li>Line End (행 끝) : End &lt;code>↘&lt;/code>&lt;/li>
&lt;li>Select Line End (행 끝 선택) : Shift+End &lt;code>⇧↘&lt;/code>&lt;/li>
&lt;li>Page Up (텍스트 시작) : Page Up &lt;code>⇞&lt;/code>&lt;/li>
&lt;li>Page Down (텍스트 끝) : Page Down &lt;code>⇟&lt;/code>&lt;/li>
&lt;/ul>
&lt;figure>
&lt;img loading="lazy" src="setting.png"/>
&lt;/figure>
&lt;h2 id="그래도-안-되면">그래도 안 되면?&lt;/h2>
&lt;p>내 경우엔 이렇게 두고 &lt;code>Apply and Close&lt;/code> 를 눌러도 적용이 안 되더라. 심플하게 Eclipse (여기선 DBeaver) 를 껐다 다시 실행시키면 되었다.&lt;/p></description></item></channel></rss>