[{"content":"생각이 글이 되고 글이 정제된 다른 글이 되는 연계를 계속 해야 하는데. 어느 샌가 단편적인 이미지, 몇 분짜리 동영상, 흘러가는 명언에 시간을 소비하고 있는 것은 아닌지, 양심의 가책을 느낀다. 생각의 소스가 되는 것들이 저급한 것이라고 할 순 없겠지만, 그게 내 손에서 일궈진 것이 아니라서 값지지 않게 느껴진다. 유망주 투수의 현란한 로케이션이 담긴 GIF, 대중 매체를 알지 못하면 이해할 수 없는 드립, 당신을 움직이게 만들 것이라고 광고하는 몇 컷 짜리 자기계발서 요약 슬라이드들이 그런 것이다.\n이전에 내가 후배들에게 이런 말을 한 적이 있다.\n 시장의 궁극적인 목적은 너의 돈을 소비하게 만드는 것이다. 그러려면 먼저 너의 시간을 사들이는 것에 혈안이 되어 있다. 그것이 바겐 세일, 심지어 공짜라 할 지라도. 한번 소비하기 시작하면, 너의 의지와 방향은 돈을 쓰지 않으면 안 될 지경으로 만든다. 와닿지 않는다고? 조금 완곡하게 말하자면, 조금의 불편함을 느끼게 만든다는 것이고, 마치 내가 이런 소비를 해서 내 인생에 도움이 될 것이라고 착각하게 만든다. 이전에는 없이도 잘 살았는데. 마치 욕구가 개방된 것 처럼.\n 사실 전혀 다른 주제 같아 보이는데, 인터넷과 유튜브는 정말이지 이런 자유시장에서 더욱 첨예하게 사람의 욕구를 개방하기 시작했다는 점에서 이어진다. 인터넷이란 것이 없었을 때, 집전화를 먹통으로 만들고 PC통신에 접속했을 때, ADSL 이 개통되었을 때, 지식인으로 모든 것을 묻고 답할 때, 싸이월드에서 일촌평을 남길 때, 그리고 지금 모든 인플루언서들과 모든 개인들이 저마다의 소리를 내며 자유시장에서 자리를 잡으려고 할 때. 시간의 흐름은 생산자와 소비자의 간격을 무너뜨리고, 정보 독점 체제를 무력화시킨 것 처럼 느껴지게 한다. 모두가 생산자이며 모두가 소비자가 되는 더욱 복잡하고 현란하고 귀찮은 세상이 되었다.\nAI 와 로봇이 결합된 4차 산업혁명에 우려를 나타내는 많은 학자와 저자들이 한 목소리로 이야기하는 대안이 \u0026lsquo;자아성찰\u0026rsquo; 이라고 하는데, 나는 이게 이미 필수라고 생각한다. 나를 아는 방법 역시 쉽지 않고, 그런 걸 찾기 위한 수단으로 기술을 쓰는 것에 결코 반대하지 않는다. 하지만, 여기서 이야기하고 싶은 것은, 기술이 수단을 집어삼켜 나를 휘두르게 놔두지 말자는 것일 뿐. 그런 바보가 되지 말자.\n","permalink":"https://interp.blog/%EB%B0%94%EB%B3%B4%EA%B0%80-%EB%90%98%EA%B3%A0-%EC%9E%88%EB%8B%A4/","summary":"생각이 글이 되고 글이 정제된 다른 글이 되는 연계를 계속 해야 하는데. 어느 샌가 단편적인 이미지, 몇 분짜리 동영상, 흘러가는 명언에 시간을 소비하고 있는 것은 아닌지, 양심의 가책을 느낀다. 생각의 소스가 되는 것들이 저급한 것이라고 할 순 없겠지만, 그게 내 손에서 일궈진 것이 아니라서 값지지 않게 느껴진다. 유망주 투수의 현란한 로케이션이 담긴 GIF, 대중 매체를 알지 못하면 이해할 수 없는 드립, 당신을 움직이게 만들 것이라고 광고하는 몇 컷 짜리 자기계발서 요약 슬라이드들이 그런 것이다.","title":"바보가 되고 있다"},{"content":"Vim 과 SSH 에 찌들어 있었는데, 이번 Visual Studio Code 의 베타 기능인 Remote Deployment 를 연결해 보고 나서, 학생 때 쓰던 IDE 로 돌아간 것 같아 너무 좋았다. 언제까지고 구식 도구를 쓰며 부심을 부릴 수만은 없다. 설치 과정이 조금 험난했지만, 간단히 요약해서 써본다.\n클라이언트 OS 는 윈도우 10 (빌드 1809), 서버 OS 는 Cent OS 7 기준으로 작성한다.\n클라이언트 (윈도우) 준비 처음에 준비할 때는 Visual Studio Code Insider 버전을 설치하라고 되어 있었는데, 이제는 꼭 그럴 필요 없는 것 같다. 일반 Visual Studio Code 를 설치해도 된다.\n다음으로, SSH 클라이언트를 설치한다. 윈도우 10 빌드 1807 이상 버전의 윈도우 OS 라면 여기 링크 안내를 따르거나, 아래 요약된 스크린샷을 보면 된다.\n시작 \u0026gt; 설정 앱에서, \u0026lsquo;앱\u0026rsquo; 을 클릭한 뒤 \u0026lsquo;앱 및 기능\u0026rsquo; 탭의 \u0026lsquo;선택적 기능 관리\u0026rsquo; 를 클릭한다. 그 다음 아래 \u0026lsquo;OpenSSH 클라이언트\u0026rsquo; 를 찾아 설치한다. OpenSSH 서버는 설치할 필요가 없다.\n이제 ssh key 를 만들어야 한다. 비대칭 키에 대한 지식이 없다면 암호 대신 SSH Key 로 인증하기 포스팅을 참고하면 된다. 혹시 PuTTY 에서 생성한 비공개 키를 등록하고 쓰고 있으니 이걸로 충분하지 않을까? 그렇게 준비하면 실제 접속할 때 아마 잘 안 될 것이다. 내가 해 봤으니까…\nVisual Studio Code 는 OpenSSH (또는 Git 의 ssh) 클라이언트를 쓰기 때문에, Key 호환성 문제로 \u0026lsquo;invalid format\u0026rsquo; 에러를 발생시킬 수 있다. 그러니 순순히 (?) 실행 명령 창 (cmd) 을 열어서 다음을 입력하자. 기존에 쓰던 키 저장 경로가 존재한다면, 다른 경로로 설정하는 것을 추천한다. 이 방법은 Visual Studio Code 페이지의 Troubleshooting 에 등록된 내용이다.\n 서버 (리눅스) 준비 원활한 서비스가 가능한 리눅스 OS 목록은 여기를 참고하면 된다. Cent OS 7 은 잘 되므로 별 다른 설정 없이 가능하다. 지원이 안 되는 리눅스들은 workaround 가 있는데 (특시 Cent OS 6) 생각보다 까다롭고 원치 않는 상황이 발생할 수 있기 때문에 신중해야 한다.\n접속하고자 하는 계정의 ~/.ssh/authorized_keys 파일에다가, 아까 만들었던 Key Pair 중 \u0026lsquo;공개 키\u0026rsquo; 정보를 입력해야 한다. 해당 파일이 없으면 만들면 되고, 있으면 파일 끝에 추가 (append) 해주면 된다.\n~/.ssh/authorized_keys 파일의 권한이 600 (계정에서만 읽기/쓰기가 가능) 인지 반드시 체크하고, 아니라면 chmod 명령으로 바꿔주도록 한다. (이건 SSH 일반 접속 때문에 하는 작업이지, Visual Studio Code 라서 하는 것이 아니다.)\n Visual Studio Code 준비 우여곡절 끝에 준비를 다 했으면, Visual Studio Code 를 열어서 Remote Deployment 를 설치하자. 그 다음, 명령 팔레트를 열어서 (Shift + Ctrl + P) Remote-SSH: Open Configuration File… 을 선택한다. 설정 파일 경로는 수정하거나 기존에 잡아주는 경로를 쓰건 상관없다.\n예시는 이렇다.\n Host : 목록에 나올 이름이다. 보통은 HostName 과 같이 지정해주거나 Username@HostName 으로 지정한다. HostName : 실제 접속할 호스트 주소 User : 접속할 사용자 계정 이름 IdentifyFile : 생성한 Key Pair 중 \u0026lsquo;비공개 키\u0026rsquo; 경로   Remote 로 접속! 이제 설정 파일을 저장하고, 명령 팔레트를 열어서 (Shift + Ctrl + P) Remote-SSH: Connect to Host… 을 선택한다. 아까 저장한 Host 가 1개만 떠 있을텐데, 접속하면 아예 새로운 Visual Studio Code 창이 하나 더 뜨게 된다.\n이것저것 하는 것 같으니 잠시 기다리면, 접속이 되었다는 메시지와 함께 \u0026lsquo;절대로 저 작은 터미널을 닫지 말아주세요\u0026rsquo; 라는 경고문이 뜬다. 최소화시키고 작업을 하면 된다!\n그래서 우린 뭘 할 수 있죠? 이 이야기는 좀 더 써 보고 2부에서 계속 하도록 하겠다.\n","permalink":"https://interp.blog/visual-studio-code-remote-deployment/","summary":"Vim 과 SSH 에 찌들어 있었는데, 이번 Visual Studio Code 의 베타 기능인 Remote Deployment 를 연결해 보고 나서, 학생 때 쓰던 IDE 로 돌아간 것 같아 너무 좋았다. 언제까지고 구식 도구를 쓰며 부심을 부릴 수만은 없다. 설치 과정이 조금 험난했지만, 간단히 요약해서 써본다.\n클라이언트 OS 는 윈도우 10 (빌드 1809), 서버 OS 는 Cent OS 7 기준으로 작성한다.\n클라이언트 (윈도우) 준비 처음에 준비할 때는 Visual Studio Code Insider 버전을 설치하라고 되어 있었는데, 이제는 꼭 그럴 필요 없는 것 같다.","title":"Visual Studio Code Remote Deployment"},{"content":"처음에는 경력직을 선호했고, 나도 그랬다.\n개발자를 충원하자는 계획에 맞춰, 공고를 등록하고 경력직 이력서를 받으면서 이 정도 커리어면 뭐든지 붙을 수 있을거라고 생각했을 것이다. 하지만 그 때의 실패들이 쌓여 이제는 경력직이나 신입이나 동일 선상에 놓고 평가하고 있다.\n내가 몸 담고 있는 필드는 국내에서 잘 하지 않는 분야다. 없진 않지만, 사용자 경험과 컴퓨터 구조를 동시에 신경 써야 하는 조직이다. (물론 개발자 1인이 모두 신경 쓰는 것은 아니다.) 그런데, 소위 SI 업체나 프리랜서 개발자들의 면접을 보면 괜히 미안해진다. 면접이 매끄럽지 못해서 미안한게 아니고, 이미 그들의 표정에서 \u0026lsquo;이걸 대체 왜 물어보는 건지\u0026rsquo; 싶은 느낌이 표정에 드러나기 때문이다.\n이야기를 나눠보면, 지원자 중 절반은 말 그대로 \u0026lsquo;잘못 왔다\u0026rsquo;. 그냥 솔루션 개발 쯤으로 알고 왔는데, 열어보니 이건 이상하다 싶었겠지. 나머지 반은 본인 실력을 다 못 보여준다. 왜냐하면 전혀 새로운 분야에서 요구되는 능력들이 자기가 일궈온 것과 좀 다르니까 거부감이 드는 것이다. 그래서 나도, 그들도 같이 지친다.\n어느 대기업 연구원 관리직의 댓글을 봤다. 오히려 박사/포닥 후 입사한 친구들이 너무 협소한 시각으로 보고서를 작성하기 때문에 설득력이 떨어진다는 것이다. 자기 분야에서만 논거를 찾아서 주장하거나, 다른 분야 사람이 오펜스라도 할라 치면 \u0026lsquo;당신이 뭘 알아\u0026rsquo; 라는 스탠스를 취한 경우를 많이 봤단다. 학교에서는 비즈니스나 의사소통을 가르쳐주지 않기 때문이라고 하면서. 차라리 회사에서 신나게 구르던 동일 경력의 친구들이 더 뛰어난 경우를 많이 봐왔다고 한다.\n이 이야기를 왜 꺼냈을까. 박사과정을 마친 사람들을, 하이 커리어를 쌓으신 많은 경력 개발자를 폄훼하기 위해서인가. 아니다. 그냥, 좋은 능력을 가지신 분들이 보인 부적응 현상들이 안타까워서 그랬다. 이제는 경력과 신입을 동일선상에 놓고 보고 있다. 기술 질문도 차이가 거의 없어졌다. 다만 한 가지, 소통하는 능력이 있는지를 본다. 달리 말하면 배우고자 하는 열의가 있는지 반드시 보고 다음 면접으로 올린다.\n나는 꼬리에 꼬리를 무는 질문을 좋아한다. 그래야 이 사람의 대응 방식을 볼 수 있다. 꼬리를 물렸을 때 대개는 따가워한다. 싫은 거다. 그래도 답하고 되물어봐야 한다. 힌트를 달라고 해도 좋다. 시험이 아니라 면접인데, 좀 물어보면 어떤가. 나와 논쟁을 한 지원자도 있었다. 내용이 좀 틀려도 괜찮았다. 둘 모두 기술면접을 통과했다.\n비즈니스는, 의사소통은 학교에서 가르쳐주지 않는다. 그런데… 경력은 이미 경험한 것들이다. 경력을 뽑는 가장 큰 이유는, 적응력이 신입보다 좋을 거라 기대하기 때문이다. 그것이 기술적이건 의사소통 능력이건 간에 말이다. 둘 다 못하면, 지금처럼 동일 선상에 세울 수 밖에 없을 것이다.\n최소한 자신이 가진 아집 정도는 벗어주면 좋겠다. 그래야 저런 소리 안 듣고 귀한 평가를 받을 것이다.\n","permalink":"https://interp.blog/%EA%B2%BD%EB%A0%A5%EC%A7%81-%EB%A9%B4%EC%A0%91-%EB%8B%A8%EC%83%81/","summary":"처음에는 경력직을 선호했고, 나도 그랬다.\n개발자를 충원하자는 계획에 맞춰, 공고를 등록하고 경력직 이력서를 받으면서 이 정도 커리어면 뭐든지 붙을 수 있을거라고 생각했을 것이다. 하지만 그 때의 실패들이 쌓여 이제는 경력직이나 신입이나 동일 선상에 놓고 평가하고 있다.\n내가 몸 담고 있는 필드는 국내에서 잘 하지 않는 분야다. 없진 않지만, 사용자 경험과 컴퓨터 구조를 동시에 신경 써야 하는 조직이다. (물론 개발자 1인이 모두 신경 쓰는 것은 아니다.) 그런데, 소위 SI 업체나 프리랜서 개발자들의 면접을 보면 괜히 미안해진다.","title":"경력직 면접의 단상"},{"content":"메모로 남긴다.\n 사람은 모두 다르다. 아주 많이. 각자의 장점이 드러나도록 경험하게 해주고 발전하게 하라. 그리고, 장점과 그 성과를 열심히 칭찬해줘라. 무언가를 잘하는 사람은 결국 그걸 좋아하게 되어 있다. 무언가를 잘하고 좋아하게 되면, 자신의 자존감이 올라간다. 자존감이 올라간 후엔, 자존감을 지키지 위해서 알아서 움직인다.  이 말을 관통하는 TODO 는 딱 하나. 장점이 드러나도록 밀어주고, 칭찬해줘라.\n철칙처럼 지켜야 한다는 생각이 들었다. 여기에 내 생각을 덧붙인다.\n 뭘 잘하는지 찾는 건 굉장히 어렵다. 잘 한다고 생각했는데 통수맞을 확률이 생각보다 높다. 잘 하는데 하기 싫어하는 경우에 대한 과정도 중요하다. 일이란게 늘 그렇듯, 그 사람이 잘 하는 것만 시킬 수 없다. 이에 대한 과정 역시 중요하다. 사람이 늘 그렇듯, 단점이 크게 보인다. 못 본 척 하려고 노력하는 것도 쉽지 않을 정도로.  결론은, 이 철칙을 쉽게 지킬 수 없지만 지키기 위해 노력해야 된다는 것.\n참고로, 이 원칙은 육아에도 적용된다고 한다. 덧붙인 내 생각도 육아에 적용되겠단 생각을 해 본다.\n","permalink":"https://interp.blog/%EB%A6%AC%EB%8D%94%EC%9D%98-1%EC%9B%90%EC%B9%99/","summary":"메모로 남긴다.\n 사람은 모두 다르다. 아주 많이. 각자의 장점이 드러나도록 경험하게 해주고 발전하게 하라. 그리고, 장점과 그 성과를 열심히 칭찬해줘라. 무언가를 잘하는 사람은 결국 그걸 좋아하게 되어 있다. 무언가를 잘하고 좋아하게 되면, 자신의 자존감이 올라간다. 자존감이 올라간 후엔, 자존감을 지키지 위해서 알아서 움직인다.  이 말을 관통하는 TODO 는 딱 하나. 장점이 드러나도록 밀어주고, 칭찬해줘라.\n철칙처럼 지켜야 한다는 생각이 들었다. 여기에 내 생각을 덧붙인다.\n 뭘 잘하는지 찾는 건 굉장히 어렵다.","title":"리더의 1원칙"},{"content":"\u0026lsquo;알고리즘 산책\u0026rsquo; 책 요약이다. 까먹지 않으려고 정리한다.\n최대공측도는 최대공약수 같은 개념이다. 선분 A와 B가 특정한 길이로 측정이 가능할 때, 이 길이 중 가장 긴 길이를 최대공측도라고 하는 것이다. 이 값을 구하는 코딩 역시 최대공약수 계산과 다르지 않다. 여기서 공측도 값이 되는 선분 길이는 자연수이다.\n그런데 19세기 조지 크리스털이 증명한 것은, 정사각형의 변과 대각선의 변을 동시에 측정할 수 있는 선분은 없다는 것이다. 왜일까? 귀류법을 통해, 정사각형의 변과 대각선의 변을 동시에 측정할 수 있는 선분이 있다고 가정하면 된단다. 여기 다 정리할 수는 없고 요약만 하자면, 동시에 측정할 수 있는 선분으로 그린 정사각형을 계속 생각하다 보면, 어느 순간 가장 작은 정사각형이 나올 것이다. 하지만 이 경우에도 선분이 있다고 가정해버리면, 더 작은 정사각형을 그릴 수 있게 되므로 모순이다.\n그래서 대각선은 유리수가 아니라는 단서가 되었고, 무리수 \u0026lt;img src=\u0026quot;//s0.wp.com/latex.php?latex=%5Csqrt%7B2%7D\u0026amp;#038;bg=ffffff\u0026amp;#038;fg=000\u0026amp;#038;s=0\u0026quot; alt=\u0026quot;\u0026amp;#92;sqrt{2}\u0026quot; title=\u0026quot;\u0026amp;#92;sqrt{2}\u0026quot; class=\u0026quot;latex\u0026quot; /\u0026gt; 를 발견할 수 있었다.\n","permalink":"https://interp.blog/%EA%B3%B5%EC%B8%A1%EB%8F%84%EC%99%80-%EB%AC%B4%EB%A6%AC%EC%88%98/","summary":"\u0026lsquo;알고리즘 산책\u0026rsquo; 책 요약이다. 까먹지 않으려고 정리한다.\n최대공측도는 최대공약수 같은 개념이다. 선분 A와 B가 특정한 길이로 측정이 가능할 때, 이 길이 중 가장 긴 길이를 최대공측도라고 하는 것이다. 이 값을 구하는 코딩 역시 최대공약수 계산과 다르지 않다. 여기서 공측도 값이 되는 선분 길이는 자연수이다.\n그런데 19세기 조지 크리스털이 증명한 것은, 정사각형의 변과 대각선의 변을 동시에 측정할 수 있는 선분은 없다는 것이다. 왜일까? 귀류법을 통해, 정사각형의 변과 대각선의 변을 동시에 측정할 수 있는 선분이 있다고 가정하면 된단다.","title":"공측도와 무리수"},{"content":"정갈한 한정식도 아니고, 욕쟁이 할머니가 내어 주는 재미있는 맛이 담긴 한 끼도 아니고, 그냥 쓱쓱 싹싹 콩나물과 보리밥에 눈물 참기름 한 방울, 매운 인생 맛 큰 숟갈 넣어 아구와구 비벼먹을 건데. 일기장은 이뻐봤자 나만 만족하는 것이다. 그런데 난 그게 중요하다고 보거든.\n개인적인 이야기와 바깥의 이야기를 구분했으면 해서 만든 것이 블로그였는데, 이제는 그 경계가 모호해진 것 같다. 그 외줄타기를 잘 해야 내 아이덴티티가 쇼윈도에 걸리는 것이긴 하지만, 난 양산형 마네킹이 아니니까 으레 생각하는 사람들과는 다른 기괴한 포즈를 취할 수 있다. 혐오감을 줄 수도 있고, 저놈 저거 노력하네 같은 행인들의 빈말 몇 마디 정도는 듣겠지.\n어릴 적에 그림을 그리거나 글을 쓰면 반 친구들 몇몇이 우루루 와선 돌려보곤 했다. 별 것 없는 내용, 뻔한 전개지만 내 나름 가장 활발한 리뷰어 (Reviewer) 들이었노라고 자부할 수 있다. 칭찬과 비난이 뚜렷이 섞인 말들은 이내 비난도 지쳐버린 자들의 과거속으로 숨어버렸다. 나도 그랬으니까. 그리고 내 글도 숨었다.\n숨기 싫어서 나온건데, 아직도 예쁜 일기장을 고르려 핫트랙스를 기웃거리는 중학생의 심정에서 벗어나질 못했다. 플랫폼은 뭘 하지? NAS 를 사서 내 개인 서버를 꾸며볼까? 책을 읽으려면 아이패드를 사야지? (글 쓰는데 왜 갑자기 아이패드야) 정신을 차려보니, 고민은 목적을 한참 벗어나서 멋대로 날뛰고 있었다.\n이제 이런 고민 다 필요가 없다. 묵묵히 쓰는게 짱이다. 예쁜 낙서장은 이제 그만 골라야겠다.\n","permalink":"https://interp.blog/%EC%98%88%EC%81%9C-%EB%82%99%EC%84%9C%EC%9E%A5%EC%9D%84-%EC%9B%90%ED%96%88%EB%8D%98-%EA%B1%B8%EA%B9%8C/","summary":"정갈한 한정식도 아니고, 욕쟁이 할머니가 내어 주는 재미있는 맛이 담긴 한 끼도 아니고, 그냥 쓱쓱 싹싹 콩나물과 보리밥에 눈물 참기름 한 방울, 매운 인생 맛 큰 숟갈 넣어 아구와구 비벼먹을 건데. 일기장은 이뻐봤자 나만 만족하는 것이다. 그런데 난 그게 중요하다고 보거든.\n개인적인 이야기와 바깥의 이야기를 구분했으면 해서 만든 것이 블로그였는데, 이제는 그 경계가 모호해진 것 같다. 그 외줄타기를 잘 해야 내 아이덴티티가 쇼윈도에 걸리는 것이긴 하지만, 난 양산형 마네킹이 아니니까 으레 생각하는 사람들과는 다른 기괴한 포즈를 취할 수 있다.","title":"예쁜 낙서장을 원했던 걸까"},{"content":"좌우명이 뭐냐고 물으신다면, 곁에 두고 보는 말 같은 진부한 설명 대신에 \u0026lsquo;예상치 못한 상황에서 생각이나 행동의 근거가 되는 첫 번째 기준이나 신념을 말로 표현한 것\u0026rsquo; 이라고 하고 싶다. 우리는 모든 상황을 가정하고 살 수도 없고, 모든 것을 경험하며 살 수도 없다. 모든 것이라는 집합 자체가 유한하지 않은 것이 첫번째고, 우리의 생 또한 무한하지 않은 것이 그 다음이다.\n그래서 내 좌우명은 무어냐고 또 물으신다면, 조금 생각을 해 봐야겠다. 내 초등학교 시절은 으레 다른 친구들이 그랬듯 위인전에서 나온 명언 중 마음에 드는 하나를 골라 좌우명이라고 정하고 다녔기 때문에, 당시 내 좌우명도 \u0026lsquo;시간을 금 같이 보라\u0026rsquo; 였다. 어, 이거 최영 장군은 조금 다르게 이야기한 것 같은데, 아무튼 난 이게 마음에 들었다. 시간은 소중히 써야 한다. 지나간 시간은 저축할 수 없기 때문에 매 순간 의미가 있어야 한다고 생각했나보다. 일기를 읽어보면 그런 것 같다.\n어린 시절의 어떤 치기로 선택받은 이 좌우명에 기름칠을 조금 해서, 지금의 내 좌우명을 정해본다. \u0026lsquo;더욱 오늘을 의미있게 살자\u0026rsquo;. 너무 달라졌는데? 하지만 의미는 확실히 살았다고 말하고 싶다. 시간이라는 단어는 단위로 설명할 수 없는 추상화된 개념이다. 시간을 소중히 써야 한다면, 특정 시간 단위를 집중해서 살자고 말하는게 더 설득력있어 보였다. 매 초 열심히 살자? 그렇다면 이미 성공한 횟수보다 실패한 횟수가 더 많다. 좌절 느끼기 딱 좋은 말이구만. 단위를 넓게 잡아 \u0026lsquo;하루\u0026rsquo; 라고 지었다.\n그냥 의미있게 살면 되지, 더욱은 뭘까. \u0026lsquo;어제의 나\u0026rsquo;를 통해 반성하고 칭찬하면서 \u0026lsquo;오늘의 나\u0026rsquo;를 더 의미있게 살게 할 수는 없을까? 하는 뜻이다. 이 말 대로 엄밀히 구분하자면, 어제와 오늘은 연속성이 없다. 하지만 인생이라는 끈 위에서는 모두 이어져있으니까. 그 위에서 줄타기를 해야 한다면 어제의 내가 했던 의미를 발전시켜 갈 수도 있고 잘못된 방향을 바로 잡아 앞으로 나아갈 수 있지 않을까.\n뜬금없지만, 영화 \u0026lsquo;아저씨\u0026rsquo; 에서 차태식 대사 중 유명한 것이 있다. \u0026lsquo;너흰 내일만 보고 살지.. 난 오늘만 보고 살아..\u0026rsquo; (뒷 말은 욕이니까 생략하고) 내일을 보고 사는 것은 오늘을 희생해서 내일의 불확실한 나에게 짐을 덜어주는 의미도 되겠지만, 오늘을 소비하고 내일의 나에게 책임을 떠넘긴다는 이중적인 의미로도 해석할 수 있다. 나는 둘 다 마음에 들지 않는다. 오늘의 내가 내일의 나에게 방향을 제시하고 이뤄놓은 것에 대한 설명은 해 줄 수 있겠지만, (계획에 없는데 의도적으로) 내일 해야 할 일을 오늘 몰아 하는게 과연 맞는가? 신용 카드를 긁으면서 내일의 내가 좌절해 줄 거라고 충동적으로 결정하는 게 과연 맞는가 말이다.\n그래서, 미래의 내가 덜 부끄럽게 과거의 내가 제시한 방향이 헛되지 않게 오늘은 의미있게 살아야 한다. 그 의미가 뭐냐? 글쎄, 그건 매일 달라질 수 있겠다. 위기를 극복하고, 성취를 만끽하고, 사고에 대처하고, 기쁠 때 기쁘고 슬플 때 슬퍼하고…\n물론 의미없는 날을 보낼 수도 있다. 내 의지와 다르게 흘러가는 날이 있을 것이고, 아니 오히려 그런 날들이 한 해에 더 많이 일어날 것이다. 그래도 지켜야 하는 것은, 그렇지 않은 날까지 내 의지와 무관하게 흘러가는 것 처럼 간주해서는 안 되는 소중한 시간들이기 때문이다. 지금 이 시간도 그렇다.\n 덧. 이걸 하려면 반드시 해야 할 일이 있다. 일기를 써야 한다. 무슨 내용이든 좋지만, 칭찬 6에 반성 3, 감상 1 정도의 비율로 적어주면 가장 좋다. 기분에 따라 감상 10이 될 수도 반성 10이 될 수도 있지만 너무 한 쪽으로 치우쳐 적으면 나중에 읽을 때 좀 오글거리고 읽기 싫어진다.\n","permalink":"https://interp.blog/%EB%8D%94%EC%9A%B1-%EC%98%A4%EB%8A%98%EC%9D%84-%EC%9D%98%EB%AF%B8%EC%9E%88%EA%B2%8C-%EC%82%B4%EC%9E%90/","summary":"\u003cp\u003e좌우명이 뭐냐고 물으신다면, 곁에 두고 보는 말 같은 진부한 설명 대신에 \u0026lsquo;예상치 못한 상황에서 생각이나 행동의 근거가 되는 첫 번째 기준이나 신념을 말로 표현한 것\u0026rsquo; 이라고 하고 싶다. 우리는 모든 상황을 가정하고 살 수도 없고, 모든 것을 경험하며 살 수도 없다. 모든 것이라는 집합 자체가 유한하지 않은 것이 첫번째고, 우리의 생 또한 무한하지 않은 것이 그 다음이다.\u003c/p\u003e","title":"더욱 오늘을 의미있게 살자"},{"content":"Windows Server 2016에서 OpenSSH 를 설치하고, cmd 에서 다음과 같이 RSA 키를 생성한다.\n그러고 Public Key 를 SSH Server 에 위치한 authorized_keys 파일에 추가하고 접속을 시도하면?\n오잉? 내 파일이 맞는데 이게 뭘까. Private Key 파일에 마우스 우클릭을 하고 봤더니 여러 사용자가 읽기 권한으로 걸려 있는 것을 확인할 수 있었다. 이건 아니다… 등록된 사용자를 전부 지우고 현재 사용자에게 모든 권한을 준 다음에, 확인을 눌러 권한 변경을 해 준다.\n\u0026lsquo;편집\u0026rsquo; 에 가서 등록된 사용자를 지우려고 하면, 상속으로 인해 지울 수 없다는 괴상한 에러가 뜰 것이다. 그러니까 위 화면에서 \u0026lsquo;고급\u0026rsquo; 으로 간 다음, 아래 캡처에 있는 \u0026lsquo;상속 사용 안 함\u0026rsquo; 을 클릭하면 자동으로 지워진다. 그 다음 시도하면, 잘 된다!\n출처 : https://superuser.com/questions/1296024/windows-ssh-permissions-for-private-key-are-too-open\n","permalink":"https://interp.blog/windows-ssh-rsa-key-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0/","summary":"Windows Server 2016에서 OpenSSH 를 설치하고, cmd 에서 다음과 같이 RSA 키를 생성한다.\n그러고 Public Key 를 SSH Server 에 위치한 authorized_keys 파일에 추가하고 접속을 시도하면?\n오잉? 내 파일이 맞는데 이게 뭘까. Private Key 파일에 마우스 우클릭을 하고 봤더니 여러 사용자가 읽기 권한으로 걸려 있는 것을 확인할 수 있었다. 이건 아니다… 등록된 사용자를 전부 지우고 현재 사용자에게 모든 권한을 준 다음에, 확인을 눌러 권한 변경을 해 준다.\n\u0026lsquo;편집\u0026rsquo; 에 가서 등록된 사용자를 지우려고 하면, 상속으로 인해 지울 수 없다는 괴상한 에러가 뜰 것이다.","title":"Windows SSH RSA Key 문제 해결"},{"content":"햇살이 드리우는 책상 앞에 따뜻한 아메리카노 한 잔을 두고, 논문을 집어들어 책갈피 너머의 페이지로 넘겨 보는 나 자신을 상상하는 모습을 그려본 적이 있다. 학창 시절 때는, 집중해서 공부하는 지금 이 순간의 내 모습을 내가 본다면 어떤 기분일지 상상한 적도 있다. 그러면 이내 흐트러지고, 방금 전 몰두하던 이는 찾아볼 수 없게 되었다.\n자신이 그리는 이상을 직접 행하고 있을 때는, 그 상황을 자신이 그려왔던 것인지 알 수 없는 경우가 많다. 왜냐하면, 실제로는 그 장면이 아름답거나 만족하는 순간이 될 수 없기 때문이다. 바로 이런 장면을 보려고 하는 나 자신이 잠시 사라지는 순간이다. 숙제를 하거나, 일을 하거나, 연습을 하거나, 게임을 하거나, 그 장면 자체는 멋져보일 수 있겠지만 그 속에 있는 정신은 이루 말할 수 없는 수 많은 것들에 신경을 쓴다. 그것들은, 안에 들어있는 것들은 결코 아름답거나 원한 것이 아니다. 물론 이 과정, 이 결과를 상상하는 사람이 돌리는 쳇바퀴일 수 있다. 하지만 이 순간을 바라보는 사람은 동시에 존재하지 않는다.\n알아차리게 되더라도, 그 순간의 심적 평화는 깨지기 마련이다. 마치 유체이탈이라도 한 양, 관찰자로 빠져나간 빈 껍데기 같은 정신은 그 순간을 유지할 힘을 잃어버린다.\n우리는 사실 뒹굴거리고 싶고, 닥치는 대로 먹고 마시고 싶다. 그러나 우리가 계속 \u0026lsquo;우리의 이상적인 순간\u0026rsquo;을 그려야 하는 이유는, 객관화라고 착각하지만 사실 사회에서 배워 온 \u0026lsquo;편견\u0026rsquo; 속에서 우리를 가두고자 하는 희미한 의지 때문이다. 그 편견의 이미지를 지키는 이유는, 바로 주위 사람들 때문이다. 내 시선이 아닌 다른 시선에 의존한다. 왜? 우리는 언제나 외롭기 때문이다.\n외로움을 선택한 사람들이 있다. 햇살도 없는 바로 그 곳에서.\n","permalink":"https://interp.blog/%EC%9A%B0%EB%A6%AC%EC%9D%98-%EC%9D%B4%EC%83%81%EC%A0%81%EC%9D%B8-%EC%88%9C%EA%B0%84/","summary":"햇살이 드리우는 책상 앞에 따뜻한 아메리카노 한 잔을 두고, 논문을 집어들어 책갈피 너머의 페이지로 넘겨 보는 나 자신을 상상하는 모습을 그려본 적이 있다. 학창 시절 때는, 집중해서 공부하는 지금 이 순간의 내 모습을 내가 본다면 어떤 기분일지 상상한 적도 있다. 그러면 이내 흐트러지고, 방금 전 몰두하던 이는 찾아볼 수 없게 되었다.\n자신이 그리는 이상을 직접 행하고 있을 때는, 그 상황을 자신이 그려왔던 것인지 알 수 없는 경우가 많다. 왜냐하면, 실제로는 그 장면이 아름답거나 만족하는 순간이 될 수 없기 때문이다.","title":"우리의 이상적인 순간"},{"content":"신세계 이후로 박훈정 감독의 작품이 3편 나온 것으로 안다. 「대호」, 「마녀」, 그리고 「V.I.P.」 이다. 대호는 시놉시스부터 끌리지 않아서 앞으로도 안 볼 생각이고, 나머지 두 편은 시간이 난 김에 몰아서 봤다. (그래서 다음 리뷰는 마녀를 할 것이다.)\n박훈정 감독이 각본에만 참여한 다른 두 영화에서 느꼈던 것과 달리, 각본/감독을 병행한 이후에는 찰진 대사도 줄어들고 스토리도 힘이 점점 빠지는 것 같아 보인다. 여기서 「악마를 보았다」 가 얼마나 잔인했니, 「부당거래」 와 「신세계」가 가지는 힘은 어디서 있는지를 다 이야기하는 건 주제를 많이 벗어나지만, 오늘 이야기할 「V.I.P.」 와 비교될 선배격 작품들로 써먹을 예정이다.\n논란이 될 만한 악행 사실 여성 범죄는 「악마를 보았다」 에서도 나온다. 규모는 작지만, 디테일은 더 끔찍하다. 하지만 그 때는 조용하고 지금은 왜 시끄러웠냐고? 악인으로 분한 배우가 최민식이 아니라 이종석이어서, 라고 이야기하는건 아니다. 전자의 묘사가 필요했다고 느껴진다면, 여기서는 낭비했기 때문에 논란이 된 것이라 생각한다.\n필모그래피 동일 선상에 있는 다른 악행을 보면, 설명에 군더더기가 작다. 수현은 자신의 아내를 강간살해한 악마같은 놈에게 가하는 폭력과, 의혹의 소용돌이에서 범인을 조작한 조폭과 경찰이 빠져나오려 하는 발버둥과, 권력 다툼에서 의리와 자기보전을 해야 하는 정청의 선택이 설명이 된다는 것이다. 지나고 보면 세 영화에 모두 장황한 설명은 없다. 그나마 가장 많다고 생각하는게 「악마를 보았다」 정도이고, 나머지는 씬 몇 개로 주인공의 처지를 대변한다.\n그런데 이 영화는, 김광일이 얼마나 나쁜 놈인지 너무 많이 설명하고, 이제 그만 됐다고 하는데도 너무 보여준다. 한편으로는, 이 정도 잔인해야 리대범이 탈북해서 잡아 죽이려고 하고 채이도가 꼭 잡으려고 했을 것이라고 하지만, 리대범은 어차피 복권해야 하는 명분이 있었고 국내 범죄만 규모로 설명했어도 채이도 역시 명분을 줄 수 있었다.\n감독이 노린 건 김광일의 약점을 노출하기 위한 것이었을까. 그마저도 어차피 극 중반에 언급될 것이였다. 김광일이 분노할 수 있는 유일한 포인트로 대비되기 때문에, 그렇게 초반을 롱테이크로 관객 고문을 했어야 했는지는 아직도 의문이다.\n일단, 스토리 강간 살해 묘사를 하는 것은 어차피 전례 (?)를 밟은 영화가 있어서 사실상 깔 거리는 못 된다. 그냥 보기 역해서 그런 것 뿐이다. 만약 이것 \u0026lsquo;만\u0026rsquo; 문제였다면 어차피 상관없었다.\n이 영화의 진짜 목적은, 이런 또라이 김광일을 어떻게 처리할 것인지에 따라 CIA (피터 스토메어, 폴 그레이 役), 국정원 (장동건, 박재혁 役), 대한민국 경찰 (김명민, 채이도 役), 북한 보위부 (박희순, 리대범 役) 의 눈치게임을 열심히 하다가, 점점 악행 자체에 초점이 모이는 것이었다. 영화는 여기서 실패했다.\n김광일이 저렇게 미친 짓을 하고 다녀도 눈감아주는 것은, 장성택의 계좌를 관리하는 간부의 아들이었기 때문이다. 그래서 북한에서는 눈감아주고, 되려 수사를 지휘하던 리대범을 좌천시켜버린다. 그런데 갑자기 장성택이 실권되면서 김광일은 북한 밖으로 탈출하게 되는데, 이걸 CIA 에서 \u0026lsquo;국정원이 보호하고 있으라\u0026rsquo; 고 했고 박재혁의 선배 (박성웅 扮) 이 관리하면서 국내에서도 사건이 발생하게 된다… 는 전개다.\n국정원이 몰랐다면 한심한거고, 국정원이 알았다면 도덕적 해이다. 숨은 묘사에서는 국정원 관리팀 여직원도 당했다는 말도 있다. 아마도 김광일이 악인일 줄 몰라서 데려왔는데 사건이 터졌고, 자기 얼굴에 똥칠하기 싫어서 적당히 수습하고 나몰라라 했다고 추측해야 맞겠다. 이런 추측이 스토리 라인에 별로 도움도 안 되고, 설명을 해 줘도 똑같은 취급 당했을 테다.\n김광일이 비호를 받는 이유를, 북한의 권력 구조가 바뀌는 과정에서 이해해야 한다는 점도 관객들에게 불친절하다. 총 4단계인데, 적고 보니 스포일러라 못 적겠다.이 과정을 이야기해주는 포인트가 존재하긴 하지만, 굉장히 빠르게 지나간다. 북한 사정을 잘 모르는 사람은 \u0026lsquo;장성택이 뭐 어쩌라고\u0026rsquo; 라는 식으로 영화를 볼 수 밖에 없다. 그러니까 김광일을 가지고 배구놀이를 하는 이유가 부실해진다. 결국 남는 명분은 돈(계좌)인데, 이 맥거핀이 결말에 가면 힘이 엄청 떨어진다. 이젠 그런거 다 소용없다고 관객이 이미 느껴버리니까, 엔딩이 전혀 와닿지 않는 것이다.\n박재혁도 그렇지만, 채이도와 리대범은 더욱 개성없는 캐릭터로 전락했다. 채이도는 계속 욕만 하고 범인 잡아야 한다는 사명감으로 전진만 한다. 뭐? 못하는게 어딨어, 범인 잡아와. 뭐? 북에서 왔어? 탈북자 꺼져. 뭐? 수사거래? 니들 지금 장난하냐. 죽은 수사반장과의 연민이나 하다못해 안타까운 과거사를 끼웠어도 극적이었을 것 같은데. 그런 건 김광일에게 죽을 뻔 한 리대범이 차라리 낫지만, 왜 그렇게 쫓았는지에 대한 건 역시 별로 없다.\n감독의 시나리오는 각 인물을 설명하는 챕터가 별개로 있는데, 영화에 넣기 너무 길어서 제외했다고 한다. 채이도와 리대범은 추가 설명이 반드시 필요한 인물이었는데, 놓친게 아쉽다.\n반대로, 피해자 또는 유족에게는 냉혈한인 사람들이 이해적대관계에 있는 사람들과 너무 정을 나누기 때문에 불합리하다고 말하는 평에는 동의하지 않는다. 이 영화는 그런 장면이 없더라도, 무드는 충분히 깔렸다. 리대범은 사실상 당이 쫒지 마라면 하지 말아야 되는데, 피칠갑이 된 일가를 보고는 수사 의지를 내비친다. 너무 잔인하니까. 채이도 역시 \u0026lsquo;미국에는 사람 안 사냐\u0026rsquo; 며 추가 범죄를 우려한다. 박재혁은 그 사이에서 갈등하는 인물로 그려진다.\n오히려 세 명의 처지들이 너무 박해서 (복권을 바라는 탈북자, 수습을 원하는 풍전등화의 국정원 요원, 극한 사명감에 시달리는 욕쟁이형사) 앞만 보고 뛰어가도 모자라는 압박에 시달리는데, 그 같은 터널을 지나는 사람들이었으니 사고가 났을 때 더 와닿은 것 뿐이다. 그 감정이 주입되는 순간 영화의 장르가 달라진다.\n연기는? 그래도 장르적인 영화로 소기의 성과를 달성했다고 생각하는 건, 나는 스토리가 말이 되면 영화나 드라마가 지루해지니까 적당히 상상해서 맞춰 봐야한다 라는 입장이기 때문이다. 드라마는 설명할 수 있는 여지가 많지만 영화는 절대적으로 부족하다. 그리고 여기에 네임드 배우들의 호연이 있기 때문이기도 했다. 스토리가 연기 폭을 좁혔다는 이야기는 이미 했으니 넘어가고.\n가장 눈여겨 본 사람은 장동건과 이종석인데, 장동건은 불안해서, 이종석은 호기심으로 본 것 같다. 내가 일전에 「우는 남자」 리뷰를 하면서 왜 이렇게 찌질남처럼 연기했냐고 말한 적이 있는데, 그 뒤에 「신사의 품격」 을 보면 아, 이 아저씨는 차도남 연기를 해야 한다는 생각이 들었다. (물론 드라마에는 귀여운 구석이 참으로 많았으나, 기본 베이스는 쿨내나는 도시남자였잖나) 그런 표현이 이번 영화와 잘 맞아떨어진 것 같다. 본인이 주도적으로 극을 이끌어 갈 때엔 빛을 발하고, 대립관계에서 짜져 있거나 물론 잘 봐줘서.. 그렇단 이야기고, 기대 이상이라고만 하자.\n이종석의 경우는 \u0026lsquo;아니 이 친구가 북한 사투리를? 악역으로?\u0026rsquo; 라고 놀랬기 때문이다. 실제 대사는 채이도와 첫 대질심문할 때 나와서 인내심을 갖고 그의 입을 봐야 한다. 결론적으로 나쁘지 않았지만, 거슬리는 부분도 많았다. 하지만 포스터에도 보이지만, 저 빙긋이 웃는 미소가 여심을 흔들 수도 있고 세 남자를 빡돌게 만들수도 있다는 걸 잘 보여줬다. 무엇보다, 「너의 목소리가 보여」 전후로 시작된 이종석 특유의 스테레오타입을 벗으려고 노력한 점은 인정. 하지만 성공적이었는지는 글쎄.\n평가 생각없이 본다면 큰 불만이 없는 영화지만, 찾아볼 정도로 매력이 있는지는 잘 모르겠다. 국정원이나 경찰이 서로 잇속을 챙기려 으르렁거리는 상황이 신선하다고 느끼거나, 이종석의 연기가 궁금하다면 볼 정도고, 나머지는 사실상 평범했거나 기대에 못 미쳤다고 봐야 한다. 그래도 소위 말하는 \u0026lsquo;망작\u0026rsquo; 수준은 절대 아니다. 그냥 내 기대가 높았을 뿐.\n★★★☆\n","permalink":"https://interp.blog/v-i-p-2017/","summary":"긴장국면 속 넘어온 북측 VIP. 그리고 그 안에 들어있는 추악한 진실을 마주하는 남자들.","title":"V.I.P. (2017)"},{"content":" The world will not be destroyed by those who do evil but by those who watch and do nothing.\n  세상은 악당들 때문에 망하는 게 아니라, 악한을 보고도 아무것도 하지 않는 자들 때문에 망한다.\n  – Albert Einstein\n 이 말을 선거철에 쓰면 투표를 독려하는 것이고, 경찰서 앞에 붙어있으면 투철한 신고정신을 고취시키는 것이다. 책상 앞에 붙인다면 어떻게 될까. 나쁜 습관이나 언행, 과오를 그냥 보고 넘기면 내가 망한다. The life will not be destroyed by wrong things I did but by me who watch and do nothing afterward.\n이게 내 천성이고 고치기 힘든 것이라서 쉽게 포기하는 것이다. 악당은 원래 더 똑똑하고 힘 세다. 하지만 우리는 힘을 모아서 신고도 하고 투표도 한다. 그 과정이 하루 아침에 이뤄지지도 않는다. 뜻을 모으고, 힘을 모으고, 계획을 세운다. 결과가 잘 안될 수도 있다. 하지만 노력한다. 만약 성공하면, 통제 불가능해 보였던 악한이 사라지고 평화를 맞을 수 있다는 그 기대감으로.\n인생도 마찬가지다. 끊임없이 나와 투쟁해야 한다. 사실 힘든 것도 잘 안다. 하지만 우리는 기대한다. 통제 불가능한 내 약점이 사라지고 좀 더 멋진, 그리고 더 나은 인간으로서 인정받으면서, 나에게도 다음 과업을 처리할 수 있는 시간을 주는 것.\n이 스트레스는 필연적으로 부여받은 하나의 업보일 뿐이다. 피하려 하면 할수록 절대로 피할 수 없다는 사실을 깨닫게 될 것이다. 가만히 지켜보고 아무것도 하지 않는 자는 인생을 망친다.\n","permalink":"https://interp.blog/%EB%82%98%EC%81%9C-%EA%B1%B4-%EB%8B%B9%EC%97%B0%ED%95%9C%EA%B2%8C-%EC%95%84%EB%8B%88%EB%8B%A4/","summary":"The world will not be destroyed by those who do evil but by those who watch and do nothing.\n  세상은 악당들 때문에 망하는 게 아니라, 악한을 보고도 아무것도 하지 않는 자들 때문에 망한다.\n  – Albert Einstein\n 이 말을 선거철에 쓰면 투표를 독려하는 것이고, 경찰서 앞에 붙어있으면 투철한 신고정신을 고취시키는 것이다. 책상 앞에 붙인다면 어떻게 될까. 나쁜 습관이나 언행, 과오를 그냥 보고 넘기면 내가 망한다. The life will not be destroyed by wrong things I did but by me who watch and do nothing afterward.","title":"나쁜 건 당연한게 아니다"},{"content":"Gitlab Community 에서 필요로 하는 기능인데, 이렇게 수동으로 할 수 있어서 간단히 남긴다. Gitlab 에 있는 merge request 에 보면 다음 옵션이 있는데, 전부 체크가 해제되어 있다.\n Merge Request 에 성공한 Source Branch 를 삭제 Merge Request 할 때 Commit 을 하나로 뭉쳐서 Merge (=Squash Merge)  이 체크박스를 개발자가 일일해 해 줘야 하는 문제가 있다. 그래서 어떤 개발자는 체크하는 것을 까먹었다가 master branch 의 commit tree 를 엉망으로 만들기도 한다. 이 문제를 그냥 없애기 위해, 체크박스 표시를 그대로 두도록 하면 어떨까 고민하던 차에, 해결방법을 알아냈다.\n /opt/gitlab/embedded/service/gitlab-rails/app/views/shared/issuable/form/_merge_params.html.haml 을 편집기로 연다. check_box_tag 항목으로 시작하는 줄이 두 군데있는데, 아래와 같이 다음 내용을 \u0026lsquo;추가\u0026rsquo; 한다.  다 했다면 gitlab-ctl reconfigure \u0026amp;\u0026amp; gitlab-ctl restart 로 Gitlab 서버를 재시작한다.\n Translation may be necessary for those not familiar with Korean, so let\u0026rsquo;s summarize it.\nTwo options in Gitlab merge request are not checked at first, as captured above. I think it is mistake-prone to many developers, so some of them forgot to check them. It results adding merge commit(s) into master branch.\nSo I needed how to make them checked, and I finally got an answer.\n Open /opt/gitlab/embedded/service/gitlab-rails/app/views/shared/issuable/form/_merge_params.html.haml with your favorite editor. Find lines starting with check_box_tag and append it described below.  After that, you should restart server by entering gitlab-ctl reconfigure \u0026amp;\u0026amp; gitlab-ctl restart\n","permalink":"https://interp.blog/set-gitlab-merge-request-checked/","summary":"Gitlab Community 에서 필요로 하는 기능인데, 이렇게 수동으로 할 수 있어서 간단히 남긴다. Gitlab 에 있는 merge request 에 보면 다음 옵션이 있는데, 전부 체크가 해제되어 있다.\n Merge Request 에 성공한 Source Branch 를 삭제 Merge Request 할 때 Commit 을 하나로 뭉쳐서 Merge (=Squash Merge)  이 체크박스를 개발자가 일일해 해 줘야 하는 문제가 있다. 그래서 어떤 개발자는 체크하는 것을 까먹었다가 master branch 의 commit tree 를 엉망으로 만들기도 한다.","title":"Gitlab merge request 옵션 기본으로 두기"},{"content":"무더위가 찾아온 일상, 낮과 밤의 하늘은 여전히 아름답다.\n낮 / 구로디지털단지\n밤 / 온수역\n","permalink":"https://interp.blog/%EB%AC%B4%EB%8D%94%EC%9A%B4-%EB%82%AE%EA%B3%BC-%EB%B0%A4/","summary":"무더위가 찾아온 일상, 낮과 밤의 하늘은 여전히 아름답다.\n낮 / 구로디지털단지\n밤 / 온수역","title":"무더운 낮과 밤"},{"content":"고요한 호숫가에 조약돌을 던지면, 주위에서 파장이 일어나지만 이내 움직이지 않는 수심 속으로 들어간다.\n작은 물웅덩이에 조약돌을 던지면, 존재를 잃어버릴 만큼 가지고 있던 흙탕물을 사방으로 튀겨낸다.\n물웅덩이의 입장에서는 날아오는 돌의 의미를 알 수 없다.\n자신의 존재가 부정당하기 직전인데 그럴 여유가 없을 것이다.\n하지만 호수는 여유가 있다. 일단 의미를 파악하는데 약간의 시간이 걸리긴 하겠지만,\n어느샌가 돌을 받아주고는 깊숙한 어딘가에 넣어둔다.\n자신에게 잔소리하지 않았으면 하는 태도로 일관하는 사람이 있다. 필요한 커뮤니케이션도 잔소리로 받아서 문제다. 마치 그 지적을 받아들면 자신의 과업이 부정당하는 것 처럼. 그냥 문제가 있으면 그런가보다 하고 받아들이면 되고, 오해하고 있다면 해명해주면 된다. 그게 전부다. 화내고, 우울해하고, 보복할 준비를 하는 등의 불필요한 행동은 에너지 낭비다.\n조직 생활에서는 하나의 목표를 위해 지적도 당하고 지적도 하며 살아야 한다. 동상이몽라고 할 만큼 사람은 생각하는 바가 전혀 다르다. 그 사이를 메꾸기 위한 고통스런 의사소통은 피할 수 없다. 예민하게 굴거나, 아예 기만하는 행동은 의사소통에 도움이 되지 않는다. 지적을 받을 때는 최대한 고요하게, 필요한 대응만 하고 묻어두는 것이 차라리 좋다.\n","permalink":"https://interp.blog/%EA%B3%A0%EC%9A%94%ED%95%9C-%EB%A7%88%EC%9D%8C%EC%97%90-%EC%A1%B0%EC%95%BD%EB%8F%8C-%ED%95%98%EB%82%98/","summary":"고요한 호숫가에 조약돌을 던지면, 주위에서 파장이 일어나지만 이내 움직이지 않는 수심 속으로 들어간다.\n작은 물웅덩이에 조약돌을 던지면, 존재를 잃어버릴 만큼 가지고 있던 흙탕물을 사방으로 튀겨낸다.\n물웅덩이의 입장에서는 날아오는 돌의 의미를 알 수 없다.\n자신의 존재가 부정당하기 직전인데 그럴 여유가 없을 것이다.\n하지만 호수는 여유가 있다. 일단 의미를 파악하는데 약간의 시간이 걸리긴 하겠지만,\n어느샌가 돌을 받아주고는 깊숙한 어딘가에 넣어둔다.\n자신에게 잔소리하지 않았으면 하는 태도로 일관하는 사람이 있다. 필요한 커뮤니케이션도 잔소리로 받아서 문제다.","title":"고요한 마음에 조약돌 하나"},{"content":"다른 사람을 지적하기 위한 것이 아니라 그저 내가 답답해서 페북에도 두번이나 올렸던 건데, 아인슈타인이 이미 한 말이었다. 역시 범인인 내가 생각한건 누군가가 이미 생각한 것이리라. 쉽게 설명할 수 없으면, 아는 것이 아니다. (바리에이션으로는, 6살 꼬마에게 설명할 수 없으면 아는 것이 아니라고도 한다.)\n이건 뭐죠? 라고 물어봤을 때 금방 생각나지 않으면서 \u0026lsquo;아, 이거 몇년 전에는 알았는데\u0026rsquo; 라고 탄식하게 되는 상황을 종종 마주한다. 그러면 쿨하게 대답하는 것 말고는 다른 방도가 없다. **\u0026lsquo;모릅니다\u0026rsquo; 라고. **\u0026lsquo;그거 해봤는데 왜 기억이 안날까요? ^^;\u0026rsquo; 라거나 \u0026lsquo;이런 것 같았는데 말이죠\u0026rsquo; 라고 표현하는 건, 신뢰를 깎아먹는 역효과를 일으킬 뿐이다.\n그럼 그 설명을, 혹은 그 역사를 달달 기억하고 외워야 하나? 원칙적으로는 그래야 한다. 하지만 오랫동안 기억하려면 무작정 외워서는 안 될 것이다. 그 속에 담긴 원리는 무엇인지, 왜 이런 개념이 필요해서 만들어졌는지를 이해하지 않고 기억하는 것은 불가능에 가깝다.\n자기만의 색인을 만드는 방법도 있다. 몰래 찾아볼 수도 있고, 시간을 꼭 벌어야 한다면 \u0026lsquo;반드시 찾아줄 테니 잠시만 기다리라\u0026rsquo; 는 시그널이 필요하다. 어떻게 하면 효율적으로 자료를 관리해야 할까? 자료에 대한 이해 없이는 이것도 불가능하다. 결국 앞의 이야기로 돌아간다.\n","permalink":"https://interp.blog/if-you-cannot-explain/","summary":"다른 사람을 지적하기 위한 것이 아니라 그저 내가 답답해서 페북에도 두번이나 올렸던 건데, 아인슈타인이 이미 한 말이었다. 역시 범인인 내가 생각한건 누군가가 이미 생각한 것이리라. 쉽게 설명할 수 없으면, 아는 것이 아니다. (바리에이션으로는, 6살 꼬마에게 설명할 수 없으면 아는 것이 아니라고도 한다.)\n이건 뭐죠? 라고 물어봤을 때 금방 생각나지 않으면서 \u0026lsquo;아, 이거 몇년 전에는 알았는데\u0026rsquo; 라고 탄식하게 되는 상황을 종종 마주한다. 그러면 쿨하게 대답하는 것 말고는 다른 방도가 없다. **\u0026lsquo;모릅니다\u0026rsquo; 라고.","title":"설명할 수 없으면, 아는 것이 아니다"},{"content":"이 책은, 접근부터 굉장히 쉬웠다. 리디북스에서 무료 대여 기간이 있었고, 동시에 많은 북 큐레이션 페이지에서 이 줄거리를 카드 뉴스나 동영상으로 홍보했기 때문이다. 그리고 줄거리가 충분히 구미가 당길 만한 내용이었다. 과거를 버리고 평범한 삶을 살아가는 남자에게 들이닥친 불행한 과거로부터의 편지 한 통. 악한을 죽여달라는 그 때의 약속을 반드시 지켜달라는 내용이란다. 이 남자의 과거는? 편지의 발신인은? 궁금한 나머지 빠르게 읽어내려갔다.\n줄거리 도입부는 주인공의 평범한 일상을 소개한다. 레스토랑과 바를 겸하는 식당의 공동 창업자이자 바텐더로, 사랑하는 아내와 초등학교를 다니는 귀여운 딸을 둔 가장으로. 하지만 그는 어두운 과거를 꽁꽁 숨겨둔 채 살아간다.\n그는 사실 얼굴에 다 드러날 정도의 큰 멍을 가진 사내로, 어릴적 멸시와 동정을 이기지 못하고 강도짓을 일삼는다. 그러다 시비가 붙어 야쿠자에게 쫓기는 신세가 되었고, 그 와중에 한 노인을 만난다.\n노인은, 자신의 딸이 파렴치한 두 남성에게 납치되어 강간당한 뒤 살해당했다고 한다.그런데 그 두 피의자에게 사형 선고가 아닌 15년형이 내려진 것에 분노하며, 자신은 이제 기력이 다 했으니 원하는 대로 돈을 받고 두 사람을 죽여달라는 약속을 하나 해줄 수 없겠느냐고한다. 주인공은 심하게 갈등하지만, 야쿠자에게 붙잡혀 송장이 되기 싫었던 주인공은 \u0026lsquo;지키지 않아도 될 약속\u0026rsquo; 쯤으로 생각하고 약속을 한 뒤 돈을 받는다. 그렇게 성형을 하고 누군가의 호적을 받아 새로운 삶을 이어나가고 있었다. 그런데… 15년이 지나고 집으로 도착한 편지 한 통.\n 그들이 출소했습니다.\n 약속을 지키지 않으면 가족을 해치고 똑같은 고통을 느끼게 해주겠다고 협박한다. 주인공은 어떻게 해야 할까.\n 여기까지가 알려진 줄거리고, 이후로는 내 감상만 적겠다.\n복선 회수력 : 4/5 아침드라마와 일일드라마를 즐겨 본다면, 대번에 느낄 수 있는 포인트가 바로 복선이다. 이런 장면들은 자체로는 별 의미가 없지만 내포한 힘은 강력하며, 전개 과정에서 이 힘이 마치 콤보처럼 터진다. 아니 왜 갑자기 생판 남의 자식과 남자 주인공을 오버랩 시키지? 남자가 사귀자는데 여자의 저 오묘한 표정은 뭐지?그런데 잘 보면 복선같이 보이는 장면들이 사실은 아무런 의미없는 장면이 되는 경우가 간혹 있다. 메인 커플을 훼방놓기 위해 유학길에서 돌아온 남자 주인공의 소꿉동생이, 질투 몇 번 하더니만 둘 사이를 축하해주는 들러리로 전락한다든지.이 책은 그런 점에선 절대 소홀히 하지 않는다. 결말에 도착하면 뭔가 \u0026lsquo;아, 잠깐만. 그래서 그때?\u0026rsquo; 싶을 정도로 콤보가 터진다. 다만 아쉬운 것은, 갑자기 이 모든 원흉이 된 또 다른 사건이 소개되는 시점이 갑작스럽다는 것이다.\n마치 (작가는 절대 그렇게 쓰지 않았겠지만) \u0026lsquo;이 사건으로 내가 결말을 설명할건데, 사실은 앞에 뿌려둔 복선을 회수하기 위해서 만든 사건이야\u0026rsquo; 라고 하는 것 같았다. 그래서 점수가 깎였다.\n 몰입도 : 4/5 그렇다고 이게 \u0026lsquo;결말을 이끄는 힘이 부족하다\u0026rsquo; 라고는 할 수 없다. 다음 내용이 사실 궁금해질 수 밖에 없도록 만들었으니까.\n주인공은 편지를 받고 편지의 발신인을 찾기 위해 (밤에 일을 하니까) 낮에 싸돌아다니다가 와이프에게도 의심받고 동업자에게도 의심받는 상황에 처한다. 그런데 편지를 보낸 사람은, \u0026lsquo;나는 영혼이다. 너가 뭘 하는지 다 보고 있다. 뭐하냐, 출소했다니까 그때 했던 약속대로 죽여달라\u0026rsquo; 라고 한다. 그러면서 일터에도 전화를 하고 스마트폰을 배달해서 지시를 하게 하고… 상황은 점점 더 옥죄어 오는데 누가 이러는지는 전혀 갈피를 못 잡는 것이다.\n정말 영혼인가? 날 쫓던 야쿠자인가? 같이 나쁜 짓을 했던 녀석 중 한명의 짓인가? 그 노인이 자주 간다던 \u0026lsquo;억울한 피해자 모임\u0026rsquo; 의 사람 중 한명인가? 그 와중에 [스포일러 : 긁어서 열람]타겟 두 명 중 한명을 찾아가지만 죽이지 못하고 왔는데, 다음날 살해당하고 자신은 누명을 썼다. 이제 정말 끝인가, 벼랑 끝으로 내모는 속도가 빠르다. 결말에 다다르면 전부 ta-da 하고 보여주지만, 그 전까지는 독자들도 끝자락으로 내몬다.\n마치며 교보문고에 갔더니 이 책이 소설 베스트셀러 4위더라. 솔직히 많이 놀랐다. 절박한 주인공으로 만들어버리면서 동시에 주인공의 기민한 위기대응을 보여주는 빠른 전개, 주인공 주변에 흩뿌려진 많은 주변인들 사이에서 벌어지는 복선들의 철저한 회수에는 점수를 후하게 주지만 스토리 전체를 놓고 봤을 때는 끝에서 힘을 다 빼버리는 느낌이 강했기 때문이다. 좀… 실소가 나올 정도로.\n마치기 전에, 나는 엉뚱한 곳에 시선이 갔다. 주인공이 동료에게 돈을 주고 새로운 호적을 받는 장면이 있다. 주인공이 \u0026lsquo;이 사람은 누구야?\u0026rsquo; 라고 묻자, \u0026lsquo;그 사람은 연고도 없고, 지금 어떻게 됐는지는 묻지마\u0026rsquo; 라고 답한다.\n이 호적의 원래 주인이 범인이었으면 어땠을까. 너무 뻔했을까.\n나는 결말을 알기 전에는 이 장면이 보이지 않았으니, 나에겐 꽤나 신선했을 것 같다.\n","permalink":"https://interp.blog/%EB%8F%8C%EC%9D%B4%ED%82%AC-%EC%88%98-%EC%97%86%EB%8A%94-%EC%95%BD%EC%86%8D/","summary":"이 책은, 접근부터 굉장히 쉬웠다. 리디북스에서 무료 대여 기간이 있었고, 동시에 많은 북 큐레이션 페이지에서 이 줄거리를 카드 뉴스나 동영상으로 홍보했기 때문이다. 그리고 줄거리가 충분히 구미가 당길 만한 내용이었다. 과거를 버리고 평범한 삶을 살아가는 남자에게 들이닥친 불행한 과거로부터의 편지 한 통. 악한을 죽여달라는 그 때의 약속을 반드시 지켜달라는 내용이란다. 이 남자의 과거는? 편지의 발신인은? 궁금한 나머지 빠르게 읽어내려갔다.\n줄거리 도입부는 주인공의 평범한 일상을 소개한다. 레스토랑과 바를 겸하는 식당의 공동 창업자이자 바텐더로, 사랑하는 아내와 초등학교를 다니는 귀여운 딸을 둔 가장으로.","title":"돌이킬 수 없는 약속"},{"content":"요즘 말하는 욜로(YOLO) 에 가까운 삶을 사는 친구가 있다. 일단 불안한 계약직인데다 계약 텀도 굉장히 짧은 직종에 근무한다. 그런데도 잘 놀러 다닌다. 너무나도. 그러면서 늘 걱정을 늘어놓는다. 좋은 남자 만나 결혼해야지, 정규직도 되면 좋겠지, 계속 놀러 다니고는 싶지… 이런, 쓰고 보니 이 친구는 욜로가 아니다. 내일 살 걱정을 하기는 하니까. 아무튼, 이 친구의 문제는 뭘까, 혹시 쾌락의 끝자락에서 내려오기 싫은 발버둥을 치는 것은 아닐까, 아니면 더 큰 것을 좆을 수 없는 공허함을 느낀 걸까.\n술을 마시던 게임을 하던, 그 때만 즐거을 뿐이다. 숙취에 고통받을 때, 게임 종료 버튼 앞에 있을 때, 우리는 다시 비어있음을 느낀다. 쾌락의 순간에는 더 큰 역치를 넘어서지 못하는 한계에 부딪히며 파열을 발생시키는 게 아닐까. 그것이 허무감인지, 어떤건지 잘 모르겠다.\n더 큰 보상을 바라는 뇌의 요구와, 중독적인 일 외에 할 수 있는 일을 하나씩 배제시키는 습관의 힘이 합쳐진 것을 우리는 중독이라고 한다. 올바른 (적어도 사회적으로 올바르다고 여겨지는) \u0026lsquo;성취\u0026rsquo;의 대부분은, 즉각적인 보상으로 이어지지 않는다. 그래서 상벌이 바로 튀어나오는 행위에 우리는 열광한다. 시간을 들여 보상이 주어지는 성취에 점점 관심을 잃는 것이다. 하는 방법도, 버틸 힘도 잃어버린다.\n습관은 더 무서운데, 뇌의 보상기제가 작동하건 말건 이 녀석은 항상 LRU (Least Recently Used) 리스트처럼 행위를 관리한다는 것이다. 자주 한 일일수록 쉽게 선택되고, 전혀 해보지 않은 일 (하지만 한번 쯤 해봐야지 하며 버킷리스트에 채워넣었던 일) 은 선택되기 힘들게 한다. 즉, 새로운 도전은 그만큼의 비용이 들지만, 곁에 둔 습관은 그렇지 않다는 것이다. 반복적인 행동은, 그것이 나쁘건 좋건 간에, 여유 시간에 \u0026lsquo;그냥 할 만한 것들\u0026rsquo;의 유력한 후보로 항상 존재할 것이다. 그 후보는 2선, 3선을 밥먹듯이 할테고, 질 나쁜 행동이 고착화되면 언젠가는 부패할 것이다.\n잘못된습관과 보상기제로 인해 정해진 중독적 행위가 과연 현재를 즐기자라는 다소 낙관적인 말로만 포장될 수 있는지에 대해 숙고해 봐야 한다는 것이다. (잘못됐다는 말을 쓰는걸 별로 좋아하지 않지만, 뭔가 내가 하는 일이 이상하다고 생각된다면 그건 잘못된 거다. 애석하게도. )\n소미의 옆집 아저씨도 \u0026lsquo;오늘만 산다\u0026rsquo;고 말하지만, 욜로라고 하지 않는다. 다음을 걱정을 하는 자에게, 중독을 이어가는 이 허무함은 더 고통스럽지 않을까? 그래서 이 신조어는, 실제로 그런 극단적인 허무감을 회피하지 못한 비웃음의 단어는 아닌지, 아니면 정말 해탈했다고 자랑하고 싶은건지 의심스럽기만 하다.\n","permalink":"https://interp.blog/%EC%A4%91%EB%8F%85%EC%A0%81-%EC%8A%B5%EA%B4%80/","summary":"요즘 말하는 욜로(YOLO) 에 가까운 삶을 사는 친구가 있다. 일단 불안한 계약직인데다 계약 텀도 굉장히 짧은 직종에 근무한다. 그런데도 잘 놀러 다닌다. 너무나도. 그러면서 늘 걱정을 늘어놓는다. 좋은 남자 만나 결혼해야지, 정규직도 되면 좋겠지, 계속 놀러 다니고는 싶지… 이런, 쓰고 보니 이 친구는 욜로가 아니다. 내일 살 걱정을 하기는 하니까. 아무튼, 이 친구의 문제는 뭘까, 혹시 쾌락의 끝자락에서 내려오기 싫은 발버둥을 치는 것은 아닐까, 아니면 더 큰 것을 좆을 수 없는 공허함을 느낀 걸까.","title":"중독적 습관"},{"content":"두 여자가 서로 다른 방향을 보고 있지만, 그 얼굴 안에서는 마주보기도 하는 듯, 흑심을 품고 있는 듯한 이미지가 프랙탈처럼 나타나 있는 기괴한 표지에 담긴 내용은 대체 어떤 사연일까?\n출판사 \u0026lsquo;황금가지\u0026rsquo;에서 만든 새로운 라인업 \u0026lsquo;수상한 서재\u0026rsquo; 시리즈의 첫 작품인 김수안 작가의 암보스를 읽어봤다. 시간이 없어 서울-대구를 오가는 KTX 안에서 읽었는데, 다소 두꺼운 외형과는 달리 꽤나 빨리 따라갈 수 있었다.\n암보스 (ambos) 는 스페인어로 \u0026lsquo;양쪽, 두 사람\u0026rsquo; 이란 뜻이다. 두 여자가 주인공인 것을 표현하고자 했겠으나, 실제로 스페인어는 남성형/여성형 명사가 따로 존재한다. 그래서 표지만 보고는 왜 암바스 (ambas) 라는 여성형 명사를 채택하지 않았을까 자뭇 궁금해졌다. arm boss 같은 느낌도 있어서나중에 작가 인터뷰를 보니, 두 주인공만을 위한 제목이 아닌 여러 인물들의 관계 자체를 암보스로 봤기 때문이라고 한다.줄거리 이하는 최대한 스포일러를 피해서 나온 (그래서 책 소개내용과 거의 흡사한) 초반 상황 요약이다.\n신문 기자 이한나는 어느 날 방화사건 현장에 있었고, 목격한 모든 정보를 회사에 전달한 뒤 의식을 잃었다. 이대로 죽는건가? 아니, 죽는 것도 나쁘지 않겠지. 무능하고 철면피인 아버지가 진 빚이며, 헤어진 남자친구며, 내가 잘못 굴린 펜으로 사람이 곤란에 겪었으니까.\n깨어나보니, 이한나는 다른 사람이 되어 있었다. 같은 날 옥상에서 뛰어내렸지만 가까스로 목숨을 건졌던 강유진이란 사람으로. 이한나는 퇴원하자 마자 강유진의 집을 찾아갔는데, 별안간 이한나의 모습을 한 누군가가 뒤따라 찾아왔다. 그는 강유진이었다.\n몸이 뒤바뀐 것이다. 어떻게 된 일일까.\n초자연은 중요한 게 아니다 하지만 책은 왜 이들의 몸이 바뀌었는지는 독자들에게 이야기해주지 않는다. 누군가가 상대방의 몸을 원했다면, 영화 \u0026lsquo;더 게임\u0026rsquo; 의 강회장 (변희봉 扮) 같은 캐릭터가 나와야 하겠지만, 여기선 어느 누구도 그런 역을 자처하지 않는다. 그보다는, 서로의 삶에서 느끼는 \u0026lsquo;잃은 것과 얻은 것의 의미\u0026rsquo;를 알아가고 행동하는 데에 많은 부분을 할애한다. 강유진은 비만에 집에 틀어박혀 지내기 일쑤지만 돈이 많았고, 이한나는 예쁜데다 활기차고 자기주관이 강했지만 안하무인 아버지로 인해 많은 빚을 졌다.\n설마 강유진의 모습을 한 이한나가 \u0026lsquo;나는 열심히 운동해서 살을 빼야지\u0026rsquo; 라거나 \u0026lsquo;이제부터 사람들과 잘 어울려야지\u0026rsquo; 같은 뭐 이런 희망적인 스토리를 기대하지는 말자. 그들은 언젠가 다시 본래의 상태로 돌아갈 것이라고 확신하고 있었다. 정확히 말하자면 강유진이 \u0026lsquo;그렇게 될 것\u0026rsquo;이라고 이야기했지만. 아무튼 그렇게 돌아가버린다고 가정했을 때 이들은 어떤 행동을 하게 될 것인가. 상대방의 미스터리한 행적이 서로의 시선을 통해 서술되기 시작한다.\n갑자기 교차되는 사건 시간이 지나면서 연쇄살인사건, 그리고 그 범인을 찾는 형사가 교차되어 나타난다. 일면 관련없어 보이는 사건 이야기가 갑자기 주인공 일행의 서사와 겹치면서 충돌하기 시작한다. 그것도 아주 빠르게. 파열음은 의외로 강하고, 당사자들의 추리 게임은 꼬리에 꼬리를 문다.\n이 시점에서 가장 눈에 띄는 것은 단연 박선호 형사일 것이다. 우락부락한 체격과 어울리지 않게 집요하리만치 파고드는 집중력이 소설 내내 돋보인다. 그 옆을 따르는 부사수 칠범 역시 파트너 역할에 충실한다. 이한나의 가족과 주변인, 그리고 강유진의 증언 등을 토대로, 사건 이후 사람이 뭔가 달라졌다는 의혹을 끝까지 물고 늘어지는데, 이 부분에서 주인공 일행과의 긴박한 밀당이 계속 이뤄진다. 결국 살인사건은 실마리를 찾고 해결되지만, 이게 정말 끝일까?\n소설이 이야기 하는 방식 소설이 가지는 강점은 심리 묘사와 비유에 많은 에너지를 쏟았고 그걸 고스란히 전달하려고 노력했단 점이다. 사건의 진위가 아니라, 사건에 휘말린 인물의 세세한 면면을 나타내려고 애를 썼다. 그래서 스토리 자체에 태클을 걸면서 본다면 자칫 넘어지기 쉬울 것 같아 보이긴 하지만, 그런 세세한 부분을 너그러이 이해해준다면 재밌게 읽힐 소설이 될 것이다.\n작중 이한나의 시점, 박선호 (를 포함한 외부)의 시점에서는 이한나와 강유진을 지칭하는 자아가 서로 다른 것이 신선했다. 이한나의 시점에서 서술될 때는 \u0026lsquo;나\u0026rsquo; 와 \u0026lsquo;(내 모습을 한) 강유진\u0026rsquo; 이지만, 그 외에는 외모대로 \u0026lsquo;강유진\u0026rsquo; 과 \u0026lsquo;이한나\u0026rsquo; 로 서술된다. 박선호가 이를 눈치챈 종반부에서는 서술이 다시 뒤바뀌긴 하지만. 그래서 이 부분을 따라가기가 조금 피곤해 질 수는 있겠다.\n마치며 독자에게 추리할 여지를 많이 주는 것 같지만, 사실 복선은 야속하게 정류장을 지나치는 시내버스 같이 지나간다. 어느샌가 소설 속 인물들의 추리보다 한발 앞서 나간게 아닐까, 그랬던 거였어! 라고 생각하고 있다면, 조심해야 한다. 끈적한 손으로 뒤통수를 후려갈겨서 뒷맛이 찜찜하다. 이게 뭐야, 꼭 그렇게 했어야만 했냐! 같은 느낌. 하지만, 역으로 생각해보면 책을 한번 더 돌려보게 만드는 매력을 지니고는 있다고 볼 수 있다.\n소설 중에 이런 내용이 있다. 강유진의 모습을 한 이한나가 창문을 바라본다. 창문에는 강유진이 보인다. 내가 정말 나인지, 상대방이 내 모습을 하고 유리창에 나타난건지, 정말로 상대방이 내가 된건지. 나는 누구일까.\n사람의 몸이 뒤바뀐다는 초자연적인 전개에만 관심을 가지면 이 소설은 거기서 끝난다. 상대방의 거죽을 쓰고 자신도 몰랐던 민낯이 드러나는 것을 보고 나면 다른 생각이 들 것이다.\n","permalink":"https://interp.blog/%EC%95%94%EB%B3%B4%EC%8A%A4-ambos/","summary":"두 여자가 서로 다른 방향을 보고 있지만, 그 얼굴 안에서는 마주보기도 하는 듯, 흑심을 품고 있는 듯한 이미지가 프랙탈처럼 나타나 있는 기괴한 표지에 담긴 내용은 대체 어떤 사연일까?\n출판사 \u0026lsquo;황금가지\u0026rsquo;에서 만든 새로운 라인업 \u0026lsquo;수상한 서재\u0026rsquo; 시리즈의 첫 작품인 김수안 작가의 암보스를 읽어봤다. 시간이 없어 서울-대구를 오가는 KTX 안에서 읽었는데, 다소 두꺼운 외형과는 달리 꽤나 빨리 따라갈 수 있었다.\n암보스 (ambos) 는 스페인어로 \u0026lsquo;양쪽, 두 사람\u0026rsquo; 이란 뜻이다. 두 여자가 주인공인 것을 표현하고자 했겠으나, 실제로 스페인어는 남성형/여성형 명사가 따로 존재한다.","title":"암보스 (ambos)"},{"content":"Test-And-Set (TAS) TAS 를 이용해서 간단한 동시성 제어를 할 수 있다. testAndSet 이라는 function 을 가지고 아래의 do...while 문을 쓰레드 A, B 에서 동시에 호출한다고 해 보자. 이 때 lock 은 같은 변수이다.\n우선 TestAndSet() 은 다음과 같은 일을 한다. 말 그대로 \u0026lsquo;지금 값이 무엇인지 검사하고, 값을 바꾼다\u0026rsquo; 는 것이다.\n lock의 현재 값을 저장해 둔다. lock의 값을 true 로 설정한다. 저장한 lock 의 값을 반환한다.  그럼 이걸로 어떻게 아래 block 의 critical section 에 대한 동시성 제어를 할 수 있을까? Thread A 가 먼저 실행했다고 가정하면, 이런 시나리오가 된다.\n A : TestAndSet() 의 반환값이 false 이다. while 문을 빠져나온다. B : TestAndSet() 의 반환값이 true 이다. (A가 true로 두고 나왔기 때문에) while 문에서 계속 돈다. A : Critical Section 수행 후, lock 을 false 로 바꾼다. B : 여러 번의 TestAndSet() 호출 후에, 드디어 반환값이 false 가 되었다  (A가 false 로 두고 나왔기 때문에) while 문을 빠져나온다.  자, 그런데 뭔가 이상하다. 이렇게 이상적으로 동작하지 않을 것 같다. TestAndSet() 함수를 라인별로 동시에 실행한다고 하면 이런 사단이 날 수 있다.\n A : TestAndSet() 에 진입해 lock 값을 저장한다. 이 값은 false 이다. B : TestAndSet() 에 진입해 lock 값을 저장한다. 이 값은 false 이다. A : TestAndSet() 에서 lock 값을 true 로 바꾼다. B : TestAndSet() 에서 lock 값을 true 로 바꾼다. A : TestAndSet() 에서 저장한 값을 반환한다. 이 값은 false 이다. B : TestAndSet() 에서 저장한 값을 반환한다. 이 값은 false 이다. A \u0026amp; B : 모두 동시에 critical section 을 수행한다.  그럼 어떡하나? TestAndSet() 은 그래서 저런 함수만으로는 안 되고 Test-And-Set 의 연산이 일관되도록 조정해야 한다. 함수 안에 spinlock 을 쓰면 되겠네요? 싶겠지만 lock 구현하자고 lock 을 또 만드는 건 아닌 것 같다. 그래서 Test-And-Set 은 CPU에서 지원하는 Atomic Instruction 을 사용한다.\nFetch-And-Add : Ticket Lock Atomic Operation 으로 구현할 수 있는 Lock 중에 Ticket Lock 이 있는데, Fetch-And-Add 로 구현할 수 있는 방법을 알아보자.\nTAS 의 케이스를 이해하고 본다면 별 다른 설명이 필요 없을 것 같다.\n Table Lock 초기화를 한다. A : Table Lock 을 얻으려 한다. 이미 얻었던 my_ticket (0) 과 now_serving (0) 이 같은 값이므로 곧바로 빠져나온다. B : Table Lock 을 얻으려 한다. 이미 얻었던 my_ticket (1) 과 now_serving (0) 이 다른 값이므로 while 문에서 대기한다. C : Table Lock 을 얻으려 한다. 이미 얻었던 my_ticket (2) 과 now_serving (0) 이 다른 값이므로 while 문에서 대기한다. A : Table Lock 을 해제한다. now_serving (0) 을 증가시켜 now_serving (1) 을 만든다. B : 비로소 Table Lock 을 얻었다. (C는 여전히 대기 중이다.)  여기서 핵심은 fetch_and_inc 인데, 마찬가지로 얻어오는 루틴과 값을 증가시키는 루틴이 따로 떨어져 있으면 중복된 티켓을 들고 기다리는 쓰레드들이 발생할 수 있다. 따라서 이것도 atomic operation 이 되어야 한다.\n","permalink":"https://interp.blog/atomic-operation-%EC%9C%BC%EB%A1%9C-%ED%95%98%EB%8A%94-%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%A0%9C%EC%96%B4/","summary":"Test-And-Set (TAS) TAS 를 이용해서 간단한 동시성 제어를 할 수 있다. testAndSet 이라는 function 을 가지고 아래의 do...while 문을 쓰레드 A, B 에서 동시에 호출한다고 해 보자. 이 때 lock 은 같은 변수이다.\n우선 TestAndSet() 은 다음과 같은 일을 한다. 말 그대로 \u0026lsquo;지금 값이 무엇인지 검사하고, 값을 바꾼다\u0026rsquo; 는 것이다.\n lock의 현재 값을 저장해 둔다. lock의 값을 true 로 설정한다. 저장한 lock 의 값을 반환한다.  그럼 이걸로 어떻게 아래 block 의 critical section 에 대한 동시성 제어를 할 수 있을까?","title":"Atomic Operation 으로 하는 동시성 제어"},{"content":"학부에서 알고리즘 수업을 들으면, 가장 빠른 정렬 알고리즘이 뭐냐는 질문에 쉽게 Quicksort 라고 답할 수 있겠다. 실제로 현업에서도 적용하기 가장 편하기 때문에 많이 차용되는 편이다. 그런데 모든 문제를 쉽게 풀 수 있는 은탄은 세상에 존재하지 않듯, Quicksort 역시 특정 케이스에서는 성능이 낮게 나오는 경우가 있다. 더 심각한(?) 것은, 이 특정 케이스가 현실에서는 꽤나 자주 발생한다는 것이다.\n그 케이스란 바로 \u0026lsquo;거의 정렬된 데이터\u0026rsquo; 이다. 거의 정렬된 데이터라면 pivoting – partitioning 을 반복할 필요도 없이 Bubble Sort 나, 심지어는 Insertion Sort 를 해도 된다. Bubble Sort 의 경우엔 알고리즘 복잡도가 n2 이지만 compare 과정에서 조기에 끝날 가능성이 매우 높아 비용이 거의 발생하지 않을 것이고, Insertion Sort 도 비슷한 이유로 빠르게 끝날 것이다. 하지만 모든 정렬 케이스가 거의 정렬된 데이터만 있지 않기 때문에 쓰지 않는 것일 뿐이다.\n만약에 데이터 순열이 \u0026lsquo;**거의 정렬된 데이터의 N 벌\u0026rsquo;**이라고 하자. 1, 2, 3, …, 10, 2, 3, 4, …, 20이런 식으로 말이다. (여기서는 2벌) 그림을 그리자면 산이 N 개 생긴 것 처럼 보일 것이다. 이런 경우에는 Bubble Sort 가 큰 힘을 쓰지 못한다. 특정 원소가 산의 제 위치에 찾아가야 하는데, 조기에 끝났던 아까의 경우와는 달리 재수가 없다면 거의 모든 원소 개수와 비교해 봐야 하기 때문이다. 이럴 경우 역시 특효약이 있는데, 산마다 Mergesort 를 하면 쉽다.\n오늘 이야기할 Timsort 는 Mergesort 의 변형이라고 보면 된다. 아까 \u0026lsquo;산마다 Mergesort\u0026rsquo; 를 한다고 했는데, 어느 지점부터 산으로 봐야할지를 판단하는 알고리즘이 선행된다. 그리고 Mergesort 도 단순히 1개씩 건너뛰는 방법에서 좀 더 나은 방법을 제시한다.\n결론부터 말하자면 Timsort 는 무작위 데이터에서 Quicksort 보다 뒤쳐진다. 프로젝트할 때 적용해 본 결과로는 30~50% 정도 느렸다. 하지만 말했다시피, 현실 데이터는 어느 정도 정렬된 데이터의 덩어리를 가지고 있는 경우가 매우 많기 때문에, 그 부분에서는 확실한 성능 차이를 보였다.\n자, 이제 한 번 알아보자.\n1단계 : Run 데이터 순열에서 이미 정렬이 끝난 부분 데이터들을 Run 이라고 한다. 1, 2, 1, 2, 3, 1, … 같이 주어졌을 때, 1, 2 와 1, 2, 3 을 Run 으로 인식하는 것이다. Timsort 에서는, 데이터 순열을 이런 Run 들로 찾거나 만들어서 확보하는 과정을 거친다. 이게 1단계이다.\nTimsort 는 Run 이 너무 짧으면 나중에 의미가 없으므로, 최소 길이를 정해서 Run 을 만들도록 한다. 보통은 길이가 16인 Run 부터 의미있게 쓰길래, 나도 똑같이 16으로 조건을 설정했다.\nRun 은 데이터 처음부터 정렬되어 있는 위치까지를 찾는다. 이 길이가 16 미만이라면, 해당 범위는 기억해 두고 다음 Run 을 찾는다. 이렇게 길이가 16 이상의 Run 을 만들 수 있는데, 이 때 쓰는 알고리즘은 사실 아무거나 가져다 써도 된다. 길이가 짧을 때의 정렬 알고리즘은 어느 것을 쓰나 대동소이하기 때문에, 나는 Insertion Sort를 썼다.\n2단계 : Merge 1단계 이후로는, 이제 데이터 순열에 Run 여러개가 연속되어 있다. 만약 Run 이 1개뿐이라면? 축하한다. 아주 작은 원소 개수를 정렬하려 했거나, 이미 정렬된 데이터를 넣었단 것이니 이번 단계를 하지 않아도 된다.\n앞의 두 Run 을 불러서 Mergesort 하면 되는데, 여기서 Timsort 만의 트릭이 두 개 존재한다.\n하나는, Merge 에 참여할 두 Run 의 최소값/최대값을 서로 비교해서, 아예 이긴 구간이나 아예 진 구간을 미리 산정해 두는 것이다. 이 부분은 사실상 Mergesort 과정에서 비교 대상이 될 필요가 없다. 괜한 compare 연산만 낭비하지 말고 처음에 (혹은 나중에) 순순히 들어와주기만 하면 된다. 이 전처리 과정이 끝나면, 남아있는 Run 끼리 Merge 과정을 거친다.\n두 번째는, Merge 과정에서 만약 한 쪽이 계속 이기는 상황 (오름차순 정렬이라고 가정했을 때, 한 쪽의 Run 이 계속 작은 원소를 가지고 있을 때) 라면 더 이상의 비교는 무의미하다. 이런 연속 위닝 회수를 정해서, 이후에는 \u0026lsquo;어디까지 이기는지 binary search 로 찾아서 한 번에 그냥 옮기자\u0026rsquo; 라는 건너뛰기 모드 (galloping mode) 로 전환된다.코드를 참조했을 땐, 이 위닝 회수는 3이었다. 스윕승?건너뛰기 모드 (galloping mode) 에서는, 지고 있던 Run 의 첫 번째 원소가 이기고 있던 Run 의 어느 원소에서 비로소 이기는지를 찾는 것이다. 처음엔 한 칸, 다음엔 두 칸, 그 다음엔 네 칸씩 뛰며 이길 때 까지 찾는다. 그러다가 찾았다면, 직전 구간 사이를 Binary Search 를 통해 최초로 이긴 위치를 찾아내면 된다.\n그 다음은? 이기고 있던 Run 의 처음부터 발견된 위치 직전까지를 통째로 memcpy 하면 된다.\n마치며 이걸 구현할 때는 급한 나머지 그냥 구현했었는데, (물론 어딘가에선 하고 있겠지만) Mergesort 자체가 병렬 구현이 가능하므로 Timsort 역시 병렬 구현이 가능하리라 본다. Run 을 만드는 작업은 병렬로 할 수 있을까 고민이 되지만, Merge 과정은 작업 큐만으로도 쉽게 그려낼 수 있다.\n역시 이것도 만병통치약이 될 수 없다. 상황에 맞춰 적절히 섞어써야 한다. 이런 정렬 알고리즘도 있구나 하며 배웠던 소중한 기회로 여기고 있다.\n","permalink":"https://interp.blog/timsort/","summary":"학부에서 알고리즘 수업을 들으면, 가장 빠른 정렬 알고리즘이 뭐냐는 질문에 쉽게 Quicksort 라고 답할 수 있겠다. 실제로 현업에서도 적용하기 가장 편하기 때문에 많이 차용되는 편이다. 그런데 모든 문제를 쉽게 풀 수 있는 은탄은 세상에 존재하지 않듯, Quicksort 역시 특정 케이스에서는 성능이 낮게 나오는 경우가 있다. 더 심각한(?) 것은, 이 특정 케이스가 현실에서는 꽤나 자주 발생한다는 것이다.\n그 케이스란 바로 \u0026lsquo;거의 정렬된 데이터\u0026rsquo; 이다. 거의 정렬된 데이터라면 pivoting – partitioning 을 반복할 필요도 없이 Bubble Sort 나, 심지어는 Insertion Sort 를 해도 된다.","title":"Timsort"},{"content":"마음이 붕.\n몸은 여기 있는데, 어디로 가고 있는지조차 모를 정도로 격랑(激浪)에 떠밀려 가는 것처럼.\n조각난 지식들은 어딘가에 있겠지만, 약에 쓰려고 하면 개똥도 찾을 수 없는 것 처럼 내 단편의 끄적임을 찾기 힘들 때마다 드는 생각이 있다. 이걸 전부 모아뒀다면. 다짐은 용오름처럼 솟구치지만 이내 잠잠한 바다 속으로 꺼져버린다. 정리할 시간이 없진 않았을 텐데, 하면서.\n정리와 분류는 결국 데이터를 다루는 사람, 데이터 소프트웨어를 만드는 개발자 둘 모두에게 있어 경쟁력이자 기본이라고 생각한다. 어떻게 효율적으로 정리를 할 것인지 매번 고민한다. 사무실에서도, 집에서도, 혼자 스탠드등에 앉아 있으면서도. 정리해 두면, 잘 꺼내 쓸 수 있을거란 기대가 있으니까. 이 때 또 물어본다. 정말 꺼내 쓸만한 것들인지는 확인해 보았느냐고. 설마 폐지를 정리하려 드는 것은 아닐까 하고. 그래서 정리에는 비움이 필요하다.\n지금 이 생각에도 비움이 필요하다. 마음 속에 부는 바람줄을 하나씩 잠재워야 한다. 초가 타지 않도록, 그나마 따뜻한 이 믿음이 꺼지지 않도록. 이걸 먼저 정리해야겠다. 그래야 지금 앉아있는 곳으로 마음이 돌아올테니까.\n ","permalink":"https://interp.blog/%EC%A0%95%EB%A6%AC%EB%8A%94-%EB%B9%84%EC%9B%80%EC%9C%BC%EB%A1%9C-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%A7%88%EC%9D%8C%EB%B6%80%ED%84%B0/","summary":"마음이 붕.\n몸은 여기 있는데, 어디로 가고 있는지조차 모를 정도로 격랑(激浪)에 떠밀려 가는 것처럼.\n조각난 지식들은 어딘가에 있겠지만, 약에 쓰려고 하면 개똥도 찾을 수 없는 것 처럼 내 단편의 끄적임을 찾기 힘들 때마다 드는 생각이 있다. 이걸 전부 모아뒀다면. 다짐은 용오름처럼 솟구치지만 이내 잠잠한 바다 속으로 꺼져버린다. 정리할 시간이 없진 않았을 텐데, 하면서.\n정리와 분류는 결국 데이터를 다루는 사람, 데이터 소프트웨어를 만드는 개발자 둘 모두에게 있어 경쟁력이자 기본이라고 생각한다. 어떻게 효율적으로 정리를 할 것인지 매번 고민한다.","title":"정리는 비움으로, 그리고 마음부터"},{"content":"행렬 미분학 (differential matrix calculus) 에 대한 문서를 읽다가 이런 글귀를 발견했다.\n you need differential matrix calculus, the shotgun wedding of linear algebra and multivariate calculus.\n  여러분에겐, 선형 대수와 다변수 미적분의 샷건 웨딩을 치른 행렬 미분이 필요할 겁니다.\n 진도를 나가야 되는데, 돌연 \u0026lsquo;샷건 웨딩이 뭐지\u0026rsquo; 같은 쓸데없는 것에 꽂혀서 조금 알아봤다. \u0026lsquo;원치 않는 상황으로 인한 결혼\u0026rsquo; 이라고만 나와 있는데, 그렇다면 샷건은 누가 장전하고 있길래 저런 말이 붙은 걸까?\n아아, 그만 알아보자. (…)\n ","permalink":"https://interp.blog/%EC%83%B7%EA%B1%B4-%EC%9B%A8%EB%94%A9-shotgun-wedding/","summary":"행렬 미분학 (differential matrix calculus) 에 대한 문서를 읽다가 이런 글귀를 발견했다.\n you need differential matrix calculus, the shotgun wedding of linear algebra and multivariate calculus.\n  여러분에겐, 선형 대수와 다변수 미적분의 샷건 웨딩을 치른 행렬 미분이 필요할 겁니다.\n 진도를 나가야 되는데, 돌연 \u0026lsquo;샷건 웨딩이 뭐지\u0026rsquo; 같은 쓸데없는 것에 꽂혀서 조금 알아봤다. \u0026lsquo;원치 않는 상황으로 인한 결혼\u0026rsquo; 이라고만 나와 있는데, 그렇다면 샷건은 누가 장전하고 있길래 저런 말이 붙은 걸까?","title":"샷건 웨딩 (Shotgun Wedding)"},{"content":"회사가 고객에게 제공해야 할 것을 개념적으로 정의할 때 제품의 철학이라는 말을 사용한다. 제품의 시그니처이자 조직 내부를 움직이는 시금석이 되는데, 이걸 등한시하면 발생하는 문제에 대해 이야기하려고 한다.\n철학이라면 어떤 것을 말하는 걸까. \u0026lsquo;탐색 속도가 빨라야 한다, 로그인 없이도 정보 제공이 되어야 한다, 고객의 소리에 즉각적으로 귀를 기울인다\u0026rsquo; 같은 개념이 철학이지, \u0026lsquo;탐색 속도의 TPS 목표치, 로그인 폼의 형태, 고객이 원하는 것을 나열하는 것\u0026rsquo; 자체로 철학이라고 하지 않는다. 이건 요구사항이지, 철학이 아니다.\n그런데 후술한 구체적인 것들이 실제로 중요하기 때문에 (특히 고객이 원하는 것) 철학을 도외시하게 된다. 이래서는 안 된다. 조직이 하나로 뭉칠 수 있는 것은 그 철학에 있는데, 결정권자가 그걸 무시한 채 업무를 단장하는 순간 조직이 와해되는 것은 정말 시간문제다. 회사가 소규모이고, 창립멤버이며, 모두 새로운 이정표로 나아가는 데 동의를 하면 모르겠지만 조직이 커질수록 그런 함정에 빠지기 쉽다.\n당장의 이익이나 트렌드를 급히 따라가는 것은, 이유를 막론하고 숙고해야 할 문제이다. 단순히 예측되지 않은 미래에 대한 불안만으로 이야기하는 것이 아니다. 배의 크기가 클수록 키를 급하게 돌리면 배 자체에 문제가 발생하기 쉽다. 그걸 막기 위한 것이 조직이 동의한 (혹은 입사 때부터 배웠거나 인정했던) 가치인 것이다. 방향을 틀었다면, 조직 내부에서 큰 합의가 필요한데, 여기에 드는 비용을 무시할 수 없다. 그런데, 아무런 합의 없이 진행한다면 더 큰 비용을 감수하는 것이다. 다만, 문제가 터지기 전까진 보이지 않을 뿐.\n이걸 지켜내는 것이 정말 어려운 것임을 나는 안다. 초반에는 이걸 지킬 수 있었고, 유연하게 움직이기도 쉬웠을 것이다. 하지만 무작정 강요로 이끌어나간다면, 언젠가는 더 큰 이자를 내야 한다는 사실을 기억해야 할 것이다.\n","permalink":"https://interp.blog/%EC%A1%B0%EC%A7%81-%EC%B2%A0%ED%95%99%EA%B3%BC-%EA%B3%A0%EA%B0%9D%EC%9D%98-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD/","summary":"회사가 고객에게 제공해야 할 것을 개념적으로 정의할 때 제품의 철학이라는 말을 사용한다. 제품의 시그니처이자 조직 내부를 움직이는 시금석이 되는데, 이걸 등한시하면 발생하는 문제에 대해 이야기하려고 한다.\n철학이라면 어떤 것을 말하는 걸까. \u0026lsquo;탐색 속도가 빨라야 한다, 로그인 없이도 정보 제공이 되어야 한다, 고객의 소리에 즉각적으로 귀를 기울인다\u0026rsquo; 같은 개념이 철학이지, \u0026lsquo;탐색 속도의 TPS 목표치, 로그인 폼의 형태, 고객이 원하는 것을 나열하는 것\u0026rsquo; 자체로 철학이라고 하지 않는다. 이건 요구사항이지, 철학이 아니다.\n그런데 후술한 구체적인 것들이 실제로 중요하기 때문에 (특히 고객이 원하는 것) 철학을 도외시하게 된다.","title":"조직 철학과 고객의 요구사항"},{"content":"「완벽한 공부법」 과 「일취월장」 두 책에서 언급되는 \u0026lsquo;메타인지\u0026rsquo; 라는 개념이 있다. \u0026lsquo;자신의 생각에 대해 판단하는 능력\u0026rsquo; 이라는 것인데, 집단지성의 보고 나무위키에서는 다음과 같이 쪼개놓았다.\n 선언 지식 – 자신이 학습하는 부분에 대해서 얼마만큼의 지식과 능력을 가지고 있는지 아는 것. 절차 지식 – 어떤 일을 하는 데 얼마만큼의 노력과 시간이 들어갈 지 아는 것. 전략 지식 – 지식을 습득 할 때 어떤 방법을 선택해야 할지 아는 것.  사실 우등생은 다른 학생들보다 기억력이나 연산력이 월등히 좋거나 하진 않지만, 이 \u0026lsquo;메타인지\u0026rsquo; 능력에서 월등한 차이를 보인다고 한다. (정확히 기억나진 않지만) 어떤 실험을 하나 했는데, 학생들에게 제한 시간 안에 전부 외울 수 없는 영어단어들을 외우게 했다.\n그리고는 시험을 쳤다. 시험 결과는 우등생이나 다른 학생들이나 별다른 차이가 없었다. 그런데, 시험 후 채점을 하지 않고 몇 개나 맞췄을까라고 물어 본 결과는 달랐다. 우등생으로 분류된 학생들이 정확히 채점 결과와 일치하는 답을 내놨지만, 다른 학생들은 잘 모르겠다고 했단다.\n적을 아는 것도 중요하지만 또 나도 알아야 백전불태(百战不殆)다. 혹시 적만 알아가는데 지치진 않았는지? 시험 문제를 그저 풀기 위해 학원에 가서 유형 분석을 하고 인강을 듣는건 아닌지 생각해 볼 필요가 있다. 내가 어디가 부족한지를 알고, 부족한 부분을 채우려는 전략적인 행동이 중요하다.\n「완공」 을 읽다가 이 대목에서 눈에 띄었던 이야기는, 메타인지를 키우려면 결국 혼자만의 공부를 해야 한다는 거다. 우등생들은 보통 혼자 공부하는 시간을 적어도 세시간 이상 둔다고 한다.\n일도 그렇지 않을까. 회사에서 주어진 일을 처리하는 것도 밥벌이로서 중요한 일이지만, 업무와 무관하게 내가 부족한 점은 무엇인지, 내가 쌓아야 하는 것은 어떤 지식인지를 스스로 탐구할 시간이 필요하다고 생각한다. 그것이 업무를 도와주는 지식이건 향후의 커리어에 도움이 되는 것이건 간에 말이다.\n 책 「드라이브」 의 저자 다니엘 핑크의 TED 강연에서는, 협업 도구를 만드는 호주의 회사 Atlassian 을 소개한다. (내가 너무나 잘 쓰고 있는 Confluence 를 만든 회사이다.) 여기서는 업무 시간의 일정 부분을 떼서, 맡은 업무와 아무 상관없는 일을 해서 발표하는 시간을 가져 왔다고 한다. 거기서 놀라운 기능들이 나오기 시작했고, 회사는 이 비율을 20% 가까이 올렸다고 한다. 우리가 잘 알고 있는 구글 역시 이런 방식으로 새로운 기능을 자율적으로 얻을 수 있었고, Gmail 과 같은 놀라운 앱이 나온 것이다.\n이런 법칙을 개인에게도 적용해서, 외부의 과제를 잠시 내려놓고 내가 부족한 것은 없는지, 내가 비효율적으로 했거나 잘못 가고 있는 것은 아닌지 살펴보고 행동하는 시간을 가지는 것이 중요하지 않을까.\n(여담으로, 위의 강연은 양초 문제, 위키피디아의 성공 등과 같은 흥미로운 이야기를 하니 한번 보길 권한다.)\n","permalink":"https://interp.blog/%EB%A9%94%ED%83%80%EC%9D%B8%EC%A7%80-%EC%A0%81%EC%9D%84-%EC%95%8C%EA%B8%B0-%EC%A0%84%EC%97%90-%EB%82%98%EB%A5%BC-%EC%95%8C%EC%9E%90/","summary":"「완벽한 공부법」 과 「일취월장」 두 책에서 언급되는 \u0026lsquo;메타인지\u0026rsquo; 라는 개념이 있다. \u0026lsquo;자신의 생각에 대해 판단하는 능력\u0026rsquo; 이라는 것인데, 집단지성의 보고 나무위키에서는 다음과 같이 쪼개놓았다.\n 선언 지식 – 자신이 학습하는 부분에 대해서 얼마만큼의 지식과 능력을 가지고 있는지 아는 것. 절차 지식 – 어떤 일을 하는 데 얼마만큼의 노력과 시간이 들어갈 지 아는 것. 전략 지식 – 지식을 습득 할 때 어떤 방법을 선택해야 할지 아는 것.  사실 우등생은 다른 학생들보다 기억력이나 연산력이 월등히 좋거나 하진 않지만, 이 \u0026lsquo;메타인지\u0026rsquo; 능력에서 월등한 차이를 보인다고 한다.","title":"메타인지 – 적을 알기 전에 나를 알자"},{"content":"맡은 일을 하려면 쭉쭉 할 수 있을 것 같은데, 그럴 의지가 텅 비어버린 것 같다. 이 의지라는 것은 커피나 술 같은 것으로 긴급 보충이 가능하겠지만 그러기도 싫다. 그냥, 삼일절과 토요일 사이의 한가로운 근무일을 몇 가지 단상으로 때우다 보면 고것이 조금 고여있지 않을까? 그걸로 다시 일을 재개하겠노라 다짐하면서 블로그에 글을 하나 더 얹어 본다.\n어떻게 살 것인가? 라는 주제에 대해 이야기한 적이 있는데, 주변 사람들에게 긍정적인 영향을 줄 수 있는 사람이 되고 싶구나 라고 문득 생각난 적이 있다. 누군가에게 도움을 주고 웃어도 주고 들어도 주는. 그래서 처음에는 웃는 연습을 하고 지식을 채웠었다. (그것이 전문적인 것이던 가십거리가 되었던 간에) 그런데 이상했다. 여전히 날 찾는 사람이 별로 없는 것 같았다. 뭐가 문제지? 아, 마케팅을 잘 못했구나. 1인 기업이니 셀프 마케팅이니 그런 개념을 잊고 있었구나, 라고 생각했었다. 며칠 전까지는.\n마케팅 같은 거창하고 전문적인 개념으로 이 문제를 대하면 피로감이 몰려왔다. 와이프의 선배는 인맥을 관리하기 위해 분기에 한 번씩 아무런 일이 없는데도 주변 사람에게 전화를 한다고 했다. 아무런 일이 없는데도 말이다. 시시껄렁한 말이 오가면 그대로 통화는 끝난다. 이 이야길 처음 들었을 때도 비슷한 피곤이 느껴졌다. 왜 그래야 하지? 저 선배는 마케팅을 참으로 잘 하는구나.\n그런데 완전히 잘못 생각하고 있었단 생각이 들었다. 도움을 필요로 하는 사람은 \u0026lsquo;도와달라\u0026rsquo; 고 말하는 경우가 거의 없다. 처한 환경이 극단적인 경우이거나 술에 취했거나 한다면 조금 이야기가 다르겠지만, 대개는 도움을 줄 사람이 아주 명확한데다 질문하기가 거리낌이 없는 상태라야 저 말이 나온다. 그런데, 도움을 줄 사람이 명확한 경우도 거의 없고, 그 사람이 호의적으로 나올지도 모른다면? 반대로, 호의는 가지고 있는데 뭘 도와줘야 할지 모르겠다면?\n어떤 사람에게 도움이 되고자 한다면, 그 \u0026lsquo;사람\u0026rsquo; 이라는 것이 특정 타겟이 아닌 주변 사람 전부를 의미하는 거라면 접근법이 완전히 달라져야 한다. 내 문에 노크를 하며 도와달라고 말할 때 까지 기다려서도 안 되고, 주변인들이 필요해 보이는 것을 미리 준비하려고 해도 안 된다. 나도 그 사람에게 도움이 될지 안 될지 모르고, 그 사람도 나를 필요로 하는지 그렇지 않은지 모른다.\n그러니 먼저 가서, 위의 그 선배가 한 것처럼 시답잖은 이야기를 늘어놓으며 나의 존재를 알린다. 그 과정이 불편하다면 어쩔 수 없다. 하지만 적어도 그대가 뭘 필요로 하고 내가 뭘 해 줄 수 있는지 알아볼 기회가 생긴다. 그리고 내가 할 수 있는 일을 찾아서 도와줘라. 고민을 들어주고 웃어줘라. 뭔가 더 준비하지 말고, 갖춰진 상태에서 최대한 도와줘라.\n설령 도움이 안 되더라도, 적어도 나의 호의는 그대가 느낄 수 있게.\n다시 일을 시작해야겠다.\n","permalink":"https://interp.blog/%EB%A8%BC%EC%A0%80-%EB%8B%A4%EA%B0%80%EA%B0%80-%EB%8F%84%EC%99%80%EC%A3%BC%EA%B8%B0/","summary":"맡은 일을 하려면 쭉쭉 할 수 있을 것 같은데, 그럴 의지가 텅 비어버린 것 같다. 이 의지라는 것은 커피나 술 같은 것으로 긴급 보충이 가능하겠지만 그러기도 싫다. 그냥, 삼일절과 토요일 사이의 한가로운 근무일을 몇 가지 단상으로 때우다 보면 고것이 조금 고여있지 않을까? 그걸로 다시 일을 재개하겠노라 다짐하면서 블로그에 글을 하나 더 얹어 본다.\n어떻게 살 것인가? 라는 주제에 대해 이야기한 적이 있는데, 주변 사람들에게 긍정적인 영향을 줄 수 있는 사람이 되고 싶구나 라고 문득 생각난 적이 있다.","title":"먼저 다가가 도와주기"},{"content":"방향키 이동이 너무 느리다기 보다는, 방향키 한 번 누를 때마다 개체가 1픽셀씩 이동하는 것 처럼 답답한 상황일 때 해결 방법이다.\n 보기 탭으로 표시 항목에서 \u0026lsquo;확장 아이콘\u0026rsquo;이 아주 작게 보인다. \u0026lsquo;눈금 및 안내선\u0026rsquo; 이란 제목의 창이 뜨며, 여기서 \u0026lsquo;개체를 눈금에 맞춰 이동\u0026rsquo;  을 클릭한다.  끝이다. 참고로 개체 이동 간격을 제어하려면 (3) 번에서 눈금 간격을 조정하면 된다!\n","permalink":"https://interp.blog/powerpoint-%EC%97%90%EC%84%9C-%EB%B0%A9%ED%96%A5%ED%82%A4-%EC%9D%B4%EB%8F%99%EC%9D%B4-%EB%84%88%EB%AC%B4-%EB%8A%90%EB%A6%B4-%EB%95%8C/","summary":"방향키 이동이 너무 느리다기 보다는, 방향키 한 번 누를 때마다 개체가 1픽셀씩 이동하는 것 처럼 답답한 상황일 때 해결 방법이다.\n 보기 탭으로 표시 항목에서 \u0026lsquo;확장 아이콘\u0026rsquo;이 아주 작게 보인다. \u0026lsquo;눈금 및 안내선\u0026rsquo; 이란 제목의 창이 뜨며, 여기서 \u0026lsquo;개체를 눈금에 맞춰 이동\u0026rsquo;  을 클릭한다.  끝이다. 참고로 개체 이동 간격을 제어하려면 (3) 번에서 눈금 간격을 조정하면 된다!","title":"Powerpoint 에서 방향키 이동이 너무 느릴 때"},{"content":"gdb/ddd 에서 commands 를 사용하면 간편하게 breakpoint 의 상태를 출력할 수 있다. 물론 다양하게 응용이 가능하겠지만, 매뉴얼에서 제시한 케이스가 굉장히 편해서 따로 정리한다.\n참고 : 매뉴얼\nBreakpoint 상황을 출력하기 위 코드에서 if 문에 breakpoint 를 걸고, 할당받은 시작 주소와 그 크기를 보고자 한다. 한두번 발생하는 거라면 breakpoint 를 걸어 둔 다음 print 나 graph display (ddd 전용) 으로 띄워서 관찰하면 된다. 그런데 이게 100번 200번이면 하염없이 엔터를 치게 된다.\n이럴 때 다음과 같이 입력한다.\n이러고 cont 를 날리면.. breakpoint 에서 멈추는 대신 해당 command 가 수행된다! 즉, 계속해서 주소와 할당 크기가 출력된다. 아주 편하다…\nCall Stack 보기 일종의 응용인데, commands 내부에는 우리가 흔히 쓰는 명령어를 입력하면 된다.\nCommands 의 초기화 commands 명령어를 입력한 다음, 바로 end 로 끝내면 된다.\n","permalink":"https://interp.blog/gdb-commands-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0/","summary":"gdb/ddd 에서 commands 를 사용하면 간편하게 breakpoint 의 상태를 출력할 수 있다. 물론 다양하게 응용이 가능하겠지만, 매뉴얼에서 제시한 케이스가 굉장히 편해서 따로 정리한다.\n참고 : 매뉴얼\nBreakpoint 상황을 출력하기 위 코드에서 if 문에 breakpoint 를 걸고, 할당받은 시작 주소와 그 크기를 보고자 한다. 한두번 발생하는 거라면 breakpoint 를 걸어 둔 다음 print 나 graph display (ddd 전용) 으로 띄워서 관찰하면 된다. 그런데 이게 100번 200번이면 하염없이 엔터를 치게 된다.\n이럴 때 다음과 같이 입력한다.","title":"gdb commands 이용하기"},{"content":"Intel VTune 으로 Memory Bandwidth 를 분석하려면, 분석할 수 있는 커널 드라이버를 로딩시켜야 한다. (참고로 메모리 분석은 리눅스에서만 가능하다.) 해당 작업을 하지 않고 \u0026lsquo;General Exploration \u0026gt; Analyze memory bandwidth\u0026rsquo; 를 체크하면 엄한 경고창이 반길 것이다.\n이 문서를 참고해도 좋지만, VTune 이 설치된 경로에서 sepdk/src/README.txt 를 보는 게 더 쉽다. 이 내용을 요약하면,\n 커널 환경변수를 체크한다. 프로파일링이 가능하고 모듈 로딩이 가능해야 한다.  CONFIG_MODULES=y CONFIG_MODULE_UNLOAD=y CONFIG_PROFILING=y   커널 드라이버를 컴파일시킬 헤더파일이 필요하다. Linux 배포판에 따라, 커널 개발용 패키지를 내려받아 설치한다. (언급한 Linux 배포판이 없으면 소스를 직접 받아둔다.)  Redhat 5/Fedora/CentOS : yum install kernel-devel Ubuntu/Debian : apt-get install build-essential linux-headers-`uname-r`   VTune이 필요로 하는 커널 드라이버를 컴파일하고 로드시킨다.  cd ${VTune Directory}/spedk/src ./build_driver (이 때 2번에서 설치한 커널 헤더파일의 위치를 정확히 입력해야 한다.) ./insmod-sep3     ","permalink":"https://interp.blog/vtune-memory-bandwidth/","summary":"Intel VTune 으로 Memory Bandwidth 를 분석하려면, 분석할 수 있는 커널 드라이버를 로딩시켜야 한다. (참고로 메모리 분석은 리눅스에서만 가능하다.) 해당 작업을 하지 않고 \u0026lsquo;General Exploration \u0026gt; Analyze memory bandwidth\u0026rsquo; 를 체크하면 엄한 경고창이 반길 것이다.\n이 문서를 참고해도 좋지만, VTune 이 설치된 경로에서 sepdk/src/README.txt 를 보는 게 더 쉽다. 이 내용을 요약하면,\n 커널 환경변수를 체크한다. 프로파일링이 가능하고 모듈 로딩이 가능해야 한다.  CONFIG_MODULES=y CONFIG_MODULE_UNLOAD=y CONFIG_PROFILING=y   커널 드라이버를 컴파일시킬 헤더파일이 필요하다.","title":"Intel VTune Memory Bandwidth 분석하기"},{"content":"Office 2016 부터인지 모르겠지만, 커서가 부드럽게 움직이는 애니메이션이 추가되었다. 실제 입력 속도는 같을지 모르겠는데, 문서 작업을 하고 있자니 조금 답답한 느낌이 들었다. 조금 느리게 입력되는 느낌?\n그래서 이걸 끌 수 있는 방법을 두 가지 찾았는데, 하나는 레지스트리를 수정하는 것이라 귀찮았다. 다른 하나는 그 것보단 간단하다. 아래 스크린샷 순서대로 따라가 체크를 해제하면 된다.\n 제어판 \u0026gt; 시스템으로 들어간 다음, 고급 시스템 설정으로 들어간다. 고급 탭에서, 성능 항목에 \u0026lsquo;설정…\u0026rsquo; 을 클릭한다. \u0026lsquo;시각 효과\u0026rsquo; 탭에서, 창의 제어 및 요소에 애니메이션 효과 추가 항목의 체크를 해제한다. 그리고 확인.  ","permalink":"https://interp.blog/office-2016-%EC%BB%A4%EC%84%9C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EB%81%84%EA%B8%B0/","summary":"Office 2016 부터인지 모르겠지만, 커서가 부드럽게 움직이는 애니메이션이 추가되었다. 실제 입력 속도는 같을지 모르겠는데, 문서 작업을 하고 있자니 조금 답답한 느낌이 들었다. 조금 느리게 입력되는 느낌?\n그래서 이걸 끌 수 있는 방법을 두 가지 찾았는데, 하나는 레지스트리를 수정하는 것이라 귀찮았다. 다른 하나는 그 것보단 간단하다. 아래 스크린샷 순서대로 따라가 체크를 해제하면 된다.\n 제어판 \u0026gt; 시스템으로 들어간 다음, 고급 시스템 설정으로 들어간다. 고급 탭에서, 성능 항목에 \u0026lsquo;설정…\u0026rsquo; 을 클릭한다. \u0026lsquo;시각 효과\u0026rsquo; 탭에서, 창의 제어 및 요소에 애니메이션 효과 추가 항목의 체크를 해제한다.","title":"Office 2016 커서 애니메이션 끄기"},{"content":"Java? 전통의 APM, Node.js 모두 한 걸음 정도는 자신있게 뗄 수 있는 (?) 수준이라고 생각하지만, 갑작스런 Java Web Application 도전이라니.\n바깥 세상(?) 에선 아직도 Java 개발자를 찾는 것이 현실이다. 이제 그것을 대비하는 차원이다. Java 하나만 가지고 대부분의 어플리케이션 개발에 비빌 수 있기 때문이기도 하다. (개인적으로, 이런 대중성이 Java 개발자의 가치를 떨어뜨린다고 전혀 생각하지 않는다. Java 개발자는 많지만, 좋은 Java 개발자를 찾는 것은 전혀 다른 문제라고 생각하니까.)\n입문서 구입 단순히 \u0026lsquo;Spring 기반으로 웹 어플리케이션을 만들어요\u0026rsquo; 라는 말만 듣고 Spring 입문서! 를 찾아 헤매기 시작했다. 두 권이 있었는데, 하나는 초보 웹 개발자를 위한 스프링 4 프로그래밍 입문 이었고, 다른 하나는 토비의 스프링 3.1 이었다. Spring 에 관해선 줏어들은 게 전부여서, 개념부터 다지고 들어가야 했기에 두꺼운 세트를 뒤로하고 입문책을 먼저 구입하게 되었다. 하지만 이것도 결코 얇지 않다.\nTomcat? 환경 설정부터 흠, 제대로 짚고 가야 할 것이 생겼다. Apache Tomcat 을 설정해야 한단다. 어릴 적에도 APM 만 죽어라 팠기 때문에, PHP는 익숙해도 JSP는 쓸 일이 거의 없었다. 톰캣은 그 때 마주했던 고양이 아이콘(?) 정도로만 알고 있었는데, 알아보니 Java Web Application WAS 에서는 가장 많이 쓰이는 것이라더라. 이참에 친해질 필요가 있겠다.\nMaven? 저자는 책 전반에 걸쳐 Maven Project 를 쓸 것이라 한다. Eclipse Project 도 같이 제공한다는 말로 봐선, 비슷한 개념일까? Apache Maven 을 간단하게 이해해보려 했더니, Node.js 의 npm, Ruby의 gem 같은 건가? 싶었는데, 오히려 아니란다. 이 그림 한방으로 어떤 포지션에 있는지 이해할 수 있었다.\nmake의 Java 버전이 ant 인데, 여기서 Dependency Management 와 Declarative Form 을 갖추면서 Report/Documentation 까지 지원하는 프로젝트 관리 도구인 것이다.\n참고로, 아래 Spring Project 에는 Maven 외에도 Gradle 을 제공한다. (그림에서도 Finalist? 라고 뜨지만) Gradle 에서 Maven 을 비교한 화면을 보면 Performance 하나만으로 잘 광고하고 있는 걸 볼 수 있다.\nAnt, Maven, Gradle 을 비교한 글 역시 굉장히 많다. 이 주제는 아무것도 모르면서 더 깊게 내려가지 말고, 조금 정착이 된 다음에 따로 정리해서 포스팅하는 것이 좋겠다.\nSpring? 가장 중요한 걸 놓치고 갈 뻔 했다. Spring 은 Spring Framework 를 줄여서 말하기도 하고 Spring 모든 프로젝트를 통틀어 말하기도 한다. (프로젝트 관련해서는 여기를 그냥 참고하고 넘어간다.) Java 오픈 소스 프로젝트이며, 애플리케이션 개발에 대한 프레임워크이다. 다시 말하면, Spring Framework 는 웹 개발을 위한 것이 아니다. 웹 개발을 위한 프로젝트를 제공하는 프레임워크인 셈이며, 다른 영역의 개발을 위한 프로젝트도 있다고 하더라. 그런 건 천천히 알아봐도 좋겠다. (익숙해지면, Spring Data를 개인적으로 따로 보고 싶다.)\n본격적으로 실습하고 정리할 것을 다음 포스팅에서 이어 쓰도록 하겠다. (그런데 MEAN 가계부 프로젝트도 소스 단장해서 GitHub에 올리면서 포스팅 해야 하는데.. 힘내자!)\n","permalink":"https://interp.blog/java-web-application-%EC%9E%85%EB%AC%B8-1-%EC%A4%80%EB%B9%84%EC%9A%B4%EB%8F%99/","summary":"Java? 전통의 APM, Node.js 모두 한 걸음 정도는 자신있게 뗄 수 있는 (?) 수준이라고 생각하지만, 갑작스런 Java Web Application 도전이라니.\n바깥 세상(?) 에선 아직도 Java 개발자를 찾는 것이 현실이다. 이제 그것을 대비하는 차원이다. Java 하나만 가지고 대부분의 어플리케이션 개발에 비빌 수 있기 때문이기도 하다. (개인적으로, 이런 대중성이 Java 개발자의 가치를 떨어뜨린다고 전혀 생각하지 않는다. Java 개발자는 많지만, 좋은 Java 개발자를 찾는 것은 전혀 다른 문제라고 생각하니까.)\n입문서 구입 단순히 \u0026lsquo;Spring 기반으로 웹 어플리케이션을 만들어요\u0026rsquo; 라는 말만 듣고 Spring 입문서!","title":"Java Web Application 입문 (1) 준비운동"},{"content":"Gitlab의 External_Url 을 실제 서버 주소와 다르게 설정할 때엔, 실제 nginx 에도 해당 도메인으로 접근할 수 있도록 설정해야 하는 게 맞다. 그렇지 않으면, 첨부파일과 아바타 이미지가 모두 깨져나온다. 하지만 그러기 전에 Gitlab 차원에서 상대 경로로 아바타를 출력할 수 있도록 수정하는 방법 \u0026lsquo;도\u0026rsquo; 있으니 편법으로 수정했다.\n아바타 상대 경로 설정 /opt/gitlab/embedded/service/gitlab-rails/app/models/concerns/avatarable.rb 파일에서 절대 경로로 수정하는 코드가 있는데, url_base 에 덧붙이는 코드들을 전부 주석처리하면 된다.\n당연히 gitlab-ctl reconfigure \u0026amp;\u0026amp; gitlab-ctl restart 를 해 줘야 한다.\n참고 : https://gitlab.com/gitlab-org/gitlab-ce/merge_requests/11001/diffs#note_28659864\n첨부파일 상대 경로 설정 단서가 없어서 맨땅에 헤딩하듯이 뒤지고 다녔다. Markdown 언어에서 링크를 담당하는 라이브러리가 있는데, 이름이 \u0026lsquo;banzai\u0026rsquo; 이다 (…) 무슨 생각으로 이름을 지은건지 도저히 모르겠지만여기를 수정해야 한다.\nfilter/upload_link_filter.rb 를 보면, build_url() 이란 함수가 있다. 여기서 Geo node 여부에 따라 base_path 를 설정하는 코드가 있는데, 여기서 원하는 내부 주소로 변경하면 된다.\nGitlab 11 로 버전이 업그레이드 되면서 해당 파일이 삭제되고, absolute_link_filter.rb 와 external_link_filter.rb , relative_link_filter.rb 가 남아있다. 여기 있는 Gitlab.config.gitlab.url (relative…rb 의 경우 Gitlab.config.gitlab.base_url) 을 원하는 주소로 바꿔주면 가능하다.\n","permalink":"https://interp.blog/gitlab-%EC%95%84%EB%B0%94%ED%83%80-%EC%83%81%EB%8C%80-%EA%B2%BD%EB%A1%9C-%EC%84%A4%EC%A0%95/","summary":"Gitlab의 External_Url 을 실제 서버 주소와 다르게 설정할 때엔, 실제 nginx 에도 해당 도메인으로 접근할 수 있도록 설정해야 하는 게 맞다. 그렇지 않으면, 첨부파일과 아바타 이미지가 모두 깨져나온다. 하지만 그러기 전에 Gitlab 차원에서 상대 경로로 아바타를 출력할 수 있도록 수정하는 방법 \u0026lsquo;도\u0026rsquo; 있으니 편법으로 수정했다.\n아바타 상대 경로 설정 /opt/gitlab/embedded/service/gitlab-rails/app/models/concerns/avatarable.rb 파일에서 절대 경로로 수정하는 코드가 있는데, url_base 에 덧붙이는 코드들을 전부 주석처리하면 된다.\n당연히 gitlab-ctl reconfigure \u0026amp;\u0026amp; gitlab-ctl restart 를 해 줘야 한다.","title":"Gitlab 아바타/첨부파일 상대 경로 설정"},{"content":"매니저 자리에 처음 앉았을 때와 다르게, 언젠가부터 남과 대화하는 것을 기피하는 내 모습을 자주 발견하게 되었다. 의욕이 넘쳐서 이거저거 캐묻고 알아가던 때가 있었는데, 그러면서 반발도 부딪히고 구성원들이 나만큼 의욕적이지 않은 것 같고, 의심하고 실망하고를 반복하다 보니 이렇게 된 것 일까. \u0026lsquo;지쳤다\u0026rsquo; 나 \u0026lsquo;질렸다\u0026rsquo; 라고 해도 괜찮을 수준이었다.\n그런데 대화를 그만두면 더 좋지 않은 것 같다. 그냥 시간을 버리는 것 같다. 대화가 멈추면, 서로가 원하는 것을 모르고 각자 하고 싶은 대로 흘러간다.\n대화를 해서 손해를 보는 경우도 있다. 감정이 상할 수도 있다. 하지만 그 차이를 나도 양보하고 너도 양보해서 맞춰야 한다. 대화를 자주 해서 업무 방해가 일어난다거나, 쓸데없는 일이라고 여겨질 수도 있겠는데… 서로 대화하지 않고 흘러가게 두는 것이, 더 큰 손해를 끼칠 가능성이 높다고 생각한다.\n그래서 오늘도, 대화하기 싫어하는 나를 달래가며 다른 사람들에게 말해야 할 가장 적절한 질문과 주제를 찾고 있다.\n","permalink":"https://interp.blog/%EB%8C%80%ED%99%94%EB%8A%94-%ED%95%84%EC%9A%94%ED%95%B4/","summary":"매니저 자리에 처음 앉았을 때와 다르게, 언젠가부터 남과 대화하는 것을 기피하는 내 모습을 자주 발견하게 되었다. 의욕이 넘쳐서 이거저거 캐묻고 알아가던 때가 있었는데, 그러면서 반발도 부딪히고 구성원들이 나만큼 의욕적이지 않은 것 같고, 의심하고 실망하고를 반복하다 보니 이렇게 된 것 일까. \u0026lsquo;지쳤다\u0026rsquo; 나 \u0026lsquo;질렸다\u0026rsquo; 라고 해도 괜찮을 수준이었다.\n그런데 대화를 그만두면 더 좋지 않은 것 같다. 그냥 시간을 버리는 것 같다. 대화가 멈추면, 서로가 원하는 것을 모르고 각자 하고 싶은 대로 흘러간다.","title":"대화는 필요해"},{"content":"Git 기반 프로세스 도구인 Gitlab 은 오픈소스이기 때문에 Community Edition 을 쓰건, Enterprise Edition 을 쓰건 상관없이 맘대로 수정해서 사용이 가능하다. 물론 적절한 감(?)으로 수정할 곳을 찾아야 하는 번거로움은 있다. 여기서는 Gitlab에서 문서 작성에 필요한 Markdown 의 Parser 부분을 수정하기 위한 방법을 정리해 둔다. Ruby 개발자가 아니라서 전체 빌드 순서가 정공법처럼 보이진 않겠지만.\nGitlab의 Markdown Parser는 Redcarpet 을 사용한다. 아마 Jekyll 도 기본적으로 Redcarpet 을 사용하는 것으로 알고 있다. 만약 Ruby의 Redcarpet 을 Markdown Parser 로 쓰는 경우라면 똑같이 적용이 가능하다.\n디렉토리 경로는 Gitlab 10.x 기준으로 설명한다.\nParser C 파일 수정하기 /opt/gitlab/embedded/lib/ruby/gems/2.3.0/gems/redcarpet-3.4.0/ 으로 들어가면 Redcarpet의 소스코드가 존재한다. 여기서 ext/redcarpet 디렉토리가 Parser C 파일들이 위치한 곳이다.\n내가 수정하고 싶은 것은 \u0026lsquo;엔터 키를 두번 쳐야 (혹은 줄 끝에 스페이스를 2개 이상 줘야) 줄바꿈이 되는 불편함\u0026rsquo; 을 해소하고 싶었다. markdown.c 파일을 보니 char_linebreak() 라는 함수가 존재한다. 여기서 해당 부분을 주석처리했다.\n라이브러리 생성/복사 수정이 끝나면 반드시 ext/redcarpet 디렉토리에서 make 를 수행해 주도록 하자. 그러면 Shared Library 파일인 redcarpet.so 이 생성된다.\n이 파일을, 다음 경로에 모두 복사해주도록 하자.\n /opt/gitlab/embedded/lib/ruby/gems/2.3.0/extensions/x86_64-linux/2.3.0/redcarpet-3.4.0/ /opt/gitlab/embedded/lib/ruby/gems/2.3.0/gems/redcarpet-3.4.0/lib/  Gitlab 재부팅 대망의 재부팅이 남았다.\ngitlab-ctl reconfigure \u0026amp;\u0026amp; gitlab-ctl restart 를 실행시키면 반영이 된다!\n Gitlab 11.x 이후 : Commonmark 11.x 부터는 Redcarpet 이 아니라 Commonmark 를 기본 파서로 사용한다. 구조가 달라져서 찾는게 귀찮아서 그렇지, 기본 원리는 비슷하다. 2칸 이상의 space 를 준 채로 줄바꿈하게 되면 CMARK_NODE_LINEBREAK, 그렇지 않고 줄바꿈하면 CMARK_NODE_SOFTBREAK 상태로 전이된다.\n옵션을 쓸 수 있다면 좋겠지만, 본인은 마음이 급한지라 참고할 만한 소스코드만 붙이고 도망가도록 한다. html.c:283 부터다. 여기서 직접 line break 를 하도록 강제했다.\n이렇게 하고 make 를 치면.. 어? 빌드가 안 된다.\n당황하지 말고, 보기 싫지만banzai filter 가 위치한 곳의 ruby 파일을 수정하면 된다. 여기에서 사실 옵션 조절이 가능하다. 파일 위치는 /opt/gitlab/embedded/service/gitlab-rails/lib/banzai/filter/markdown_engines/common_mark.rb 이다.\n반드시, Gitlab 재부팅을 잊지말자!\n한 가지 아쉬운 점은(?) 일부러 soft break 를 시도하는 경우에, 내부에서 line break 까지 겹쳐서 인식하기 때문에 결론적으로 \u0026lt;br/\u0026gt; 이 두번 붙는 사태가 일어난다. 어쩔 수 없이 commonmark 를 한번 빌드하는 수밖에 없나.. 하는 생각이 들고 있다.\n","permalink":"https://interp.blog/gitlab-markdown-parser-%EB%B0%94%EA%BE%B8%EA%B8%B0/","summary":"Git 기반 프로세스 도구인 Gitlab 은 오픈소스이기 때문에 Community Edition 을 쓰건, Enterprise Edition 을 쓰건 상관없이 맘대로 수정해서 사용이 가능하다. 물론 적절한 감(?)으로 수정할 곳을 찾아야 하는 번거로움은 있다. 여기서는 Gitlab에서 문서 작성에 필요한 Markdown 의 Parser 부분을 수정하기 위한 방법을 정리해 둔다. Ruby 개발자가 아니라서 전체 빌드 순서가 정공법처럼 보이진 않겠지만.\nGitlab의 Markdown Parser는 Redcarpet 을 사용한다. 아마 Jekyll 도 기본적으로 Redcarpet 을 사용하는 것으로 알고 있다. 만약 Ruby의 Redcarpet 을 Markdown Parser 로 쓰는 경우라면 똑같이 적용이 가능하다.","title":"Gitlab Markdown Parser 바꾸기"},{"content":"oh-my-zsh 테마 작업을 agnoster 를 기반으로 고쳐서 사용 중이다. 그런데 주석을 보면 다음 색깔만 지원하는 것 처럼 나온다.\n white, black, red, blue, green, yellow, cyan, magenta  사전에 정의된 것 외의 색상을 설정하려면, 다음 작업이 필요하다.\n  터미널 종류가 xterm-256color 여야 한다. (xterm 이면 색깔을 정해도 제대로 출력이 안된다.)\n  oh-my-zsh 에서, %{%K{123}%} 또는 %{%F{123}%} 를 가지고 색깔을 찾는다.\n이 때 123 대신 0~255 를 입력한다.\n  0~255 숫자와 대응되는 색상을 찾아야 하는데, 여기를 참고하면 도움이 된다.\n  ","permalink":"https://interp.blog/oh-zsh-%EC%83%89%EA%B9%94-%EA%B3%A0%EB%A5%B4%EA%B8%B0/","summary":"oh-my-zsh 테마 작업을 agnoster 를 기반으로 고쳐서 사용 중이다. 그런데 주석을 보면 다음 색깔만 지원하는 것 처럼 나온다.\n white, black, red, blue, green, yellow, cyan, magenta  사전에 정의된 것 외의 색상을 설정하려면, 다음 작업이 필요하다.\n  터미널 종류가 xterm-256color 여야 한다. (xterm 이면 색깔을 정해도 제대로 출력이 안된다.)\n  oh-my-zsh 에서, %{%K{123}%} 또는 %{%F{123}%} 를 가지고 색깔을 찾는다.\n이 때 123 대신 0~255 를 입력한다.\n  0~255 숫자와 대응되는 색상을 찾아야 하는데, 여기를 참고하면 도움이 된다.","title":"oh-my-zsh 색깔 고르기"},{"content":"이제 자기계발서들은, 목표에 대한 진척을 강요하거나 쥐어짜려는 설득을 더 이상 하지 않게 되었다. 아니면, 그런 글귀와 말을 사람들이 더 이상 찾지 않는 것일지도 모른다. 사람들이 열광하는 주제가, 맹목적인 믿음이나 노력을 채찍질하는 것에서 벗어나 자신에 대한 탐구로 옮겨가고 있는 것처럼 보인다. \u0026lsquo;어떻게\u0026rsquo; 라기 보다는 \u0026lsquo;왜\u0026rsquo; 에 좀 더 가까운 것 같다.\n\u0026lsquo;어떻게\u0026rsquo; 가 아닌, \u0026lsquo;왜\u0026rsquo; 조금만 시간을 거슬러 올라가도 공부에 대한 방법론, 단기간에 끝내기, 맹목적으로 바라보기, 노력은 배신하지 않는 등의 주제가 가득했다. 공부 잘 하면 좋고, 노력은 배신하지 않는 것도 동의한다. 그런데 그걸 왜 하냐고, 설마 남 좋으라고 하는건가? 그 흐름에 나를 넣어야 하는데, 그렇지 않다면 과연 자기계발이 맞는 걸까?\n최근 자기계발서의 내용들은 그렇지가 않다. 남 눈치보지 말자, 내 인생은 내가 책임진다, 모두가 날 좋아할 수는 없다, 뭐 이런 거다. 일종의 위로이자 응원이다. 베네딕트 컴베비치가 레터스라이브에서 매우 격앙된 어조로 낭독한 영상을 줄이면 \u0026lsquo;남에게 눈치보지 말고 그냥 해라고!' 라는 것이었다. 화난 듯 말하지만, 사실은 위로이자 응원이다. 남에게 눈치보고 있다는 것은, 말 그대로 내가 아닌 남이 원하는 삶을 살고 있는 것이다. 그냥 해보라는 말도, 뭘 하고 싶고 뭘 할 수 있는지 찾아서 하라는 것이다.\n내가 한 일은 남들도 다 할 수 있다 목 마른 사람이 우물을 파겠지만, 지금껏 우리는 우물을 어떻게 파느냐, 어디에 우물이 잘 나오느냐만 들었을 뿐이다. 정말 목이 마른지, 배가 고픈지, 잠이 오는지는 생각해보지 못한 게 아닐까. 다른 사람과 다른 \u0026lsquo;나\u0026rsquo; 이기 때문에.\n이런 장황한 이야기를 한 이유는 두 가지이다. 다른 모든 사람이 각자 누리고 있는 우물을 나도 파내서 마시기엔 시간이 부족하다는 점을 인정하기 위해, 그리고 나만의 특별함을 강조하기 위해서다. 살면서 느꼈던, 소중한 경험을 잘 간직하고 계속 행복할 수 있는 방법을 찾아나가는 것을, \u0026lsquo;어떻게\u0026rsquo; 라는 주위에 널린 해답에서는 찾지 말길 바란다.\n","permalink":"https://interp.blog/%EC%99%9C%EC%97%90%EC%84%9C-%EC%B0%BE%EB%8A%94-%ED%8A%B9%EB%B3%84%ED%95%9C-%EB%82%98/","summary":"이제 자기계발서들은, 목표에 대한 진척을 강요하거나 쥐어짜려는 설득을 더 이상 하지 않게 되었다. 아니면, 그런 글귀와 말을 사람들이 더 이상 찾지 않는 것일지도 모른다. 사람들이 열광하는 주제가, 맹목적인 믿음이나 노력을 채찍질하는 것에서 벗어나 자신에 대한 탐구로 옮겨가고 있는 것처럼 보인다. \u0026lsquo;어떻게\u0026rsquo; 라기 보다는 \u0026lsquo;왜\u0026rsquo; 에 좀 더 가까운 것 같다.\n\u0026lsquo;어떻게\u0026rsquo; 가 아닌, \u0026lsquo;왜\u0026rsquo; 조금만 시간을 거슬러 올라가도 공부에 대한 방법론, 단기간에 끝내기, 맹목적으로 바라보기, 노력은 배신하지 않는 등의 주제가 가득했다.","title":"‘왜’에서 찾는 특별한 나"},{"content":"제목은 다음 내용을 포함하고 있다.\n Windows 10 에서 지원하는 Linux Subsystem 기능에 대해 이야기한다. 잘 모르겠다면 이 글을 읽고 설치에 도전해 보자. 그런데 글 내용을 보면 이거랑 관련 없다. Babun, Mintty, Git on Bash, Putty 전부 포함이다 SSH에 접속한 서버에서 X11 Forwarding 을 받고 싶은 경우를 이야기한다. 단적으로, 접속한 서버에서 파이어폭스 브라우저를 실행하면 내 윈도우 화면에 브라우저 창이 실행되는 거다. 이걸 따로 이야기하고 싶지 않으니 Xming 이나 VcXsrv (추천) 을 참고해 설치해보자.  참고이 방법은 Client측 PC의 X Server로 접근하는 무식한 방법이므로, 일반 가정 PC에서 서버로 접속했을 때엔 사용할 수 없을 것 같다. 좀 더 알아보고 보충해야겠다.\n보충ssh_config 에서 X11ForwardTrusted 를 확인하지 않았었다. 이걸 설정하니까 Server에서 DISPLAY를 따로 설정하지 않아도 잘 된다? xauth generate 를 한번 더 해보긴 했는데.. 한번 더 실험이 필요하다.\nWindows에서 한 일 말하자면, 클라이언트 PC에서 한 일이다. 참고로 나는 Ubuntu 를 Linux Subsystem 으로 설치했는데, CentOS여도 상관없을 것이다.\n Xming 또는 VcXsrv 를 설치해서 실행시켰다. 트레이 아이콘에 \u0026lsquo;X\u0026rsquo; 라고 떠 있으면 완료. (이걸 X Server 라고 부른다) Ubuntu Console을 하나 열어서,/etc/ssh/ssh_config (sshd_config 가 아니다) 파일을 확인했다. 여기에서 ForwardX11 yes, ForwardX11Trusted yes 를 확인했다. (주석 처리되어 있다면 주석을 제거, sudo 권한 필요) SSH 접속을 하면, 다음 에러 메시지가 떠서 보기 싫었다. No xauth data; using fake authentication data for X11 forwarding.   그래서 다음과 같이 처리했다. \u0026lt;pre class=\u0026quot;brush: bash; title: ; notranslate\u0026quot; title=\u0026quot;\u0026quot;\u0026gt;$ xauth list # ~/.Xauthority 파일이 없었다!  $ xauth generate :0 . trusted # ~/.Xauthority 파일을 만들어준다고 한다.. (Optional) Xming 또는 VcXsrv 의 설치 디렉토리에 가면 X0.hosts라는 파일이 있다. 여기서 Server의 Hostname 또는 IP를 적어줘야 한다.  Server에서 한 일 직접 SSH로 접속하고 나서 설정해야 할 것을 적었다.\n /etc/ssh/sshd_config 에서 X11UseLocalHost 가 yes 로 되어 있거나, 활성화되어 있지 않아야 한다. 만약 no로 되어 있으면 yes 로 변경해야 한다. DISPLAY 값을 아예 Windows (클라이언트 PC) 의 Hostname 또는 IP 주소로 설정해버린다. export DISPLAY=192.168.0.xxx:0   참고로, 뒤에 :0 또는 :10 같이 여러 예제가 인터넷에 나도는데, Windows 에서 X 아이콘에 마우스를 가져다 대면 'Hostname:X.X' 라고 나올 것이다. X.X 를 저기에 쓰는 것이다. (나는 0.0 이라고 떠서 그냥 0만 적었다.)\u0026lt;/li\u0026gt; * firefox 를 실행해 보자.\u0026lt;/ol\u0026gt; 끝.  ","permalink":"https://interp.blog/x11-windows-linux-subsystem/","summary":"제목은 다음 내용을 포함하고 있다.\n Windows 10 에서 지원하는 Linux Subsystem 기능에 대해 이야기한다. 잘 모르겠다면 이 글을 읽고 설치에 도전해 보자. 그런데 글 내용을 보면 이거랑 관련 없다. Babun, Mintty, Git on Bash, Putty 전부 포함이다 SSH에 접속한 서버에서 X11 Forwarding 을 받고 싶은 경우를 이야기한다. 단적으로, 접속한 서버에서 파이어폭스 브라우저를 실행하면 내 윈도우 화면에 브라우저 창이 실행되는 거다. 이걸 따로 이야기하고 싶지 않으니 Xming 이나 VcXsrv (추천) 을 참고해 설치해보자.","title":"X11 on Windows Linux Subsystem"},{"content":"졸업프로젝트도 아니고, 기말고사 대신 치룬 텀프로젝트의 마지막을 장식할 윈도우 어플리케이션을 만들기 위해 배우려 했으나 문 앞에서 서성이기만 했던 바로 그 언어, C#을 당장 써먹어야 하는 상황이 발생했다. (이런 상황이 발생한 것이 참 안타깝긴 하지만) 배움의 기회로 삼는 수 밖에 없다.\ndotnet test 및 xUnit을 사용하여 .NET Core에서 C# 유닛 테스트라는 MS 문서를 기반으로 실습을 했는데, 여기서 중요한 것은, 내가 만들어야 하는 라이브러리의 Target Framework가 .NET Core 가 아니라 .NET Framework 4.0 이다. xUnit은 최소 .NET Framework 4.5 이상에서만 돌아간다. 그럼 나는 테스트를 못 하는 것인가?\n천만에. xUnit 프로젝트만 .NET Framework 4.5 로 두고, 라이브러리 프로젝트는 .NET Framework 4.0 으로 설정해서 테스트를 진행해 봤다. 대부분의 내용은 위의 문서를 요약한 것에 지나지 않지만, 사이사이에 Target Framework를 설정하는 부분에 대해 넣도록 하겠다.\n사전 준비 혹시나 해서 적어둔다. 다 필요없고 .NET Core SDK 를 설치해주자.\n .NET Framework 4.0, .NET Framework 4.5 SDK 가 설치되어 있어야 한다. (Visual Studio 설치하면서 같이 설치하는게 속편하다) .NET Framework 4.5 이후의 TargetFramework를 가져가는 경우엔 .NET Core SDK 를 설치하는 것으로 끝날지도 모른다는 어렴풋한 추측을 해 본다. (Target Framework를 수정한 다음 dotnet restore 를 하면?)  그리고 아래 실습은 Visual Studio 가 아니라 Powershell 에서 진행한다. 사내 빌드할 때 Visual Studio를 안 쓰기 때문이다. 단지 그 뿐이다..\n솔루션/프로젝트 준비  디렉토리를 하나 만든다. 여기서는 testSolution 라고 하자. dotnet new sln 을 실행한다. 솔루션 파일이 생성된다. 내부에 디렉토리를 하나 만든다. 여기서는 projLibrary 라고 하자. projLibrary 에 들어가서 dotnet new classlib 명령으로 프로젝트를 만든다.  \u0026lt;span style=\u0026quot;color: #3366ff;\u0026quot;\u0026gt;classlib\u0026lt;/span\u0026gt; 라고 입력하면 해당 프로젝트는 라이브러리를 생성하는 것이 된다.  다시 testSolution 디렉토리로 돌아와서, dotnet sln add projLibrary/projLibrary.csproj 를 입력한다. 이제 솔루션에 해당 프로젝트가 등록된다. testSolution내부에 테스트용 디렉토리를 하나 만든다. 여기서는 projTest 라고 하자. projTest 에 들어가서 dotnet new xuint 를 입력해 테스트용 프로젝트를 만든다.  \u0026lt;span style=\u0026quot;color: #800000;\u0026quot;\u0026gt;xuint\u0026lt;/span\u0026gt; 라고 입력하면, 해당 프로젝트는 테스트를 위한 것이 된다.  다시 testSolution 디렉토리로 돌아와서, dotnet sln add projTest/projTest.csproj 를 입력한다. 이제 솔루션에 해당 프로젝트가 등록된다. 마지막으로 테스트 프로젝트에 라이브러리 프로젝트를 참조할 수 있도록, 연결해야 한다. projTest 에 들어가서 dotnet add reference ../projLibrary/projLibrary.csproj 를 입력한다.  그러면 아래와 같이 디렉토리와 파일이 구성되어야 한다. (자동으로 생성되는 Class1.cs 는 제외했다.)\nTest Framework 수정 projLibrary 에 있는 projLibrary.csproj를 열어서 아래를 수정한다.\n만들고자 하는 프레임워크 버전을 명시하면 되고, 버전은 여기를 참고한다. 여러 개의 버전을 명시할 경우에는 세미콜론(;) 으로 구분하면 된다.\n역으로, projTest 에 있는 projTest.csproj 는 이렇게 수정해야 한다.\n기본적으로 netcore2.0 으로 설정되어 있을텐데, 이러면 net40 과 호환이 안되어서 참조조차 안되는 불상사가 발생한다. net45 또는 그 이상의 .NET Framework를 지정하되, netcore1.x 에 대응되는 버전으로만 지정하면 될 것으로 보인다.\n테스트 작성 projLibrary에서 Class1.cs 에 다음을 추가하자.\n아직 구현을 안 한 거다. 이제 projTest에서 Class1.cs에 다음을 추가한다\n테스트 다 끝났다. 이제 솔루션 디렉토리에서 dotnet test 를 힘차게 불러보자.\n에러가 날 것이다. 당연히 테스트 코드에서 result 값이 FALSE가 나오기를 기대하는데, 지금은 그냥 Exception 으로 떨어지기 때문이다.\nprojLibrary에서 IsPrime() 함수의 리턴을 FALSE로 바꿔주면 테스트가 성공하는 것을 확인할 수 있다.\n","permalink":"https://interp.blog/c-xunit-%EC%8B%A4%EC%8A%B5/","summary":"졸업프로젝트도 아니고, 기말고사 대신 치룬 텀프로젝트의 마지막을 장식할 윈도우 어플리케이션을 만들기 위해 배우려 했으나 문 앞에서 서성이기만 했던 바로 그 언어, C#을 당장 써먹어야 하는 상황이 발생했다. (이런 상황이 발생한 것이 참 안타깝긴 하지만) 배움의 기회로 삼는 수 밖에 없다.\ndotnet test 및 xUnit을 사용하여 .NET Core에서 C# 유닛 테스트라는 MS 문서를 기반으로 실습을 했는데, 여기서 중요한 것은, 내가 만들어야 하는 라이브러리의 Target Framework가 .NET Core 가 아니라 .NET Framework 4.","title":"C# xUnit 실습"},{"content":"Upgrade 8.x 로 쓰다가 10.x 로 업그레이드를 진행했다. 아니.. 그런데 Postgresql Database 버전이 다르다고? 알고보니 이렇게 대격변을 일으키면 안 되던 거였다. 그래서 겸사겸사 9.5.10 으로 다시 설치하니까 된다.\n gitlab-ctl reconfigure 를 설치 직후에 반드시 해 줘야 한다. 가끔 gitlab-ctl pg-upgrade 를 꼭 하라는 말이 있던데, 내가 해보니까 gitlab-ctl reconfigure 할 때 알아서 한다 (…) 했던 거 또 하는 느낌. gitlab-ctl restart 를 할 때 postgresql 이나 다른 곳에서 \u0026lsquo;down, up, want up\u0026rsquo; 이런 게 뜨면 서비스가 온전히 수행될 수 없는 상황이다. gitlab-ctl tail 을 실행시켜 로그를 뒤져봐야 한다. 에러가 났거나, 무한히 반복되는 메시지가 없는지 확인하자.  Runner 우리 회사 Gitlab 구조는 웹 서비스 주소와 내부 공유 주소가 다르다. (도메인을 거의 리다이렉트 비슷하게 해놨기 때문이기도 하지만) 비공개 저장소다 보니, 웹 접속은 외부에서 되었면서 Clone 은 똑같은 주소로 절대 받을 수 없게 해 놨다. 이게 Gitlab Runner 를 바보로 만들었다 (…)\nGitlab Runner는 .gitlab-ci.yml 의 구성에 상관없이, 선작업으로 해당 저장소를 Cloning 하거나 Fetching 하게 된다. (양자택일은 웹 페이지의 Runner 관리 페이지에서 설정이 가능하다.) 이건 Runner의 Executer를 Docker를 하던 Shell 을 하던 똑같다. 문제는 내가 언급했던 대로, 이 저장소 주소를 웹 주소에 기반해서 가져가기 때문에, 항상 실패했다는 것이다.\n짜증이 치밀 즈음, 아예 이 작업을 끌 수는 없을까 하고 봤더니… 역시나 답은 있었다.\n이렇게 두면, Runner의 옵션을 Cloning 으로 줬건 Fetching 으로 줬건 간에 하지 않는다.\n즉, 모든 작업을 온전히 CI 명령에 맡기는 것이다. 위험하기도 하고, 캐싱도 안 되고 약점이 많지만, 나는 상관이 없었다. 직접 내부 주소의 저장소로 접근해서 받아오면 그만!\nRepository 에 SSH Key 등록 그런데, 문제가 생겼다. 아래와 같이 \u0026lsquo;gitlab-runner\u0026rsquo; 사용자로 Runner Service를 등록하고, 실행시켰다고 가정하자.\n나는 Executer를 Shell 로 쓰고 있는데, 이 친구가 내부 저장소로 (그것도 SSH 주소로) 접근하려면… SSH Public Key를 넣어줘야 된다. 넣지 않으면 인증에서 실패한다. 그런데 Gitlab Runner 의 Shell 사용자는 위에서 보이는 것 처럼 \u0026lsquo;gitlab-runner\u0026rsquo; 인데.. 얘는 Gitlab 계정도 없는 가상 사용자다. 어떻게 Public Key를 등록할까?\nGitlab은, 각 사용자 계정의 SSH Public Key를 관리해 주기도 하지만 Project 별로 SSH Key를 등록할 수도 있다. Project 페이지의 Settings \u0026gt; Repository 에서 Deploy Keys 부분을 펼쳐보자. 그러면 익숙한 SSH Key 등록 폼이 나온다. 여기에, 아까 언급한 \u0026lsquo;gitlab-runner\u0026rsquo; 의 SSH Key를 등록하면 된다. (당연히 gitlab-runner 계정에서 SSH Key 생성을 해야한다.)\n그러면.gitlab-ci.yml 에 마구잡이로 'git clone git@~~~~:\u0026lt;user or group\u0026gt;/\u0026lt;project\u0026gt;.git' 이런 식으로 스크립트를 적어도 아주 잘 clone 되는 걸 확인할 수 있다!\nCreate New Branch 의 기본 Branch 바꾸기 Issue에서 Create New Branch (9.x 에서는 New Branch) 를 하면, Branch의 이름이 \u0026lsquo;421 – invalid table error\u0026rsquo; 이런 식으로 뜬다. 이슈 번호와 이슈 제목.\n그런데 내부적으로는 이슈 제목에 한글을 많이 써서 Branch 이름을 출력하고 싶지 않았다. 그리고 규격화된 이름 (ISSUE#XXXX) 으로 Branch를 생성하고픈 욕구가 치밀었다. (참고로 Push Rule 에서 Branch Naming Rule에 저렇게 규칙을 쓰고, Create New Branch 를 누르면 절대로 Branch가 생기지 않는다.)\nGitlab에 이미 #21143 으로 이슈가 등록되었고, 10.3 에서 업데이트가 된다지만… 이렇게 되면 사용자가 매번 Push Rule을 피하려고 Branch 이름을 일일이 쳐넣는 어처구니없는 상황이 계속된다. 그래서 코드를 찾아내서 고치는 편이 낫다고 생각했다.\nRuby는 쥐뿔도 모르지만 코드는 코드일 뿐.\n이슈에 대한 브랜치를 생성하는 작업은 이 Merge Request 에서 반영된 것이다. 여기 Diff를 쭉 봤더니 to_branch_name 이 눈에 띈다. 오호라. 하지만 어디서 수정해야 할까?\nGitlab을 Omnibus 로 정직하게 설치했다면 소스코드 경로는 /opt/gitlab/embedded/service/gitlab-rails/ 에 있다. 여기서 grep으로 to_branch_name 을 검색해 보면?\n여기서 \u0026quot;#{iid}-#{title.parameterize}\u0026quot; 라고 정의된 부분을 적절히 바꿔주자. 나는 \u0026quot;ISSUE##{iid}\u0026quot; 로 심플하게 바꿨다.\n이것만 바꾸면 \u0026lsquo;Create New Branch\u0026rsquo; 를 누를 때 잘 될 것 같다. 하지만 Issue 페이지에서 \u0026lsquo;연관된 Issue Branch\u0026rsquo; 목록에 연결되지 않는다. 수정한 파일 /opt/gitlab/embedded/service/gitlab-rails/app/models/issue.rb 에서, 더 수정할 것이 남아있다. 다음 함수를 수정해야 한다.\n has_related_branch related_branches  수정 방법은 간단한데, Branch와 비교하는 Regular Expression 의 문법을 찾아보자. /\\A${iid}-(?!\\d+-stable)/i 라고 되어 있을 것이다. 이걸 실제로 irb 에서 테스트해 보면, 420-title 같은 건 되는데 420-0-stable 은 인식이 안 되는 것을 알 수 있다. (뭔가.. 이상하다) 아무튼 이걸 적절한 Regular Expression 으로 바꿔 주도록 하자. Ruby의 Regexp 에 익숙치 않다면 이 사이트의 도움을 받아보도록 하자. (내 경우는 간단하게 /\\AISSUE#{iid}/i 라고 했다.)\n수정을 했다. 하지만 끝이 아니다. 마무리를 해 줘야 한다. 실제 Gitlab이 서비스되고 있는 경로는 /var/opt/gitlab 이므로, 해당 경로로 적용을 시켜줘야 한다. 어떻게?\n간단하다. gitlab-ctl reconfigure \u0026amp;\u0026amp; gitlab-ctl restart 를 입력하자.\n ","permalink":"https://interp.blog/gitlab-%EC%82%BD%EC%A7%88%EA%B8%B0/","summary":"Upgrade 8.x 로 쓰다가 10.x 로 업그레이드를 진행했다. 아니.. 그런데 Postgresql Database 버전이 다르다고? 알고보니 이렇게 대격변을 일으키면 안 되던 거였다. 그래서 겸사겸사 9.5.10 으로 다시 설치하니까 된다.\n gitlab-ctl reconfigure 를 설치 직후에 반드시 해 줘야 한다. 가끔 gitlab-ctl pg-upgrade 를 꼭 하라는 말이 있던데, 내가 해보니까 gitlab-ctl reconfigure 할 때 알아서 한다 (…) 했던 거 또 하는 느낌. gitlab-ctl restart 를 할 때 postgresql 이나 다른 곳에서 \u0026lsquo;down, up, want up\u0026rsquo; 이런 게 뜨면 서비스가 온전히 수행될 수 없는 상황이다.","title":"Gitlab 삽질기"},{"content":"자주 쓰긴 하지만, 곧바로 생각나지 않을 것을 대비해서… 서버실 서버 사양을 전부 체크하려다 보니 어쩔 수 없이 정리했다.\nCPU / Memory 확인 CPU / Memory 는 사실 쉽다. /proc/cpuinfo 와 /proc/meminfo 안에 들어있기 때문이다.\nDisk 확인 df 는 mount 된 것만 확인이 가능해서 별로고, lsblk 를 하면 마운트되지 않은 것까지 나온다.\n  ","permalink":"https://interp.blog/linux-%EC%97%90%EC%84%9C-cpumemorydisk-%ED%99%95%EC%9D%B8/","summary":"자주 쓰긴 하지만, 곧바로 생각나지 않을 것을 대비해서… 서버실 서버 사양을 전부 체크하려다 보니 어쩔 수 없이 정리했다.\nCPU / Memory 확인 CPU / Memory 는 사실 쉽다. /proc/cpuinfo 와 /proc/meminfo 안에 들어있기 때문이다.\nDisk 확인 df 는 mount 된 것만 확인이 가능해서 별로고, lsblk 를 하면 마운트되지 않은 것까지 나온다.\n  ","title":"Linux 에서 CPU/Memory/Disk 확인"},{"content":"게임 \u0026lsquo;배틀그라운드\u0026rsquo; 에서, 어떻게 해야 상위 랭크에 도달할 수 있는지를 수학적인 접근으로 잘 풀어낸 네이버 블로그 글을 봤다. 누군가에겐 그저 즐기는 게임이 될 수 있지만, 누군가에게는 연구대상이 된다. 사물이나 현상을 어떻게 바라보느냐, 얼마나 관심있느냐에 따라서 통찰이 생겨난다. 이것은 모두에게 열려있다. 반대로 생각하면, 논문을 쓰는 사람들은 결단코 고상한 사람들이 아니다.\n\u0026lsquo;수학적인 접근\u0026rsquo;이라는 말 때문에 설득력이 떨어질 수는 있다. 하지만 어느 분야나 자신의 경험을 녹여 전혀 다른 곳에서 적응하는 사람들을 우리는 일상에서 많이 봤다. 그것이 상식이 될 수도 있고, 연륜이 될 수도 있다. (개인적으로는, \u0026lsquo;나이를 먹어감에 따라 현명해지는 것은 잘못된 생각이다\u0026rsquo; 라는 누군가의 말에 동의하지만…)\n그런 사람이 되어야 하지 않을까, 생각한다.\n","permalink":"https://interp.blog/%ED%98%84%EC%83%81%EC%9D%84-%ED%86%B5%EC%B0%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/","summary":"게임 \u0026lsquo;배틀그라운드\u0026rsquo; 에서, 어떻게 해야 상위 랭크에 도달할 수 있는지를 수학적인 접근으로 잘 풀어낸 네이버 블로그 글을 봤다. 누군가에겐 그저 즐기는 게임이 될 수 있지만, 누군가에게는 연구대상이 된다. 사물이나 현상을 어떻게 바라보느냐, 얼마나 관심있느냐에 따라서 통찰이 생겨난다. 이것은 모두에게 열려있다. 반대로 생각하면, 논문을 쓰는 사람들은 결단코 고상한 사람들이 아니다.\n\u0026lsquo;수학적인 접근\u0026rsquo;이라는 말 때문에 설득력이 떨어질 수는 있다. 하지만 어느 분야나 자신의 경험을 녹여 전혀 다른 곳에서 적응하는 사람들을 우리는 일상에서 많이 봤다.","title":"현상을 통찰하는 방법"},{"content":" 게임 진행 거래가 완료된 칸은 다시 거래할 수 없고, 해당 칸을 건너뛰어서 주사위 칸 만큼 이동한다. 모든 거래가 완료되거나, 열 번째 거래 이후에 발동되는 게임 종료 조건을 만족하면 게임이 끝나게 된다.\n 거래 시작 만약 \u0026lsquo;보스\u0026rsquo;가 투자자 조건을 모두 만족시킬 수 있는 경우라면, 다른 플레이어의 개입 없이 해당 배당금을 전부 가져갈 수 있다. 물론 후반부에는 이렇게 하기가 굉장히 힘들게 되어 있다.\n예를 들어서 이야기해 보자.\n 물론, 노랑이 돈이 너무 많아서 빨강과 거래를 성사시킬 가능성도 있다. 보스 마음이다.\n 영향력 카드 \u0026lt;td style=\u0026quot;width: 602px;\u0026quot;\u0026gt; 1회용 투자자 카드\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 기본 투자자 색과 함께 거래에 참여가 가능하지만, 거래가 성사되면 카드는 버려진다. (거래가 무산되면 카드를 다시 회수) \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 이 카드를 통해, 여러 색깔을 들이밀면서 협상이 가능하다. 혹은 보스가 일족 카드를 써서 혼자 거래를 성사시키기도 합니다.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td style=\u0026quot;width: 116px;\u0026quot;\u0026gt; \u0026lt;strong\u0026gt;여행 카드\u0026lt;/strong\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td style=\u0026quot;width: 602px;\u0026quot;\u0026gt; 해당 색깔의 거래 참여를 원천봉쇄한다.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 다른 플레이어의 거래 참여를 원천봉쇄하는 방법으로 쓰이지만, '반드시 참여해야 하는' 색깔을 가진 투자자를 여행보내면서 거래 자체를 깽판치는 역할도 할 수 있다. \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 여행 카드 중에는 회색이 있는데, 이 때는 카드 소유자가 원하는 색을 지정해서 여행 보낼 수 있다.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td style=\u0026quot;width: 116px;\u0026quot;\u0026gt; \u0026lt;strong\u0026gt;보스 카드\u0026lt;/strong\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td style=\u0026quot;width: 602px;\u0026quot;\u0026gt; 현재 거래의 '보스' 를, 카드 사용자로 교체한다.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 거래 계약 상황은 유지해도 되고 엎어도 된다. 배당금이 많이 걸린 '빅 딜'일 수록 이 카드를 많이 볼 수 있다. '보스'는 절대적으로 다른 플레이어보다 돈을 많이 먹을 수 밖에 없기 때문이다.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td style=\u0026quot;width: 116px;\u0026quot;\u0026gt; \u0026lt;strong\u0026gt;고용주 카드\u0026lt;/strong\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td style=\u0026quot;width: 602px;\u0026quot;\u0026gt; 3장이 모였을 때 사용이 가능한데, 고유 투자자 카드 (다른 플레이어의 것이나, 혹은 게임 시작 시 제외되었던 투자자 카드) 를 뺏어온다.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 대부분은 의가 상하지 않게 게임에 없는 투자자 카드를 들고오지만, 중후반에는 그런거 없고 남의 것을 잘만 가져온다. 물론, 투자자 카드를 뺏겼다고 해도 일족 카드가 있으니 거래 참여를 못 하는 것은 아니지만 큰 제약이 있을 수밖에. \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 당연히 한 장이나 두 장 가지고는 쓸모가 없는 카드.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr style=\u0026quot;width: 20%;\u0026quot;\u0026gt; \u0026lt;td style=\u0026quot;width: 116px;\u0026quot;\u0026gt; \u0026lt;strong\u0026gt;정지 카드\u0026lt;/strong\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td style=\u0026quot;width: 602px;\u0026quot;\u0026gt; \u0026lt;span style=\u0026quot;text-decoration: underline;\u0026quot;\u0026gt;정지카드, 일족 카드를 제외한\u0026lt;/span\u0026gt; 다른 카드가 나왔을 때, 해당 카드를 무효화한다. \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt;\u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;p\u0026gt; \u0026amp;nbsp; \u0026lt;/p\u0026gt; ","permalink":"https://interp.blog/%EC%95%84%EC%9E%84-%EB%8D%94-%EB%B3%B4%EC%8A%A4-im-the-boss/","summary":"게임 진행 거래가 완료된 칸은 다시 거래할 수 없고, 해당 칸을 건너뛰어서 주사위 칸 만큼 이동한다. 모든 거래가 완료되거나, 열 번째 거래 이후에 발동되는 게임 종료 조건을 만족하면 게임이 끝나게 된다.\n 거래 시작 만약 \u0026lsquo;보스\u0026rsquo;가 투자자 조건을 모두 만족시킬 수 있는 경우라면, 다른 플레이어의 개입 없이 해당 배당금을 전부 가져갈 수 있다. 물론 후반부에는 이렇게 하기가 굉장히 힘들게 되어 있다.\n예를 들어서 이야기해 보자.\n 물론, 노랑이 돈이 너무 많아서 빨강과 거래를 성사시킬 가능성도 있다.","title":"아임 더 보스 (I’m the boss!)"},{"content":"mmap은 memory map 의 줄임말이다. 메모리의 특정 영역을 파일 디스크립터로 인식하게 만드는 것이다.\n map or unmap files or devices into memory\n  메모리 영역을 파일이나 디바이스로 인식하게 합니다\n– manpage of mmap\n 사용 여기서 의미가 있는 건 Length, Prot (Protection), Flag 뿐이다.\n Start 는, Kernel이 아무 곳이나 지정해도 좋다면 NULL을 입력한다. Offset 은, 보통 0으로 둔다. (MAP_ANONYMOUS 또는 MAP_ANON Flag가 있는 경우엔 무시된다) Fd 는, 연결할 파일 디스크립터를 지정한다. (MAP_ANONYMOUS 또는 MAP_ANON Flag를 통해서 \u0026lsquo;파일로 사용하지 않는다\u0026rsquo; 라고 한다면 -1을 넣어줘야 한다. (사실 안 넣어주고 무시해도 되지만 몇몇 구현에서는 넣어야 한다 카더라)  Protection 매핑된 메모리 영역의 사용 권한 같은 것을 정하는 것이라고 이해하자. 리눅스 파일 시스템의 권한과 비슷한 분류로 이해하면 더욱 쉽다. (물론 똑같지는 않지만)\n이 때, 연결된 파일 디스크립터의 모드와 절대 충돌해서는 안 된다. 예를 들어 파일 디스크립터를 획득할 때는 w+ 라고 해놓고 여기서 PROT_READ 라고 하면, 예상치 못한 무언가가 일어나지 않을까?\n메모리 영역의 보호에 관련된 자세한 내용은 여기를 참고하자.\nFlag \u0026lt;td\u0026gt; \u0026lt;strong\u0026gt;사용 가능\u0026lt;/strong\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;strong\u0026gt;커널\u0026lt;/strong\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;strong\u0026gt;설명\u0026lt;/strong\u0026gt; \u0026lt;/td\u0026gt;  \u0026lt;td\u0026gt; \u0026amp;#8211; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; 이 매핑을 다른 프로세스들이 공유할 수 있다. (실제 파일과 연결되어 반영된다. 하지만 자동으로 반영하지는 않고 \u0026lt;code\u0026gt;msync\u0026lt;/code\u0026gt; 나 \u0026lt;code\u0026gt;munmap\u0026lt;/code\u0026gt; 을 호출해야 반영된다.) \u0026lt;/td\u0026gt;  \u0026lt;td\u0026gt; \u0026amp;#8211; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; 이 매핑을 다른 프로세스들과 공유하지 않는다. 실제 파일과도 연결되지 않으므로, \u0026lt;code\u0026gt;mmap\u0026lt;/code\u0026gt; 이후에 파일에 반영되는 변경 내역이 매핑된 영역에 반영되는지는 확신할 수 없다. \u0026lt;/td\u0026gt;  \u0026lt;td\u0026gt; ~2.4.20, 2.6 \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; 첫 2GB 안에서 영역을 잡는다.\u0026lt;br /\u0026gt; x86-64 프로그램에서만 사용이 가능하다.\u0026lt;br /\u0026gt; (초기 64-bit 프로세서에서는 context-switch 비용 절감을 위해 사용할 수 있는 옵션이겠지만, 지금은 그렇지 않으므로 굳이..) \u0026lt;/td\u0026gt;  \u0026lt;td\u0026gt; \u0026amp;#8211; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; 파일 디스크립터로 인식하지 않는다. fd와 offset은 무시되지만, 몇몇 구현에서는 fd를 반드시 -1로 입력해야 한다.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; ※ SHARED와 같이 사용하려면 Kernel Version 이 2.4 이하여야 한다.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;p\u0026gt; \u0026amp;nbsp; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 헉헉\u0026amp;#8230; 아래에 더 있는데 여기까지만 해야겠다. 내가 사용하고자 하는건 사실 ANONYMOUS Flag 만 있으면 되는데 말이지. \u0026lt;/p\u0026gt;  ","permalink":"https://interp.blog/mmap-%EB%A9%94%EB%AA%A8%EB%A6%AC%EB%A5%BC-%ED%8C%8C%EC%9D%BC%EC%B2%98%EB%9F%BC/","summary":"mmap은 memory map 의 줄임말이다. 메모리의 특정 영역을 파일 디스크립터로 인식하게 만드는 것이다.\n map or unmap files or devices into memory\n  메모리 영역을 파일이나 디바이스로 인식하게 합니다\n– manpage of mmap\n 사용 여기서 의미가 있는 건 Length, Prot (Protection), Flag 뿐이다.\n Start 는, Kernel이 아무 곳이나 지정해도 좋다면 NULL을 입력한다. Offset 은, 보통 0으로 둔다. (MAP_ANONYMOUS 또는 MAP_ANON Flag가 있는 경우엔 무시된다) Fd 는, 연결할 파일 디스크립터를 지정한다.","title":"mmap : 메모리를 파일처럼"},{"content":"다국어 사이트를 기획하던 중에 만난 Polylang 이 괜찮은 것 같아서 사용 중인데, 설정 중에 만난 두 가지 문제들을 아래와 같이 해결했다.\n Language Switcher가 없다고? **외모 – 메뉴 **에서 오른쪽 위에 \u0026lsquo;화면 옵션\u0026rsquo; 을 펼치면 Language Switcher 가 꺼져있을 것이다. String Translation 을 따로 추가하고 싶다고? 테마의 functions.php 에서pll_register_string() 함수를 호출하면 된다. 해당 String 을 사용하고 싶다면 테마에서 pll__또는 pll__e 를 사용하면 된다.자세한 내용은 여기를 참고.  ","permalink":"https://interp.blog/polylang-%EC%82%AC%EC%9A%A9-%ED%8C%81/","summary":"다국어 사이트를 기획하던 중에 만난 Polylang 이 괜찮은 것 같아서 사용 중인데, 설정 중에 만난 두 가지 문제들을 아래와 같이 해결했다.\n Language Switcher가 없다고? **외모 – 메뉴 **에서 오른쪽 위에 \u0026lsquo;화면 옵션\u0026rsquo; 을 펼치면 Language Switcher 가 꺼져있을 것이다. String Translation 을 따로 추가하고 싶다고? 테마의 functions.php 에서pll_register_string() 함수를 호출하면 된다. 해당 String 을 사용하고 싶다면 테마에서 pll__또는 pll__e 를 사용하면 된다.자세한 내용은 여기를 참고.  ","title":"polylang 사용 팁"},{"content":"pthread_yield() 와 sleep() 의 차이를 묻는 Stack Overflow 글을 가져와 봤다.\n pthread_yield() 는, 호출한 쓰레드가 프로세서 사용을 그만두고, 스케쥴링이 될 때 까지 작업 큐(run queue)에서 기다립니다. 만약 호출되었을 때 작업 큐가 비어 있다면, 즉시 스케쥴링이 되겠죠.\nsleep() 은 X초만큼 지나거나, 무시할 수 없는 시그널이 도착할 때 까지 (다른 쓰레드를 포함한) 호출 프로세스를 재웁니다.\n현재 쓰레드를 실제로 지연시키고 싶지 않지만 (호출 쓰레드 대신) 다른 쓰레드에게 실행권을 넘겨주고 싶은 경우라면, sleep() 보단 pthread_yield() 가 적합할 것 같습니다.\n sleep 자체가 프로세스를 아예 멈추게 하니까 pthread_yield 를 통해서 나는 잠시 빠져주는 상태로 만드는 거였다. 코드를 보면서 감으로만 \u0026lsquo;아 저건 sleep() 같진 않지만 뭔가 이럴 때 쓰는거야\u0026rsquo; 라고만 어렴풋이 알고 있었는데, 무엇이든 확실히 알아야 한다.\n","permalink":"https://interp.blog/pthread_yield-vs-sleep/","summary":"pthread_yield() 와 sleep() 의 차이를 묻는 Stack Overflow 글을 가져와 봤다.\n pthread_yield() 는, 호출한 쓰레드가 프로세서 사용을 그만두고, 스케쥴링이 될 때 까지 작업 큐(run queue)에서 기다립니다. 만약 호출되었을 때 작업 큐가 비어 있다면, 즉시 스케쥴링이 되겠죠.\nsleep() 은 X초만큼 지나거나, 무시할 수 없는 시그널이 도착할 때 까지 (다른 쓰레드를 포함한) 호출 프로세스를 재웁니다.\n현재 쓰레드를 실제로 지연시키고 싶지 않지만 (호출 쓰레드 대신) 다른 쓰레드에게 실행권을 넘겨주고 싶은 경우라면, sleep() 보단 pthread_yield() 가 적합할 것 같습니다.","title":"pthread_yield vs. sleep"},{"content":"위기가 찾아왔을 때는, 위기를 만든 사람들에게 원망하고 싶다. 그렇게 원망 해 봐야 위기가 물러가진 않지만 말이다. 그래서 위기를 어떻게 해결할 것인지를 고민해야 한다**.** 그게 오히려 스트레스를 덜 받는다.\n사람에 대해 스트레스를 계속 받고 심지어는 사람을 잃어버리면서, 나 자신에 대한 원망이 점점 심해지고 있다는 걸 느꼈다. 왜 그때 그랬을까, 그러지 않았다면 좋았을텐데. 그렇게 해 봐야 떠났던 사람을 다시 붙잡을 수는 없지만 말이다. 미련이나 후회가 아닌, 해결해야 할 과제로 여기기로 했다. 그러면서 조금 마음이 편해졌다.\n원망하고 후회하는 것이 오히려 더 쉽다. 해결은 답을 찾고 시도해야 하는 비싸고 귀찮은 작업이라고 생각하기 때문이다. 하지만 멀리 보면, 해결을 하기 위한 노력이 필요하다. 또 원망하고 후회하지 않으려면.\n여전히 화내고 우울해 하며 제자리에 서 있는 나를 방치하지 않으려면 말이다.\n","permalink":"https://interp.blog/%EB%8B%A4%EC%8B%9C-%ED%95%9C-%EA%B1%B8%EC%9D%8C/","summary":"위기가 찾아왔을 때는, 위기를 만든 사람들에게 원망하고 싶다. 그렇게 원망 해 봐야 위기가 물러가진 않지만 말이다. 그래서 위기를 어떻게 해결할 것인지를 고민해야 한다**.** 그게 오히려 스트레스를 덜 받는다.\n사람에 대해 스트레스를 계속 받고 심지어는 사람을 잃어버리면서, 나 자신에 대한 원망이 점점 심해지고 있다는 걸 느꼈다. 왜 그때 그랬을까, 그러지 않았다면 좋았을텐데. 그렇게 해 봐야 떠났던 사람을 다시 붙잡을 수는 없지만 말이다. 미련이나 후회가 아닌, 해결해야 할 과제로 여기기로 했다. 그러면서 조금 마음이 편해졌다.","title":"다시, 한 걸음"},{"content":"Amazon Web Server에서 WordPress를 설치하고, 플러그인이나 워드프레스를 업그레이드 하라고 하면… FTP 정보를 등록하라고 나온다. 그렇게 하지 않아도, 여기서 제시한 것 처럼 권한 사용자만 바꿔줘도 된다.\n","permalink":"https://interp.blog/amazon-web-server-%EC%97%90%EC%84%9C-wordpress-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8/","summary":"Amazon Web Server에서 WordPress를 설치하고, 플러그인이나 워드프레스를 업그레이드 하라고 하면… FTP 정보를 등록하라고 나온다. 그렇게 하지 않아도, 여기서 제시한 것 처럼 권한 사용자만 바꿔줘도 된다.","title":"amazon web server 에서 WordPress 업데이트"},{"content":"ubuntu 14.04 를 기반으로 한 Dockerfile 에,SSH를 설치하기 위해 아래와 같이 작성했다고 하자.\n그러면 archive.ubuntu.com Repository 에서 Update를 받는데, 갑자기 이런 메시지가 뜬다.\n검색해 봐도 Docker나 Dockerfile의 문제 같지는 않다. 그렇다면 정말 Repository가 Hash Sum Mismatch 문제를 가지고 있는 것은 아닐까?\n어차피 Build 하는 시점에는 어느 Repository를 써도 상관이 없으니, 전통의 kr.archive.ubuntu.com 를 사용하도록 Dockerfile을 수정해 봤다.\n아주 잘 된다!\n","permalink":"https://interp.blog/docker%EC%97%90%EC%84%9C-apt-get-update%EA%B0%80-%EC%8B%A4%ED%8C%A8%ED%95%A0-%EB%95%8C/","summary":"ubuntu 14.04 를 기반으로 한 Dockerfile 에,SSH를 설치하기 위해 아래와 같이 작성했다고 하자.\n그러면 archive.ubuntu.com Repository 에서 Update를 받는데, 갑자기 이런 메시지가 뜬다.\n검색해 봐도 Docker나 Dockerfile의 문제 같지는 않다. 그렇다면 정말 Repository가 Hash Sum Mismatch 문제를 가지고 있는 것은 아닐까?\n어차피 Build 하는 시점에는 어느 Repository를 써도 상관이 없으니, 전통의 kr.archive.ubuntu.com 를 사용하도록 Dockerfile을 수정해 봤다.\n아주 잘 된다!","title":"Docker에서 apt-get update가 실패할 때"},{"content":"1년 조금 안 되는 기간 동안, 우리 부부는 \u0026lsquo;엑셀 (Excel)\u0026rsquo; 로 가계부를 정리하고 있었다. 웹 서비스나 안드로이드 앱들로도 쓸 수 있는 가계부를 말이다. 게다가 몇몇은 카드 내역 문자가 오면 자동으로 기입도 해 주는데!\n우리의 목적은 \u0026lsquo;입맛대로 쓰자\u0026rsquo; 였다. 쓰고 싶은 대로 수식을 넣고 차트를 그렸다. 그러나 그마저도 귀찮음에 한계가 오기 시작했다. 어줍잖은 지식으로 함수와 스크립트를 짜 넣는 데엔 한계가 있었고, 데이터가 많아질수록 엑셀이 조금씩 우리의 인내심을 시험하기 시작했다. (왜 이렇게 느린겨!)\n 프로젝트 착수 결국, 작년 말에 내가 칼을 뽑았다. 모양이 어떻게 되든 간에, 엑셀 가계부를 대체할 서비스를 만들어 주겠노라고.\n이런 류의 프로젝트는 이름이 많다. 내 맘대로 할 수 있어서 \u0026lsquo;토이 프로젝트\u0026rsquo; 라고도 하고, 새로운 기술을 부담없이 시전해 볼 수 있어서 \u0026lsquo;펫 프로젝트\u0026rsquo; 라고도 한단다. 이런 프로젝트를 할 때는 눈치를 안 봐도 된다는 장점이 있다.\n하지만 나 자신과 타협하는 것을 용납하지 못하면, 어려운 작업이 되는건 매한가지다. \u0026lsquo;이쯤 하면 됐지\u0026rsquo; 가 아니라 \u0026lsquo;이건 왜 이렇게 했냐\u0026rsquo; 라는 생각이 괴롭히기 시작하면 말이다. 게다가 지금은 고객님도 계신다. 이 분의 요구사항을 모두 만족하면서, 쓰면서 나오는 불만들에 즉각 대응해야 한다. 진짜 클라이언트라면 전화나 카톡을 무시할 여지라도 있지, 이 분은 바로 내 옆에 있다!\n 프로젝트 목표 나에게 있어, 이 프로젝트의 목적은 \u0026lsquo;배우면서 만드는 서비스\u0026rsquo; 이다. 목표는 바로 MEAN Stack 을 다뤄보면서 익혀가는 것이다.\n더 나은 Full-stack service 들이 있겠지만, 나는 프론트 엔드 개발자가 아니다. 취미 삼아 블로그를 운영할 때나 PHP/Javascipt 를 끄적이는 정도라서, 그 수준은 어디 나가서 자랑할 수준이 못 되기 때문이다. 가장 만만하면서 쉽게(?) 올려볼 수 있는 것을 선택했다.\n아무튼, MEAN Stack을 구축한 다음에 거기서 살을 붙이다가 새로운 개념을 배우면 Refactoring 도 해나가면서 그나마 견고하게 서비스를 지속하는 것이 목표이다. 리팩토링이라니, 얼마나 끔찍한 짓인진 나도 잘 알지만 배우는데 이만한 노력은 해야 한다 생각한다.\n MEAN MEAN은 MongoDB, Express, AngularJS, NodeJS 를 뜻한다고 한다. 뭔가 순서가 뒤죽이 박죽인 것 같지만… 라임을 맞추려고 그랬을테니 신경쓰지 말자.\n여기서 MongoDB는 NoSQL 이니, 익숙한 SQL 언어를 쓰기 위해 MariaDB 또는 MySQL을 사용하기로 했다. 어차피 대용량 DB를 운영할 것이 아니고 더욱 익숙한 MySQL을 선택하는게 나에게는 최선이었다. 아, 데이터베이스는 사실 새로 배울 것도 없어서 익숙한 것을 선택한 것이다.\nNodeJS와 Express는 쌍으로 배워서 사용하는데, 여기서 더 필요한 게 있다면 body-parser 정도겠다. 이 부분은 책으로 \u0026lsquo;눈팅\u0026rsquo;한 경력이 있어서 어렵지 않게 넘어갔다.\n문제는 AngularJS이다. 이건… 아이디어만 보면 정말 편하겠다 싶었다. Javscript 에서 수정하는 데이터가 바로 HTML 에 반영이 된다니! 그래서 언젠가 꼭 써보고 싶었는데, 막상 시작하려니 어디서부터 어떻게 시작해야 할지 몰랐다.\n이리저리 검색한 결과, W3School 의 AngularJS 튜토리얼에서 출발한 것이 많은 도움이 되었다. 기본적인 사용법만 익히면 factory가 무엇인지 코드를 어떻게 체계적으로 관리할 것인지는 나중 문제기 때문이다. (여기서도 refactoring 이슈가 엄청나겠지만, 당장 이런 걱정은 \u0026lsquo;화성의 식량 부족 문제를 걱정하는\u0026rsquo; 격이다. 당장 걱정해봤자 아무런 쓸모가 없기 때문이다.)\n다음은? 네 가지 스택을 어느 정도 배우고 난 다음, 백엔드부터 하나씩 구성하기 시작했다. 그 과정을 다음 포스팅부터 하나씩 풀어나가고자 한다.\n","permalink":"https://interp.blog/%EB%A8%B8%EB%8B%88%EB%B6%81-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-1/","summary":"1년 조금 안 되는 기간 동안, 우리 부부는 \u0026lsquo;엑셀 (Excel)\u0026rsquo; 로 가계부를 정리하고 있었다. 웹 서비스나 안드로이드 앱들로도 쓸 수 있는 가계부를 말이다. 게다가 몇몇은 카드 내역 문자가 오면 자동으로 기입도 해 주는데!\n우리의 목적은 \u0026lsquo;입맛대로 쓰자\u0026rsquo; 였다. 쓰고 싶은 대로 수식을 넣고 차트를 그렸다. 그러나 그마저도 귀찮음에 한계가 오기 시작했다. 어줍잖은 지식으로 함수와 스크립트를 짜 넣는 데엔 한계가 있었고, 데이터가 많아질수록 엑셀이 조금씩 우리의 인내심을 시험하기 시작했다. (왜 이렇게 느린겨!","title":"머니북 프로젝트 (1)"},{"content":"비행 로봇인 드론을 사는 것이 전혀 어렵지 않은 세상, 물류센터에는 로봇들만이 운반하는 세상. 딥 러닝 인공지능인 알파고가 바둑을 제패하고, 인간형 로봇은 아직 멀었다고 하지만 맥도날드 앞에서 점원이 아닌 키오스크를 바라보는 것이 더 편한 세상.\n이런 세상, 4차 산업혁명을 맞이하면서 우리는 많은 질문을 던져볼 수 있을 것이다. 개중에는 들어봤음직한 것들에 대해 생각해 볼 수 있겠지만, 전혀 생각지도 못한 질문들을 같이 고민해 볼 수 있는 책이 있다. \u0026lsquo;로봇공화국에서 살아남는 법\u0026rsquo; 은 저자의 생각을 다양한 이야기를 통해 다각적으로 이야기해본 책이다.\n인공지능 겨울 다양한 생각들이 묻어 있었지만, 이 책이 지키는 기본은 \u0026lsquo;과거를 통해 현재를 보자\u0026rsquo; 는 것이다. 저자는 컴퓨터의 태동기부터 자동화 프로그램의 시초, 자동화에 따른 사람들의 기대, 그리고 인공지능 겨울 까지의 이야기를 먼저 소개한다. 저자 본인이 컴퓨터를 처음 접하면서 Visual Basic으로 만들어 냈던 \u0026lsquo;말 하는 프로그램\u0026rsquo; 에서 굉장한 희열을 느꼈다고 한다. 이처럼, 다른 사람들도 컴퓨터가 점점 곁에 오기 시작하면서 어떤 기대를 갖게 만들었다고 한다.\n사람보다 더 빠른 계산을 할 수 있으니, 나중에는 사람과 비슷한 지능을 갖게 되지 않을까 하는 것이다. 여기서부터 인공지능은 출발한다. 많은 투자가 있었지만 결과는 시원찮았고, 결국 \u0026lsquo;인공지능 겨울\u0026rsquo; 이 왔다고 말한다. 투자를 받기 위해, 인공지능이란 연구주제는 \u0026lsquo;머신 러닝\u0026rsquo; 이나 \u0026lsquo;자동화\u0026rsquo; 같은 다른 이름으로 둔갑되어 진행되었다.\n우리가 지금 인공지능과 로봇에 기대하는 바램들이 또 다른 외면으로 변질되는 것을 우려해야 한다고 말한다. 물론 과거에 실망한 수준으로 연구가 멈추진 않을 것이고, 생각보다 빠르게 진보할 것은 분명해 보인다. 그러나 우리는 그 속도를 넘어서는 기대를 하고 있진 않은지 한번 의문을 가져보자는 것이다.\n사람보다 뛰어난 인공지능? 그 중 가장 궁금하면서 두려운 질문은, 인공지능을 갖춘 로봇이 사람을 지배할 가능성이다. 저자는 많은 SF 소설에서의 스토리를 언급했지만, 나는 영화 \u0026lsquo;이글아이\u0026rsquo; 의 악당이나 \u0026lsquo;캡틴 아메리카:윈터 솔저\u0026rsquo;의 \u0026lsquo;프로젝트 인사이트\u0026rsquo; 같은 것들이 먼저 떠올랐다. 아무튼, 이런 두려움에 대해서도 현실적이지 않다고 말한다.\n기억에 남는 건 두 가지인데, 하나는 \u0026lsquo;지능이 높다고만 해서 모든 것을 이룰 수 있다는 것은 일종의 판타지다\u0026rsquo; 라는 것이다. 조선 시대 사대부의 오랑캐 북벌론을 예로 들면서, 청의 황제가 \u0026lsquo;그 붓대로 우리 군대와 맞서 싸울 자신이 있는가?\u0026rsquo; 라고 했다고 한다.\n물론 로봇이 사람보다 더한 완력이 있기 때문에 어떤 면에서는 정말로 문무를 겸비한(!) 상황이 올지도 모른다. 게임 \u0026lsquo;호라이즌 : 제로 던\u0026rsquo; 처럼, 직접 생성되고 발전하는 기계 종족이 생긴다면 말이다. 그러나 정말 이런 세상이 단시간 내에 이뤄질까? 에 대해서 생각하면 아니라는 것이다.\n또 다른 측면은, 바로 \u0026lsquo;본능\u0026rsquo;에 관한 것이다. 인공지능이 과연 사람의 생존 본능을 얼마나 이해할 수 있냐는 것이다. 고상하게 말하면 \u0026lsquo;나는 왜 살까?\u0026rsquo; 라는 질문에 사람은 고민해 볼 수 있지만, 인공지능은 그럴 이유가 없는 것이다. 이 부분은 앞선 측면보다 더욱 설득력이 있다. 자아의 부재는, 결국 인간의 도구로서의 역할에 당분간 머물지 않을까 하는 것이다.\n현실적인 대안이 필요하다 그래서, 책은 이제 현실적인 고민을 해 보자는 질문을 던지게 된다. 결국 기계와 인공지능을 점유한 소수의 사람만이 이득을 볼 것이라는 것은 자명한 사실이다. 인공지능 자체가 위협적인 존재는 안되겠지만, 인공지능과 로봇을 갖춘 악인은 정말 위협적인 존재라는 것도 충분히 고민해야 할 문제가 된다.\n그래서 로봇을 점유한 기업과 개인에게 로봇세를 걷거나 해서, 기본 소득을 주자는 이야기도 나온다. 생산 설비를 점유하는 기업은 공장 노동자보다 더 많은 부를 누리지만, 그래도 공장 노동자들에게 임금을 주어 분배하고, 그들이 소비자가 되어 경제의 톱니바퀴가 되어주는 순환을 이어갔다. 하지만 일은 로봇이 하니까, 자연스럽게 생산된 이득을 재분배해야 하는게 아니냐는 것이 이 \u0026lsquo;기본 소득\u0026rsquo;의 아이디어이다. 너무 앞선 생각이라고 책은 말한다. 국가 간 경쟁의 문제가 남아있고, 이런 이야기가 오히려 산업혁명의 성장곡선을 뭉개는 정책이 될 수 있다. 재분배하자는데, 어느 누가 투자를 하려고 할까?\n책의 마지막 장은 의미심장한 메시지를 던지는데, 일하는 로봇과 책임을 지는 인간이 공존하는, 이른바 \u0026lsquo;대 바지사장의 시대\u0026rsquo; 가 오지 않을까 하는 조심스런 추측이다. 로봇이 인간의 일을 대신하게 되면, 인간은 그 일자리를 잃지 않기 위해 다양한 규제와 법안으로 책임을 수반하는 역할로 전환될 것이라는 예측이다. 이런 생각을 해 보지 못해서 신선한 전망이었다 생각한다.\n맺으며 책은 \u0026lsquo;인공지능\u0026rsquo; 에 대해 끊임없이 궁금해하고 생각해보는 구성을 하고 있다. 저자의 생각에 반론을 가져볼 수도 있고, 흥미롭게 읽어내려갈 수도 있다. 책을 따라 다양한 시각에서 인공지능의 발전에 대해 바라볼 수 있는 시각을 훔쳐 볼 수 있어서 좋았다. 더불어, 거기에 따라 다양한 생각을 해 볼 기회를 가져서 더욱 좋았던 책이다. 다양한 컴퓨터의 역사와, 역사 위에 서 있던 몇몇 사람의 생애도 들을 수 있는 보너스도 쏠쏠하다.\n","permalink":"https://interp.blog/%EB%A1%9C%EB%B4%87%EA%B3%B5%ED%99%94%EA%B5%AD%EC%97%90%EC%84%9C-%EC%82%B4%EC%95%84%EB%82%A8%EB%8A%94-%EB%B2%95/","summary":"비행 로봇인 드론을 사는 것이 전혀 어렵지 않은 세상, 물류센터에는 로봇들만이 운반하는 세상. 딥 러닝 인공지능인 알파고가 바둑을 제패하고, 인간형 로봇은 아직 멀었다고 하지만 맥도날드 앞에서 점원이 아닌 키오스크를 바라보는 것이 더 편한 세상.\n이런 세상, 4차 산업혁명을 맞이하면서 우리는 많은 질문을 던져볼 수 있을 것이다. 개중에는 들어봤음직한 것들에 대해 생각해 볼 수 있겠지만, 전혀 생각지도 못한 질문들을 같이 고민해 볼 수 있는 책이 있다. \u0026lsquo;로봇공화국에서 살아남는 법\u0026rsquo; 은 저자의 생각을 다양한 이야기를 통해 다각적으로 이야기해본 책이다.","title":"로봇공화국에서 살아남는 법"},{"content":"어릴 적 일들이 기억나지 않을 때마다, 나이가 들어가는게 이런건가 생각해 본 적이 있다.\n지금 생각하면 단순히 까먹는 것을 놓고 결론이 너무 심한게 아닐까 싶다. 오히려, 어릴 적에도 일어났을 법한 똑같은 이벤트에 반응하는 내 감정이 그 때와는 조금 옅어지고 있다는 것을 깨닫는다고 해야, 좀 더 나은 표현이겠다. 무엇이 옅어진 걸까, 설마 신기하고 놀라운 감정일까? 추억은 그렇게 놔두지 않는다.\n회사 1층 화장실에서 흩뿌려진 방향제의 향기가, 크레파스를 코 끝에 가져가는 순간을 떠올려낸다. 아내와 같이 손을 맞잡고 걷는 아파트 골목 한 켠이, 풋풋한 스무살 때 대학교 강당으로 되돌아나가면서 꿈 많던 고등학교 때의 하굣길로 도착하게 될 거란 착각을 하게 만든다.\n이렇게 사람은, 같은 장소에 있더라도 추억의 농도에 따라서 전혀 다른 생각을 할 수 있다.\n하지만, 향수를 떠올리기 전에 현실적인 생각들이 먼저 가로막는 것이 사실이다. 사무실에 들어가서 해결해야 할 일들이, 전세가 끝나면 힘겹게 찾아나서야 할 새로운 보금자리의 후보들이 그렇다. 옅어지는 것은 추억이 아니라 감상의 채도가 아닐지. 탁하게 만드는 것은 감내해야 하는 현실. 그것이 우리를 낭만으로부터 밀어내고 있는 것이다.\n그래서 슬프다.\n","permalink":"https://interp.blog/%EC%A7%99%EC%96%B4%EC%A7%80%EB%8A%94-%EC%B6%94%EC%96%B5-%EC%98%85%EC%96%B4%EC%A7%80%EB%8A%94-%EA%B0%90%EC%83%81/","summary":"어릴 적 일들이 기억나지 않을 때마다, 나이가 들어가는게 이런건가 생각해 본 적이 있다.\n지금 생각하면 단순히 까먹는 것을 놓고 결론이 너무 심한게 아닐까 싶다. 오히려, 어릴 적에도 일어났을 법한 똑같은 이벤트에 반응하는 내 감정이 그 때와는 조금 옅어지고 있다는 것을 깨닫는다고 해야, 좀 더 나은 표현이겠다. 무엇이 옅어진 걸까, 설마 신기하고 놀라운 감정일까? 추억은 그렇게 놔두지 않는다.\n회사 1층 화장실에서 흩뿌려진 방향제의 향기가, 크레파스를 코 끝에 가져가는 순간을 떠올려낸다. 아내와 같이 손을 맞잡고 걷는 아파트 골목 한 켠이, 풋풋한 스무살 때 대학교 강당으로 되돌아나가면서 꿈 많던 고등학교 때의 하굣길로 도착하게 될 거란 착각을 하게 만든다.","title":"짙어지는 추억, 옅어지는 감상"},{"content":"구조체 내부에, 이름없는 union 타입의 필드에 값을 지정할 때 조심해야 할 점이 있다.\n(확인해 본 건 두 버전 뿐이지만) gcc v4.7 에서는 성공적으로 컴파일이 된다. 그러나 gcc v4.4 에서는 아래와 같이 에러가 발생한다!\n에러를 없애는 방법은, 내부 union을 향하는 것이라고 명시를 해 주는 수밖에 없다. 즉, union 필드에 값을 지정할 때는 중괄호로 한번 더 감싸주면 된다.\n  ","permalink":"https://interp.blog/specify-value-to-unnamed-union-fields/","summary":"구조체 내부에, 이름없는 union 타입의 필드에 값을 지정할 때 조심해야 할 점이 있다.\n(확인해 본 건 두 버전 뿐이지만) gcc v4.7 에서는 성공적으로 컴파일이 된다. 그러나 gcc v4.4 에서는 아래와 같이 에러가 발생한다!\n에러를 없애는 방법은, 내부 union을 향하는 것이라고 명시를 해 주는 수밖에 없다. 즉, union 필드에 값을 지정할 때는 중괄호로 한번 더 감싸주면 된다.\n  ","title":"Specifying value to unnamed union fields"},{"content":"몇 가지는 이미 알고 있었고, 몇 가지는 새로 찾은 것들이 되겠다. 모든 단축키를 알려줄 순 없지만 자주 사용할 법한 것들 위주로 정리해 둔다.\nCtrl+r 가장 기초적인 것부터 보도록 하자.\n거의 대부분의 저작도구에서 지원하는 \u0026lsquo;되돌리기(Undo)\u0026rsquo; 와 \u0026lsquo;다시하기(Redo)\u0026rsquo; 를 Vim 도 지원한다. 되돌리기는 u 이며, 다시 하기가 바로 Ctrl+r이다.\nCtrl+a / Ctrl+x Ctrl+a는 커서가 위치한 줄에 한해, 커서 다음에 위치한 숫자를 찾아서 1 증가시킨다. 반대로 숫자를 감소시키는 단축키는 Ctrl+x이다.\nvim은 엑셀이 아니기 때문에, 셀을 끌어당겨서 숫자를 1씩 증가시키는 그런 기능이 없다. 대신 숫자를 탐색해가면서 1씩 증가/감소시키는 건 가능하다.\n다음 텍스트를 예로 들어보자. 각 부분마다 Ctrl+a를 누르면 어떻게 될까?\n \u0026lsquo;입주자 명단\u0026rsquo; 중에 커서가 위치한 상태에서는, 아무런 효과가 없다. \u0026lsquo;홍길동 : 101\u0026rsquo; 중에 커서가 위치한 상태에서는, 102동으로 바뀐다. \u0026lsquo;동 101\u0026rsquo; 중에 커서가 위치한 상태에서는, 102호로 바뀐다.  이를 적절히 이용해서 매크로를 하나 만들 수 있다. 커서를 \u0026lsquo;홍길동…\u0026rsquo; 이 있는 라인에 갖다 두고 다음과 같이 \u0026lsquo;호수를 증가시키는\u0026rsquo; 매크로를 만들 수 있다.\n그 다음부터는 @a 와 @@를 이용해 매크로를 원하는 만큼 부를 수 있다.\n참고로 숫자 앞에 0x와 같이 16진수 표기법이 존재하더라도, Vim은 찰떡같이 알아먹고 16진수 표기법으로 숫자를 증감시킨다. 예를 들면, 0x100에 대고 Ctrl+x를 누르면, 0x0ff가 된다는 것이다.\nCtrl+s / Ctrl+q 아무 생각 없이 \u0026lsquo;저장해야지~\u0026rsquo; 라고 저 단축키를 눌러버렸다가, vim이 움직이지 않는 (!) 상황을 보고 당황해서 터미널을 끄던 때가 모두들 있었으리라 믿는다.\nCtrl+s는 \u0026lsquo;Scroll Lock\u0026rsquo; 을 의미한다. 즉, 화면 자체가 움직이지 않는다. Scroll Lock을 거는 단축키가 있다면, 그것을 푸는 단축키 역시 존재한다. 바로 Ctrl+q 되시겠다.\n멈췄다고 터미널을 그냥 꺼버리면, 남아있는 스왑파일을 지우는 귀찮음도 감수해야 하고 되돌리기 내역도 없이 처음부터 편집해야 하는 불편함이 있으니, 해결책을 기억해 두자.\nCtrl+v 텍스트의 특정 영역을 선택할 수 있는 Visual Mode로 진입하는 방법 중 하나이다. Visual Mode로의 진입 방법은 세 가지가 있는데, Ctrl+v를 소개하는 참에 정리해 두도록 한다.\n v : 커서를 위아래로 움직이면, 문단을 드래그 한 것 처럼 블록이 잡힌다. Ctrl+v : 커서를 위아래로 움직이면, 직사각형을 만드는 것 처럼 블록이 잡힌다. Shift+v : 커서 위치 상관없이 무조건 줄 단위로 잡힌다.  Ctrl+v 는 세로로 올바르게 영역을 잡을 수 있는데, 이를 이용해서 다양한 작업을 할 수 있다. 내가 가장 자주 사용하는 것은 Ctrl+v 로 모든 줄의 특정 칸을 잡은 다음 Shift+i 로 입력 모드로 전환한다. 텍스트를 입력한 뒤 ESC로 빠져나오는 것이다.\n이게 무슨 짓인지, 말로 설명하면 감이 잘 오지 않는다. 그래도 설명해보면, 입력 모드에서는 첫 번째 줄에만 입력이 되지만, ESC로 빠져나오자마자 블록의 모든 영역에 해당 입력이 반영된다. 백문이 불여일견, 직접 해보길 권한다.\n","permalink":"https://interp.blog/vim%EC%9D%98-ctrl-%EB%8B%A8%EC%B6%95%ED%82%A4/","summary":"몇 가지는 이미 알고 있었고, 몇 가지는 새로 찾은 것들이 되겠다. 모든 단축키를 알려줄 순 없지만 자주 사용할 법한 것들 위주로 정리해 둔다.\nCtrl+r 가장 기초적인 것부터 보도록 하자.\n거의 대부분의 저작도구에서 지원하는 \u0026lsquo;되돌리기(Undo)\u0026rsquo; 와 \u0026lsquo;다시하기(Redo)\u0026rsquo; 를 Vim 도 지원한다. 되돌리기는 u 이며, 다시 하기가 바로 Ctrl+r이다.\nCtrl+a / Ctrl+x Ctrl+a는 커서가 위치한 줄에 한해, 커서 다음에 위치한 숫자를 찾아서 1 증가시킨다. 반대로 숫자를 감소시키는 단축키는 Ctrl+x이다.\nvim은 엑셀이 아니기 때문에, 셀을 끌어당겨서 숫자를 1씩 증가시키는 그런 기능이 없다.","title":"vim의 Ctrl 단축키"},{"content":"WordPress 3.9 부터는 포스트 에디터로 TinyMCE를 내장하고 있다. 테마 별로 이 에디터의 CSS 의 스타일을 제공할 수 있다. add_editor_style() 함수가 그것이다.\n사용중인 테마에서 에디터 스타일 변경 다음 코드를 사용 중인 테마의 functions.php 에 추가하면 된다.\n물론, 여기서 editor-style.css 파일은 존재해야 한다. 에디터 스타일을 직접 작성할 수도 있지만, 나는 테마 스타일의 포스팅 부분만 떼내서 만들었다. 즉, 에디터를 통해 미리보기를 하지 않아도 포스팅 구성이 어떻게 되고 본문이나 제목이 어떻게 보여지는지 한 눈에 파악할 수 있다.\n테마와 상관없이 변경하고 싶다면 wp-includes/js/tinymce/skins/wordpress/wp-content.css 를 바꾸면 테마에 상관없이 에디터 스타일이 바뀐다. 단점이 있다면, WordPress가 업데이트하면서 해당 파일을 바꾸게 될 위험이 높다. 만약 이 방법을 꼭 쓰고 싶다면, 애써 작업한 내용을 날리지 말고 백업을 해 둬야 한다.\n ","permalink":"https://interp.blog/wordpress-%EC%97%90%EB%94%94%ED%84%B0-%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%B3%80%EA%B2%BD/","summary":"WordPress 3.9 부터는 포스트 에디터로 TinyMCE를 내장하고 있다. 테마 별로 이 에디터의 CSS 의 스타일을 제공할 수 있다. add_editor_style() 함수가 그것이다.\n사용중인 테마에서 에디터 스타일 변경 다음 코드를 사용 중인 테마의 functions.php 에 추가하면 된다.\n물론, 여기서 editor-style.css 파일은 존재해야 한다. 에디터 스타일을 직접 작성할 수도 있지만, 나는 테마 스타일의 포스팅 부분만 떼내서 만들었다. 즉, 에디터를 통해 미리보기를 하지 않아도 포스팅 구성이 어떻게 되고 본문이나 제목이 어떻게 보여지는지 한 눈에 파악할 수 있다.","title":"WordPress 에디터 스타일 변경"},{"content":"Disqus Comment Plugin 을 설치했고, Footer에 Javascript를 추가한다는 옵션도 켜져있는데… 최근 글에 개수가 안 보인다면?\n대개 이런 경우는 글 발행을 하고 아무런 액션을 취하지 않았거나 워드프레스를 이전한 경우이다. 해답은 간단한데, 해당 글을 한번 클릭해서 disqus 댓글 창이 로딩되기를 기다리면 된다. 그리고 새로고침하면 바뀐다! 대부분 바로 적용되지만, 몇몇 포스팅은 바로 적용되지 않더라. 그러니 만들었으면 진득히 기다려 보자.\n","permalink":"https://interp.blog/wordpress-disqus-%EC%BD%94%EB%A9%98%ED%8A%B8-%EC%88%98%EA%B0%80-%EC%95%88-%EB%B3%B4%EC%9D%B4%EB%A9%B4/","summary":"Disqus Comment Plugin 을 설치했고, Footer에 Javascript를 추가한다는 옵션도 켜져있는데… 최근 글에 개수가 안 보인다면?\n대개 이런 경우는 글 발행을 하고 아무런 액션을 취하지 않았거나 워드프레스를 이전한 경우이다. 해답은 간단한데, 해당 글을 한번 클릭해서 disqus 댓글 창이 로딩되기를 기다리면 된다. 그리고 새로고침하면 바뀐다! 대부분 바로 적용되지만, 몇몇 포스팅은 바로 적용되지 않더라. 그러니 만들었으면 진득히 기다려 보자.","title":"WordPress Disqus 코멘트 수가 안 보이면"},{"content":"WordPress는 기본적으로 TinyMCE를 탑재하고 있는데, 기본 단축키가 존재한다. 글을 작성할 때 굉장히 편하게 쓸 수 있다. 그런데 나는 Confluence 에 내장된 TinyMCE에 익숙해져서, 단축키를 두 번 외우기 싫어서 이걸 바꿔보려고 했다. (당장 태그를 정하는 것만 해도 Confluence 는 Ctrl + 1 인데, WordPress 는 Shift + Alt + 1 이다. 엄청 불편하다!)\n단축키 변경 원리 보통 wp-include/js/tinymce/tinymce.min.js 안에 addShortcut 이 지정되어 있다. 이걸 바꾸면 되는데, 다음과 같은 규칙이 있다.\n  단축키 패턴은, 소문자로 적어도 상관없다\n  Ctrl, Alt, Shift, 영문자 키가 사용 가능하다.\n  Meta, Access 가 사용 가능하다.\n각각 Mac 의 Command / Ctrl+Alt 와 대응된다. 윈도우라면 Ctrl / Shift+Alt 와 대응된다.\n  Command 리스트는 이 페이지를 참고하면 된다. 참고로 Heading 1, Heading 2 를 나타내는 Command 는 \u0026lsquo;Heading\u0026rsquo; 이 아니라 \u0026lsquo;FormatBlock\u0026rsquo; 이란 이름이다. 각 Command 의 설명을 잘 읽어보도록 하자.\n내가 적용한 것은 Heading1~6 (제목 줄 정하기, Ctrl+1~6), InsertUnorderedList (번호 없는 목록 만들기, Ctrl+Shift+B) 정도다. 생각나는 대로 더 추가할 예정이다.\n","permalink":"https://interp.blog/wordpress-%EC%97%90%EB%94%94%ED%84%B0-%EB%8B%A8%EC%B6%95%ED%82%A4-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0/","summary":"WordPress는 기본적으로 TinyMCE를 탑재하고 있는데, 기본 단축키가 존재한다. 글을 작성할 때 굉장히 편하게 쓸 수 있다. 그런데 나는 Confluence 에 내장된 TinyMCE에 익숙해져서, 단축키를 두 번 외우기 싫어서 이걸 바꿔보려고 했다. (당장 태그를 정하는 것만 해도 Confluence 는 Ctrl + 1 인데, WordPress 는 Shift + Alt + 1 이다. 엄청 불편하다!)\n단축키 변경 원리 보통 wp-include/js/tinymce/tinymce.min.js 안에 addShortcut 이 지정되어 있다. 이걸 바꾸면 되는데, 다음과 같은 규칙이 있다.\n  단축키 패턴은, 소문자로 적어도 상관없다","title":"WordPress 에디터 단축키 변경하기"},{"content":"레오폴드의 키보드가 으레 그렇지만, 750RT 버전의 경우 한/영키와 한자키가 각각 ALT/CTRL 와 같이 매핑이 되어 있다. 윈도우라면 아무런 걱정이 없었지만, 우분투에서 쓰려니까 다음과 같은 단점이 생겼다.\n키보드가 레오폴드가 아니더라도, 우분투에서 오른쪽의 ALT/CTRL 키를 한/영키와 한자키로 쓰고자 하는 분들에게 유용할 것 같아서 정리한다. 16.04 LTS부터 기본 지원되는 fcitx를 기준으로 설명한다.\n fcitx에서 한/영키를 Ralt 로 설정하는 것은 가능하다. 그러나 이게 OS에서 그대로 ALT 로 인식한다는 게 문제다. 타이핑 도중 한/영키를 누르면 타이핑 글자와 함께 조합키로 인식되어 입력 변환이 원활하지 않다는 느낌이 든다. (그리고 간혹 가다가는 정말 조합키가 작동하는 불상사도 있었다.) 타이핑을 멈추고 한/영키를 눌러야 한다니, 너무 성가셨다. fcitx에서 한자키를 Rctrl 단독으로 잡을 수 없다. 심지어 우분투 내부 Virtualbox에 설치된 윈도우에서는 Rctrl (한자키)가 인식이 잘 되는데, Host OS에서는 인식할 수 없다니!  xmodmap 을 통한 방법도 찾아봤지만, 이건 설정이 복잡한데다 로그인 할 때 마다 매핑 정보를 갱신하는 불편함이 있다. 무엇보다, fcitx는 내가 설정한 대로 절대 인식해주지 않는다는 것이 치명적인 문제였다.\n간단한 다른 방법을 찾았는데, gnome-tweak-tool을 사용하는 것이다. 다음 명령으로 설치하고, 아래 스크린샷 처럼 \u0026lsquo;입력 – 한국어 한/영, 한자키\u0026rsquo; 에서 원하는 대로 선택하면 된다. 그러면 본래 가진 Ctrl/Alt 기능이 전부 꺼지고, 우리가 원하는 키 배치로 변경되는 것을 알 수 있다.\n","permalink":"https://interp.blog/%EC%9A%B0%EB%B6%84%ED%88%AC-fcitx-%ED%95%9C%EC%98%81%ED%82%A4-%ED%95%9C%EC%9E%90%ED%82%A4-%EB%A7%A4%ED%95%91/","summary":"레오폴드의 키보드가 으레 그렇지만, 750RT 버전의 경우 한/영키와 한자키가 각각 ALT/CTRL 와 같이 매핑이 되어 있다. 윈도우라면 아무런 걱정이 없었지만, 우분투에서 쓰려니까 다음과 같은 단점이 생겼다.\n키보드가 레오폴드가 아니더라도, 우분투에서 오른쪽의 ALT/CTRL 키를 한/영키와 한자키로 쓰고자 하는 분들에게 유용할 것 같아서 정리한다. 16.04 LTS부터 기본 지원되는 fcitx를 기준으로 설명한다.\n fcitx에서 한/영키를 Ralt 로 설정하는 것은 가능하다. 그러나 이게 OS에서 그대로 ALT 로 인식한다는 게 문제다. 타이핑 도중 한/영키를 누르면 타이핑 글자와 함께 조합키로 인식되어 입력 변환이 원활하지 않다는 느낌이 든다.","title":"우분투 fcitx 한/영키, 한자키 매핑"},{"content":"회사에서 기계식 키보드를 아무거나 사라고 해서 i-rocks의 KR-6251 을 사서 5년 째 쓰고 있다. 2년 전부터 몇몇 키들은 한 번 누를 때마다 두 번 입력되는 느낌을 받았고, 쓰면서 이 현상이 더욱 가중되어 성가신 느낌을 지우기 힘들었다.\n그런데 이 문제를 어떻게 웹에 검색하지? 감을 잡을 수 없어서 \u0026lsquo;그냥 새로운 키보드를 사야하는 건가!\u0026rsquo; 라고까지 고민하고 있었다. (이럴 때만 지름신이 오셔서 \u0026lsquo;비싼 기계식 키보드를 사서 쓰렴, 껄껄\u0026rsquo; 이라고 조언해준다.) 그러다가 우연찮게 이런 문제를 무엇이라고 말하는지 알 수 있었다.\n키 바운스 키가 제멋대로 춤을 춰서 한번 더 스위치와 부비는(!) 현상을 말한다.\n무접점 키보드가 아닌 이상, 일반 키보드인 멤브레인을 포함, 스위치를 사용하는 기계식 키보드들은 발생할 수도 있는 증상이다. 분명히 나는 한 번 키를 눌렀다 뗐는데, 내부에서 진동으로 인해 스위치가 한번 더 (혹은 여러 번) 눌리는 현상이라고 이해하면 된다. 이를 키 바운싱(Bouncing) 또는 채터링(Chattering) 이라고 부른다고 한다.\n원인과 해결책 원인은 여러 가지가 있을 수 있지만, 원칙적으로는 스위치 고장이라고 생각해야 하지 않을까. 이럴 땔, 스위치 교체를 해야 한다. 혹시 키캡-스위치 접촉 불량으로 미세하게 덜렁거릴 수도 있으니 청소를 한번 해봤는데… 청소를 마친 키보드로 (아래의 해결책을 적용하지 않고) 사용해보니, 똑같은 문제가 자주 발생하는 걸 보면 그렇게 효과가 크진 않은 것 같다. 바이오스 업데이트로 키 입력에 대한 패치를 하는 방법도 있다는데, 잘 모르겠으니 제조사에서 추가 정보가 업데이트 되었는지 확인해 보는 방법도 있겠다. (당연히 내 키보드는 이미 단종이다.)\nOS 설정으로 문제 억제시키기 그럼 스위치를 교체하거나 키보드를 버려야 하는가? 잠깐 그 잔인한 생각을 집어넣고 타협할 방법을 알려드리도록 하겠다.\n나 역시 소프트웨어적으로 이런 반복적인 키 입력을 막을 방법이 분명히 있을거라고 생각했는데, 다양한 해결책이 있었다. 모든 OS는 \u0026lsquo;사용자 접근성\u0026rsquo;이란 메뉴가 존재한다. 화면 글씨를 일부러 키우거나 소리를 읽어주거나 하는 그런 기능들이다. 여기서 제공하는 것들 중 \u0026lsquo;탄력 키\u0026rsquo; 기능을 사용한다.\nWindows 7 이후의 버전이라면, \u0026lsquo;제어판\u0026rsquo; 의 \u0026lsquo;접근성 센터\u0026rsquo; 에서 \u0026lsquo;키보드를 사용하기 쉽게 설정\u0026rsquo; 항목으로 들어간다. 여기에서 \u0026lsquo;필터 키 켜기\u0026rsquo; 를 적용하면 된다. 그러나 애석하게도 필터 키의 바운스 타임을 뜻하는 \u0026lsquo;탄력 키 입력 인식 시간\u0026rsquo; 간격을 0.5초 이하로 조정할 수 없다. 이 말은, 키를 반복해서 탁탁 칠 때 0.5초보다 빠른 간격으로 치면 모두 무시된다는 소리고, 생각보다 빠른 입력을 할 때 (특히 백스페이스를 반복해서 누를 때) 복장이 터질 가능성이 높다. 결국 이걸 낮추려면 레지스트리를 건드려야 하는데, 이 포스팅을 참고해서 조정이 가능하다.\nLinux (Ubuntu) 나 같은 리눅스 사용자는 그럼 어떡해야 할까. Ubuntu 기준으로 설명하면, \u0026lsquo;설정\u0026rsquo; – \u0026lsquo;접근성\u0026rsquo; – \u0026lsquo;자판 입력\u0026rsquo; 에 있는 \u0026lsquo;탄력 키\u0026rsquo; 를 켜서 허용 지연 시간 바(Bar)를 거의 왼쪽으로 갖다 두면 윈도우의 최소 단위인 0.5초보다 간격이 낮아져서, 반복 입력을 해도 무시되는 경우가 거의 없는데다가 키 바운싱이 완화되는 것을 확인할 수 있다.\n결론 위 네이버 포스팅에도 언급되지만, 100% 해결책은 아니다. \u0026lsquo;다\u0026rsquo; 를 치는데 \u0026lsquo;ㄷ\u0026rsquo; 키가 바운싱이 되는 사이에 \u0026lsquo;ㅏ\u0026rsquo;가 입력되면 OS 입장에서는 \u0026lsquo;ㄷㄷ\u0026rsquo; 같은 중복 키로 인식하지 않으므로 \u0026lsquo;닫\u0026rsquo; 같은 문자가 입력되기 때문이다. 이런 문제는 지금 포스팅을 쓰는데도 발생하고 있다 (이런!)\n결국 지름신을 모셔야 할 것 같지만… 어느 정도 완화할 수는 있겠다 싶어서 작성한다.\n","permalink":"https://interp.blog/%ED%82%A4%EB%B3%B4%EB%93%9C-%ED%82%A4-%EB%B0%94%EC%9A%B4%EC%8B%B1-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0/","summary":"회사에서 기계식 키보드를 아무거나 사라고 해서 i-rocks의 KR-6251 을 사서 5년 째 쓰고 있다. 2년 전부터 몇몇 키들은 한 번 누를 때마다 두 번 입력되는 느낌을 받았고, 쓰면서 이 현상이 더욱 가중되어 성가신 느낌을 지우기 힘들었다.\n그런데 이 문제를 어떻게 웹에 검색하지? 감을 잡을 수 없어서 \u0026lsquo;그냥 새로운 키보드를 사야하는 건가!\u0026rsquo; 라고까지 고민하고 있었다. (이럴 때만 지름신이 오셔서 \u0026lsquo;비싼 기계식 키보드를 사서 쓰렴, 껄껄\u0026rsquo; 이라고 조언해준다.) 그러다가 우연찮게 이런 문제를 무엇이라고 말하는지 알 수 있었다.","title":"키보드 키 바운싱 문제 해결"},{"content":"아름답지만 인기척 하나 없는 섬을 탐험하며 두뇌 유희를 즐길 수 있는 게임. 하지만 곳곳에 존재하는 메시지는 어쩐지 심오한 퍼즐 게임 \u0026lsquo;The Witness\u0026rsquo; 를 플레이 했다. 스팀/GOG 에서 43000원($39.99)으로 구입이 가능하다. 결코 저렴하다 할 순 없지만, 최대 세일도 50% 까지 했었고 최근엔 Humble Monthly 에서 선공개 게임으로 나오기도 했다. (구독 비용이 $12 이므로, 이게 사실상 최저가가 아닐까 싶다.) 발매 초부터 세일하면꼭 해봐야지 싶었던 게임이라서, 두통을 끌어안고굉장히 즐겁게 했다.\n그래픽 – 섬 그래픽은 The Long Dark 의 밝은 버전이라고 할 법한데, 원색으로 이루어진 자연 경관이 반겨 준다. 게임의 배경이 섬이기 때문에, 바다도 있고 섬 중앙에는 우뚝 솟은 산과 그 주변을 두르는 강물도 보인다. 마을도 있고 사막도 있고 심지어(?) 벚꽃나무도 있다.\n그래서 퍼즐을 풀다가 \u0026lsquo;가끔 난 하늘을 바라봐\u0026rsquo; 같은 멍때리기를 해도 부족함이 없다. 너무 강렬한 색채다 보니 현실적이진 않지만, 이 정도면 충분히 미려하다고 볼 수 있겠다.\n장르 – 그리기 퍼즐 퍼즐은 \u0026lsquo;시작점\u0026rsquo;과 \u0026lsquo;끝점\u0026rsquo; 그리고 \u0026lsquo;길\u0026rsquo; 로 이뤄져 있다. 그 사이를 이어가는 \u0026lsquo;정답\u0026rsquo;을 찾는 것이다. 물론 시작점 – 길 – 끝점만 있으면 미로 찾기에 지나지 않지만…\n 대부분은 퍼즐 안에 다양한 \u0026lsquo;표식\u0026rsquo;이 존재한다. 그런데 이 표식이 이야기하는 \u0026lsquo;규칙\u0026rsquo;을 모르면 풀 수 없도록 되어 있다. 섬 곳곳에는 해당 표식이 그려진 예제 문제를 학습할 수 있는 구역이 존재한다. 그 자리에서 안 풀리면 탐험을 해야 한다. 시작점이 여러 개일 수도, 끝 점이 여러 개일 수도 있다. 때로는 모두 정답이 되며, 때로는 정답마다 다른 결과를 가져다 주기도 한다. 그래서 모든 끝 점에 도달할 수 있는 정답들을 전부 찾아야 하는 경우도 있다. 퍼즐 안에 \u0026lsquo;표식\u0026rsquo; 이 없는 경우엔, 퍼즐의 주변 환경이 힌트가 된다. 이를 깨달을 때 느끼는 카타르시스가 엄청난다. (그래서 여기서는 힌트를 주지 않겠다.)  스토리 – 녹음기 섬에는 정말 아무도 없어서 자연 소리와 퍼즐 푸는 소리 외에는 어떤 소리도 들리지 않는다. 대신, 지역을 돌아다니다 보면 구석에 짱박힌 녹음기들이 존재한다. 플레이어에게 뭔가 조언을 하거나 겁박을 주는 내용일까? 천만에. 그저 명언이나 인용문 따위를 조곤조곤 읊기만 한다. 그 내용도 얼핏 들어서는 무슨 소리야? 하고 이해하기 힘든데, 아마 섬에서 혼자 규칙을 찾고 퍼즐을 푸는 일련의 행위와 관련있는 듯한 암시를 주는 것 같았다.\n비슷한 게임 이 게임을 하면서 뇌리 속에서 떠나지 않던 게임이 있는데, \u0026lsquo;안티챔버(Antichamber)\u0026rsquo; 와 \u0026lsquo;포탈(Portal)\u0026rsquo; 이다. 아무도 없는 공간을 돌아다니면서 퍼즐을 푸는 것 까지는 셋 모두의 공통점. (포탈 시리즈는 혼자라고 하기엔 수다쟁이(?)가 있어서 분위기는 많이 다르지만) 그러나 다른 두 게임은 영역을 뒤틀거나 물질을 만드는 총을 들고 진행하고, 해당 총을 업그레이드 해야 하는 점이 \u0026lsquo;The Witness\u0026rsquo; 와 다르다. 그나마 비슷한 게임을 꼽자면… 물리적 법칙을 생각해가며 진행하는 \u0026lsquo;포탈\u0026rsquo; 보다는 전혀 상상할 수 없는 숨겨진 법칙대로 퍼즐을 푸는 \u0026lsquo;안티챔버\u0026rsquo; 에 가깝지 않을까. 아무런 설명 없이 반복되는 문제의 규칙을 찾아내야 한다는 그 접근 방법은 얼추 비슷해 보인다.\n마치며 이 게임의 제작자인 조나단 블로우의 전작은 바로 \u0026lsquo;Braid\u0026rsquo; 이다. 단순하고 의미 없는 플랫포머 퍼즐 게임은 결코 아니라는 것을, 엔딩을 본 사람은 모두 알고 있다.\n그만큼 이 게임에도 많은 메시지가 숨겨져 있으니, 평화로운 섬을 탐험하면서 골치 아픈퍼즐도 풀고 녹음기도 찾아가면서 조용히 감탄할 수 있는 그런 게임이라고 감히 추천하고자 한다. 끝으로, 타임지에서 조나단 블로우를 인터뷰한 기사를 링크한다. 그의 게임 제작 철학을 조금이나마 이해할 수 있는 글이었다.\n","permalink":"https://interp.blog/the-witness/","summary":"아름답지만 인기척 하나 없는 섬을 탐험하며 두뇌 유희를 즐길 수 있는 게임. 하지만 곳곳에 존재하는 메시지는 어쩐지 심오한 퍼즐 게임 \u0026lsquo;The Witness\u0026rsquo; 를 플레이 했다. 스팀/GOG 에서 43000원($39.99)으로 구입이 가능하다. 결코 저렴하다 할 순 없지만, 최대 세일도 50% 까지 했었고 최근엔 Humble Monthly 에서 선공개 게임으로 나오기도 했다. (구독 비용이 $12 이므로, 이게 사실상 최저가가 아닐까 싶다.) 발매 초부터 세일하면꼭 해봐야지 싶었던 게임이라서, 두통을 끌어안고굉장히 즐겁게 했다.\n그래픽 – 섬 그래픽은 The Long Dark 의 밝은 버전이라고 할 법한데, 원색으로 이루어진 자연 경관이 반겨 준다.","title":"The Witness"},{"content":"ack.vim 을 설치하려니까 Vim Plugin Manager 란 게 있는 사실도 알았다. 누구는 Vim Plugin을 상위권부터 하나씩 써보고 마음에 드는 걸 적용하고 있다는데, 나도 그래야겠다 싶어서 여기에 정리해 두고자 한다. 여기서는 플러그인에 대해서 먼저 알아보고, 플러그인마다 제공하는 가장 많이 사용하는 플러그인들을 알아본 다음에, 최종적으로는 내가 원하는 ack.vim 을 설치해보고자 한다.\nVim Plugin Manager : Vundle 집/회사에서의 개발환경이 다르고, 회사에서도 여러 서버를 넘나들며 개발과 유지보수를 해야 하는데, 모든 환경을 일일히 동기화하기엔 귀찮은 것이 사실이다. vim의 환경도 마찬가지인데, 플러그인의 경우엔 매니저를 사용하는 것이 도움이 될 것이다.\n알아보니, Vundle 이나 Pathrogen 을 쓰는 것 같다. 플러그인을 관리하는 원리는 비슷해 보이는데, 나는 Vundle을 설치했다.\nVundle의 설치 방법은 잘 나와 있지만, 요약하면 다음과 같다.\n  다음 명령으로 ~/.vim/bundle/Vundle.vim 을 설치한다. git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim   ~/.vimrc 에 Vundle이 시작될 수 있도록 코드를 입력한다. (링크 참고)\n  ~/.vimrc 에 작성한 Vundle 코드에서, 플러그인 목록을 작성한다.\n  vim 을 실행한 다음, :PluginInstall 을 입력한다. 왼쪽에 분할된 창이 나타나면서 플러그인을 모두 설치한다. 설치가 완료되면 vim을 종료하면 된다!\n  플러그인 순위 vim 공식 사이트에 가도 되지만, 랭킹을 따로 뽑아주는 사이트가 분명히 있을 거라고 생각했다. 과연, 이런 사이트가 있었다. 여기서는 일단 NERDTree 만 받아서 Vundle 에 적용해 봤는데, 와우. 넘나 편한 것!\nack.vim 설치 ack.vim 은 파일 내 패턴을 검색하는 플러그인으로 유명하다.\n역시 Vundle 을 이용해 간단하게 설치할 수 있었다. 나는 ack 대신 ag를 쓸 작정이었으므로, 명령어를 ag로 변경했다.\n끝으로 아직도 Vim 사용법에 대해선 초보인 것 같다. 지금도 나름 편하게 쓴다고는 하지만 조금 더 편하게 구현할 수 있을 거란 욕심을 부리지 않아서였는지, 새로운 (하지만 전혀 새롭지도 않은) 방법들을 보고 있으니 신기하면서도 많이 부족하다는 걸 느낀다. 놀부님의 블로그에 Practical Vim 에 대한 내용이 정리되어 있는데, 이것도 한번 참고해 봐야 겠다.\n","permalink":"https://interp.blog/vim-plugin-%EC%97%90-%EB%8C%80%ED%95%B4/","summary":"ack.vim 을 설치하려니까 Vim Plugin Manager 란 게 있는 사실도 알았다. 누구는 Vim Plugin을 상위권부터 하나씩 써보고 마음에 드는 걸 적용하고 있다는데, 나도 그래야겠다 싶어서 여기에 정리해 두고자 한다. 여기서는 플러그인에 대해서 먼저 알아보고, 플러그인마다 제공하는 가장 많이 사용하는 플러그인들을 알아본 다음에, 최종적으로는 내가 원하는 ack.vim 을 설치해보고자 한다.\nVim Plugin Manager : Vundle 집/회사에서의 개발환경이 다르고, 회사에서도 여러 서버를 넘나들며 개발과 유지보수를 해야 하는데, 모든 환경을 일일히 동기화하기엔 귀찮은 것이 사실이다.","title":"Vim Plugin"},{"content":"\u0026lsquo;인간실격\u0026rsquo; 이란 제목부터 뭔가 끌어당기는 것이 있었다. 오프닝에서는 충격을 받고 엔딩에서는 한숨이 나왔다. 무덤덤하게 작가의 일생을 나열하는 마지막 페이지에서는 흠칫했다. 소설의 내용과 일치하는 부분이 있었다. 부유한 집안에 태어나 자랐고, 여자와 자살기도를 했지만 본인은 실패했다는 점 등. 굴곡진 인생을 살아온 주인공 요조의 이야기가, 혹시 작가 자신의 이야기였을까.\n소설은 인간의 위선적인 태도를 경멸하고 두려워하면서도, 그 속에서 녹아들기 위해 그 자신마저도 위선을 가장한 광대짓을 하고 있는 주인공을 계속 보여준다. 그런데 그 거짓이 간파당하는 순간이 두 번 존재한다. 엉뚱한 짓을 일부러 하거나 과장되게 웃겨서 급우들 사이에서 재미있는 친구로 통하는 고등학생 시절 주인공에게, 반에서 눈에 띄지 않는 아이가 어느 날 \u0026lsquo;너, 일부러 그런거지?\u0026rsquo; 라고 들었을 때. 또 하나는 묻은 피를 닦아 낸 손수건을 가지고 다니다 기침을 했는데 그게 각혈한 것 처럼 보여서 경찰 조사를 받을 때 아픈 척을 하려고 써먹었는데 형사에게 \u0026lsquo;그거, 진짠가?\u0026rsquo; 라고 들었을 때. 이 때 요조는 마치 큰 벌을 받는 것 처럼 두려움에 몸을 떠는데, 처음에는 이상하다고 생각했다가 지금은 이게 과연 이상하게 여길 것인지 알 수 없다. 거짓이 거짓으로 탄로나는 순간. 거짓을 연기하지 않는 것이 가장 좋겠지만, 사회에 살기 위해서 거짓을 연기하는 주인공이라면. 그 간극을 뼈저리게 느끼고 있는, 어쩔 수 없이 절벽 위 줄타기를 하는 것 같은 느낌으로 말이다. 요조는 처음에 광대 짓을 시작하면서 그것이 어설프다는 것을 알면서도 굉장히 힘들어했는데, 점점 그 생활에 익숙해졌다. 그러면서도 그 절벽 아래를 확실히 알고 있어서, 소설 내내 \u0026lsquo;어쩔 수 없이 한다\u0026rsquo; 는 걸 상기시킨다.\n인간이 될 수 없는 상황을 회피하기 위한 선택은 타락으로 이어지게 된다. 이렇게 살게 되는 분기점에 항상 여자들이 있었다. 여자 형제가 많은 부잣집에서 자라서인지 여자의 심리를 잘 알았던 주인공이, 많은 여자와 인연을 맺으면서 점점 변해가게 된다. 어떤 여자는 품이 편안해서, 어떤 여자는 요조를 철썩같이 믿고 도와주니까, 어떤 여자는 순결해서\u0026hellip; 같은 이유로 만나게 되는데 하나같이 좋지 않게 끝난다. 이런 선택에 항상 친구가 개입하게 되는데, 이 친구가 위선자의 막장에 치달은 인물이 아닌가. 새근새근 다가와 돈을 빌리거나 좋은 곳에 데려가버리는 단순한 사기꾼 같지만, 또 자신의 할머니에게는 세상 깍듯하게 대하고, 그러면서 요조의 비극은 그저 남의 일이라는 냉소적인 태도가 비춰진다. 자신이 속한 세계에서는 확실한 룰이 존재하지만, 그 경계 밖을 떠나는 순간 그것은 전혀 내 일이 아닌 것 같은. 마지막에 찾아 왔을 때는 다시 웃는데, 정황 설명이 하나도 안 되어 있지만 저대로라면 웃는 이유가 분명히 있다.\n결국 요조는 후반에, 자신이 인간으로서의 자격이 없다고 생각해버리고는, 이때부터 모든 활력을 잃어버린다. \u0026ldquo;지금 제게는 행복도 불행도 없습니다. 그저 모든 것은 지나갑니다. 소위 인간의 생애에서 아비규환 같이 살아온 동안 제가 단 한 가지 깨달은 것은, 그것뿐입니다. 그저 모든 것은 지나갈 뿐입니다.\u0026rdquo; 라고 하는데, 행복도 불행도 모두 지나가고 이제 아무것도 없다는 것을, 그 허무를 말하는 것인가. 인간의 생애를 \u0026lsquo;소위\u0026rsquo; 라고 표현하는 것은 마치 \u0026lsquo;나는 그런 생각을 한 적이 없지만 사람들이 그렇게 부르더라고. 이런 걸 말야\u0026rsquo; 라고 하는 것 같다.\n","permalink":"https://interp.blog/drafts/2017-02-07-%EC%9D%B8%EA%B0%84%EC%8B%A4%EA%B2%A9/","summary":"\u0026lsquo;인간실격\u0026rsquo; 이란 제목부터 뭔가 끌어당기는 것이 있었다. 오프닝에서는 충격을 받고 엔딩에서는 한숨이 나왔다. 무덤덤하게 작가의 일생을 나열하는 마지막 페이지에서는 흠칫했다. 소설의 내용과 일치하는 부분이 있었다. 부유한 집안에 태어나 자랐고, 여자와 자살기도를 했지만 본인은 실패했다는 점 등. 굴곡진 인생을 살아온 주인공 요조의 이야기가, 혹시 작가 자신의 이야기였을까.\n소설은 인간의 위선적인 태도를 경멸하고 두려워하면서도, 그 속에서 녹아들기 위해 그 자신마저도 위선을 가장한 광대짓을 하고 있는 주인공을 계속 보여준다. 그런데 그 거짓이 간파당하는 순간이 두 번 존재한다.","title":"인간실격"},{"content":"Code Macro를 자동완성으로 입력하는 방법은 쉽다. 중괄호({)를 시작으로 {code 까지 치면 자동완성 제안이 뜨기 때문이다. 그런데 이 Code block은 Java 문법을 하이라이팅하기 때문에, 다른 언어를 하이라이팅하려면 다음과 같이 해야 된다.\n 마우스로 박스를 클릭 Edit 클릭 Language에 언어를 선택하고 Save 클릭  이 얼마나 귀찮은 작업인가. 그냥 키보드로 치고 싶다면?\n위 애니메이션처럼 {code:\u0026lt;language\u0026gt;} 입력을 하면 된다. (애니메이션 예제는 SQL이다.) 콜론을 찍으면서 자동 완성이 사라지는데 당황하지 말고 전부 입력하면 된다. 원래는 {code:language=\u0026lt;language\u0026gt;} 같이 입력하도록 Confluence 매뉴얼에서 안내하고 있는데, 매크로의 맨 처음 파라메터는 그 attribute를 생략해도 인식되기 때문에 이게 가능하다.\n ","permalink":"https://interp.blog/confluence-code-macro-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EB%84%A3%EA%B8%B0/","summary":"Code Macro를 자동완성으로 입력하는 방법은 쉽다. 중괄호({)를 시작으로 {code 까지 치면 자동완성 제안이 뜨기 때문이다. 그런데 이 Code block은 Java 문법을 하이라이팅하기 때문에, 다른 언어를 하이라이팅하려면 다음과 같이 해야 된다.\n 마우스로 박스를 클릭 Edit 클릭 Language에 언어를 선택하고 Save 클릭  이 얼마나 귀찮은 작업인가. 그냥 키보드로 치고 싶다면?\n위 애니메이션처럼 {code:\u0026lt;language\u0026gt;} 입력을 하면 된다. (애니메이션 예제는 SQL이다.) 콜론을 찍으면서 자동 완성이 사라지는데 당황하지 말고 전부 입력하면 된다. 원래는 {code:language=\u0026lt;language\u0026gt;} 같이 입력하도록 Confluence 매뉴얼에서 안내하고 있는데, 매크로의 맨 처음 파라메터는 그 attribute를 생략해도 인식되기 때문에 이게 가능하다.","title":"Confluence Code Macro 빠르게 넣기"},{"content":"SQL SELECT에서 JOIN으로 만들어질 수 있는 SELECT 구문의 개수를 세려고 했다. (SQL을 모르면 다음 문단으로 가도 상관이 없다) 내 문제는, Join 할 테이블이 4개가 있는데 여기서 같은 Table을 JOIN해도 된다는 조건이 있는 상황이다.\n중복 조합 위 문제는 결국 \u0026lsquo;중복 선택이 가능하고, 순서는 상관없는\u0026rsquo; 조합을 구하는 문제와 같다. 일반 조합을 구하는 공식은 알고 있었지만 그 때는 중복 선택이 불가능하다. 중복 조합을 구하는 공식이 있을까?\n당연히 있다. 위키피디아 페이지에서 찾았는데, 아래와 같은 \u0026lsquo;일반 조합 계산 식\u0026rsquo;으로 바꿀 수 있다.\n","permalink":"https://interp.blog/%EC%A4%91%EB%B3%B5-%EC%A1%B0%ED%95%A9/","summary":"SQL SELECT에서 JOIN으로 만들어질 수 있는 SELECT 구문의 개수를 세려고 했다. (SQL을 모르면 다음 문단으로 가도 상관이 없다) 내 문제는, Join 할 테이블이 4개가 있는데 여기서 같은 Table을 JOIN해도 된다는 조건이 있는 상황이다.\n중복 조합 위 문제는 결국 \u0026lsquo;중복 선택이 가능하고, 순서는 상관없는\u0026rsquo; 조합을 구하는 문제와 같다. 일반 조합을 구하는 공식은 알고 있었지만 그 때는 중복 선택이 불가능하다. 중복 조합을 구하는 공식이 있을까?\n당연히 있다. 위키피디아 페이지에서 찾았는데, 아래와 같은 \u0026lsquo;일반 조합 계산 식\u0026rsquo;으로 바꿀 수 있다.","title":"중복 조합"},{"content":"MSSQL Server의 전신이 Sybase에서 개발한 DBMS라는 신기한(?) 말을 들었다. 독자적으로 개발한 게 아닌가? MS가 Sybase를 인수라도 한 것일까? 좀 더 자세히 알아보기로 했다. 관련 키워드로 검색했더니 \u0026lsquo;Microsoft가 인수를 통해 확보한 인기 제품들\u0026rsquo; 이란 IT World의 기사를 찾았다. 그런데 여기서 소개하는 SQL Server 페이지는 조금 다른 이야기를 하고 있었다. 인수라고 말하기도 뭣하고, 그렇다고 MS가 개발한 것도 아니라는 것이다.\n사실은, 다음 순서대로 사건(?)이 발생했다.\n 1987년, Unix 플랫폼에서 구동되는 Sybase에서 개발한 DBMS가 있었다. 그 이름은 Sybase SQL Server 이다! 1988년, 애쉬튼-테이트(Ashton-Tate) 그리고 MS와 협력해 OS/2에 Sybase SQL Server 를 포팅한다. 1992년, MS와 협력해 Windows NT에 Sybase SQL Server 를 포팅한다. 이 때 MS는 Windows 플랫폼에 구동되는 Sybase SQL Server의 저작권을 Sybase로부터 사들였고, 이름을 Microsoft SQL Server 로 변경한다. 이 때문에 Microsoft SQL Server에는 \u0026lsquo;원저작은 Sybase에 있다\u0026rsquo; 라는 표기를 1994년까지 반드시 해야만 했고, 두 제품은 이 때부터 서로 다른 길을 걷기 시작한다. 1996년, Sybase SQL Server는 새로운 버전을 발표하면서 제품 이름을 \u0026lsquo;Sybase ASE (Adaptive Server Enterprise)\u0026rsquo; 로 변경한다. 2010년, Sybase는 SAP에 인수되면서 해당 제품의 이름도 \u0026lsquo;SAP ASE\u0026rsquo; 로 바뀌게 된다.  결국 Sybase는 최근에야 SAP에 인수되었고, MS-SQL Server의 코드는 Sybase SQL Server 4.2.1 의 코드에서 갈라나와 2005 버전까지 해당 코드의 일부가 남아있었다고 한다.\n","permalink":"https://interp.blog/sybase%EC%99%80-ms-sql-server/","summary":"MSSQL Server의 전신이 Sybase에서 개발한 DBMS라는 신기한(?) 말을 들었다. 독자적으로 개발한 게 아닌가? MS가 Sybase를 인수라도 한 것일까? 좀 더 자세히 알아보기로 했다. 관련 키워드로 검색했더니 \u0026lsquo;Microsoft가 인수를 통해 확보한 인기 제품들\u0026rsquo; 이란 IT World의 기사를 찾았다. 그런데 여기서 소개하는 SQL Server 페이지는 조금 다른 이야기를 하고 있었다. 인수라고 말하기도 뭣하고, 그렇다고 MS가 개발한 것도 아니라는 것이다.\n사실은, 다음 순서대로 사건(?)이 발생했다.\n 1987년, Unix 플랫폼에서 구동되는 Sybase에서 개발한 DBMS가 있었다.","title":"Sybase와 MS SQL Server"},{"content":"개별 포스팅 페이지만 크롤링하면 될텐데, Archiving 된 페이지 (연도별/카테고리별/태그별) 들도 모두 크롤링해서 검색 엔진에 나타나는 블로그 글이 지저분해 진다. \u0026lsquo;2017년 1월에 쓴 글\u0026rsquo; 이라고 검색되는 항목은, 사실상 아무 쓸모가 없다.\n해답은 여기를 참고했다.\n Yoast SEO Dashboard의 Feature 탭에서, Advance 기능이 꺼져 있다면 Enable로 바꾸고 저장 새로운 탭이 추가되는데, Titles \u0026amp; Meta 로 이동 위 링크를 따라서 하면 되는데, 카테고리/태그 수집만 중지시키고 싶다면 Taxonomies 탭에 가서 Category / Tags 섹션의 항목을 전부 \u0026lsquo;noindex / disabled\u0026rsquo; 로 바꾼 후 저장  ","permalink":"https://interp.blog/yoast-seo-%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC-%ED%83%9C%EA%B7%B8-%ED%81%AC%EB%A1%A4%EB%A7%81-%EC%A4%91%EB%8B%A8/","summary":"개별 포스팅 페이지만 크롤링하면 될텐데, Archiving 된 페이지 (연도별/카테고리별/태그별) 들도 모두 크롤링해서 검색 엔진에 나타나는 블로그 글이 지저분해 진다. \u0026lsquo;2017년 1월에 쓴 글\u0026rsquo; 이라고 검색되는 항목은, 사실상 아무 쓸모가 없다.\n해답은 여기를 참고했다.\n Yoast SEO Dashboard의 Feature 탭에서, Advance 기능이 꺼져 있다면 Enable로 바꾸고 저장 새로운 탭이 추가되는데, Titles \u0026amp; Meta 로 이동 위 링크를 따라서 하면 되는데, 카테고리/태그 수집만 중지시키고 싶다면 Taxonomies 탭에 가서 Category / Tags 섹션의 항목을 전부 \u0026lsquo;noindex / disabled\u0026rsquo; 로 바꾼 후 저장  ","title":"Yoast SEO Archive 페이지 크롤링 중단하기"},{"content":"긴 이동시간, 버스 안에서 세 편의 성장문답 영상을 봤다. 급히 정리한 내용을, 여기에 옮겨 담았다.\n인맥이 없다고 생각된다면 인맥을 만드려면, 남들이 원하는 것을 내가 줄 수 있어야 성립된다. 받기만 하는 관계는 오래가지 않는다. 그럼 자기 성장이 뒷받침되어야 한다. 성장하는 방법은 strong link 보다는 weak link 에서 더욱 많은 기회를 얻게 된다. 왜냐하면 weak link가 새로운 이미지 구축과 발전에 도움이 되기 때문이다. 비사교적인 성격이라면 SNS를 통한 내 콘텐츠를 불특정다수, weak link에게 주라. SNS를 못한다면 적어도 주위 사람에게 내가 뭘 해줄 수 있는지 고민해보고 줘야한다. 결국 타인에 대한 관심이 중요하다. 내가 무작정 주는 것은 의미가 없다. – 기업분쟁연구소장 조우성 변호사\n역사지식이 부족하다고 느낀다면 역사 공부를 해야 하는 이유는 첫째로 아는 즐거움을 누리기 위해, 둘째로 남에게 존중받고 존경받는 기쁨을 누리기 위해서다. 역사 공부는 현실에 대한 의문에서 출발한다. 현실 문제는 항상 연역이 존재한다. 그 원인을 파악하려면 과거의 사건, 그 사건의 단초들과 그에 따른 해석을 통해 현실 문제에 대한 \u0026lsquo;이해\u0026rsquo;를 할 수 있게 된다. 해답을 낼 수 없더라도, 이해한다는 것은 삶에서 큰 도움이 된다. 역사 공부의 방법은, 이런 현실 문제에 대한 호기심에서 출발해야 한다. 그러나, 먼저 흥미진진한 역사소설 위주로 출발하는 것이 좋다. – 유시민 작가\n어떤 책을 읽어야 될지 모르겠다면 외계인이 지구에 와서 나를 데리고 5년동안 외계세계를 탐방할 수 있는 기회를 준다고 하자. 제한된 시간에 어떤 지식을 습득해야 할까. 당연히 외계인이 가장 많이 아는 것, 가장 사랑하는 고전을 읽고 와야 하지 않을까. 우리네 인생도 짧아서 똑같다고 생각한다. 그리고 첫 책은 끌리는 대로 고르는 게 낫다. 영화도, 음악도 제목이나 커버, 장르, 포스터와 시놉시스를 먼저 보고 들어간다. 책도 표지나 제목을 보고 고를 수 밖에. 하지만 실패할 확률이 매우 크므로, 많이 빌려서 골라 읽는 것을 추천한다. 자신에게 맞는 책은 분명 존재하니까. 그러면 좋아하는 책을 읽으면 된다. 개인적이지만 나는 내가 읽기 불편한 책을 좋아한다. 도저히 읽히지 않는 책들 말이다. 그런데 왜 좋아하냐면, 이런 미지의 영역이 선사하는 새로운 통찰이 존재하기 때문이다. 그래서 어렵더라도 읽는 게 좋다고 생각하는 것이다. – 채사장 작가\n","permalink":"https://interp.blog/%EC%84%B1%EC%9E%A5%EB%AC%B8%EB%8B%B5-%EC%9A%94%EC%95%BD/","summary":"긴 이동시간, 버스 안에서 세 편의 성장문답 영상을 봤다. 급히 정리한 내용을, 여기에 옮겨 담았다.\n인맥이 없다고 생각된다면 인맥을 만드려면, 남들이 원하는 것을 내가 줄 수 있어야 성립된다. 받기만 하는 관계는 오래가지 않는다. 그럼 자기 성장이 뒷받침되어야 한다. 성장하는 방법은 strong link 보다는 weak link 에서 더욱 많은 기회를 얻게 된다. 왜냐하면 weak link가 새로운 이미지 구축과 발전에 도움이 되기 때문이다. 비사교적인 성격이라면 SNS를 통한 내 콘텐츠를 불특정다수, weak link에게 주라.","title":"성장문답 요약"},{"content":"플래티넘 트로피를 가까스로(!) 딴 것도 시간이 꽤 흘렀는데, 블러드본 팁을 갱신해 본다. 팁이랄 건 없고, 일종의 마음가짐 같은 것이다.\n모든 적과 싸울 필요는 없다 가장 중요한 것은, 눈에 보이는 적을 모두 쓰러뜨리지 않아도 된다는 점이다. 기존 턴제 JRPG 처럼 앞의 적을 만나면 반드시 격파해야만 진행이 되는 게임이 아니다. 야수가 된 야남 시민을 신나게 도륙하는 무쌍류 게임도 아니다.\n물론 레벨업을 해야 하거나 아이템을 얻어야 한다면 이야기가 다르겠지만, 그저 이동을 목적으로 하는 경우라면, 굳이 싸울 이유 없다. 피해다니면 된다. 졸개들을 상대하는 것 조차 피곤한 일이라서, 괜히 시간만 지체되고 스트레스만 쌓인다.\n최대한 많이 찾아보자 블러드본을 나에게 중고로 팔아넘긴 사람이 푸념하길, 자기는 진료소 앞의 늑대를 맨 손으로 어떻게 잡아야 하는지 몇 시간동안 궁리했다고 한다. 사냥꾼의 꿈에서 주는 기본 무기를 주웠다면 수월하게 처치가 가능했을텐데 말이다. 그런 것도 안 알려주냐! 고 뭐라고 하던데, 어쩌겠나. 그것이 프롬게임인 것을 (!)\n아무튼, 다른 게임들 역시 숨겨진 요소가 있겠지만 이 게임은 정말로 샅샅이 뒤져야 한다. 분명히 숨겨진 길이나 아이템이나 예상치 못한 이벤트가 존재한다. 그런 이벤트가 예상과는 전혀 다른 장소로 안내해주기도 하지만, 대부분은 지름길이 숨겨져 있어서 편한 게임을 위해서는 반드시 찾아야 한다. 혹시 자연스러운 진행이 안 되는 경우 (앞에 너무 강한 적이 있거나, 잠겨있는 길이 있다면) 구석구석 내가 놓친 부분이 없는지 한번 더 돌아보는 걸 추천한다.\n이걸 위해서는 다음 세 가지를 참고해야 한다.\n 모든 길을 모조리 들러가며 익숙해져라. 함정이 있거나, 강한 적이 있어도 괜찮다. 소울 손해를 조금 보더라도, 이런 길이 있구나 파악해야 한다. 그래야 다음에 갈 만한 능력이 되면 찾아오지. 파괴 가능한 것은 모조리 파괴하고 다녀라. 나무 상자, 나무 통 등은 칼로 휘둘러서 깰 수도 있지만 단순히 구르기만 해도 와장창 깨진다. 나무 통으로 둘러싸인 곳 너머에는 샛길로 가는 입구가 막혀있을 수도 있다. 그리고 금이 갈라진 벽을 칼로 휘두르면 깨지는 경우가 있는데, 이 역시 숨겨진 장소를 발견할 수 있다. 아이템을 받았으면 반드시 설명을 읽는다. 이게 무슨 소리인가 싶을텐데, 설명에 맞는 추리력으로 아이템을 써 보자. 뜻하지 않은 이야기(?) 를 느낄 수 있다.  죽어도 되는 게임 마지막 팁은 팁이랄 것도 없다. 죽는 데에 스트레스 받지 마라.\n\u0026lsquo;내가 여기까지 오려고 들인 수혈액/수은탄이 몇개인데!\u0026rsquo; 라거나 \u0026lsquo;내가 벌어들인 피의 유지가 얼만데!\u0026rsquo; 라고 생각할 수도 있다. 그래도 나머지 아이템은 그대로 있는데? 피의 유지는 다시 벌면 되고, 꼭 회수해야 겠으면 죽은 자리에 가서 회수한 뒤 도망치면 된다. 수혈액/수은탄은 시간이야 조금 지체되겠지만, 수급 자체는 쉽다. 후반부에는 수혈액/수은탄 못 구해서 쩔쩔매지도 않을 거고. 그냥 마음의 안정을 유지한 채(?) 익히는 용도로 많이 죽는 수밖에 없다.\n개인적으로 개스코인 신부를 상대할 때, 중반부부터는 수혈액을 1-2개씩만 쓰고 패턴 연구/패링 연습만 해 봤다. 어차피 못 잡는단 생각이었으니까. 그런데 나중에 잡을 땐 정말 수혈액 2개만 써서 잡더라. 나중에 코스의 버려진 자식과의 최종전에서는, 패턴 운빨과 함께패링 타이밍을 기막히게 잡지 않으면 수혈액을 전부 써도 못 잡는다. 정말로 보스전 통계 상 가장 많이 죽었던 것 같다.\n  갈 길이 먼 초보자가 그나마 여기까지 오면서 느낀 점을 정리해 봤다. 이제부터 시작이다. 더욱 어려운 보스와 지역이 기다리고 있고, DLC 올드 헌터스 지역도 들어가야 된다. 게임은 즐거우라고 하는 건데, 어째 하면서 짜증과 비명만 느는 건 아닌지 걱정이다. 그래도 보스를 때려눕힌 다음 느껴지는 \u0026lsquo;해냈다!!\u0026rsquo; 라는 환희에 또 다시 중독되기 시작한 걸지도 모르겠다.\n","permalink":"https://interp.blog/%EB%B8%94%EB%9F%AC%EB%93%9C%EB%B3%B8-%EC%B4%88%EB%B0%98-%ED%8C%81/","summary":"플래티넘 트로피를 가까스로(!) 딴 것도 시간이 꽤 흘렀는데, 블러드본 팁을 갱신해 본다. 팁이랄 건 없고, 일종의 마음가짐 같은 것이다.\n모든 적과 싸울 필요는 없다 가장 중요한 것은, 눈에 보이는 적을 모두 쓰러뜨리지 않아도 된다는 점이다. 기존 턴제 JRPG 처럼 앞의 적을 만나면 반드시 격파해야만 진행이 되는 게임이 아니다. 야수가 된 야남 시민을 신나게 도륙하는 무쌍류 게임도 아니다.\n물론 레벨업을 해야 하거나 아이템을 얻어야 한다면 이야기가 다르겠지만, 그저 이동을 목적으로 하는 경우라면, 굳이 싸울 이유 없다.","title":"블러드본 팁"},{"content":"Confluence 단일 문서는, 페이지 좌측 상단의 Tools 메뉴에서 Export To PDF 로 가능하지만, 그 하위 문서들 또는 Space 전체 문서를 한 번에 뽑아내는 기능은 찾기가 조금 어려워서 따로 메모해 둔다. 출처는 바로 여기. 물론, 해당 문서가 존재하는 Space 에 권한을 가지고 있어야 된다. 반대로 이야기하면, Personal Space에서는 제약 없이 사용이 가능하다. 이 설명은 Confluence 5.4.3 에서 적용이 가능하다. 그 이하 버전 (특히 Confluence 4.x) 에서는 다른 방법을 쓰거나 플러그인을 써야 할 수도 있다.\n Confluence 웹 페이지에서, 출력을 원하는 문서로 이동한다. Confluence 상단 바에 보면 Browse 가 있다. 클릭해서 나오는 세부 메뉴 중 _Space Operation _를 클릭. 왼쪽에 PDF Export가 있다. 다른 포맷 (HTML, XML)도 있으니 선택하면 된다. 선택하면 Space 전체를 대상으로 뽑을 것인지, 아니면 특정 문서를 선택해서 뽑을 것인지 결정할 수 있다. 결정하면 오랜 (…) 시간이 지나서 PDF 파일로 출력된다.  ","permalink":"https://interp.blog/confluence-%EB%AC%B8%EC%84%9C-pdf-%EC%B6%9C%EB%A0%A5/","summary":"Confluence 단일 문서는, 페이지 좌측 상단의 Tools 메뉴에서 Export To PDF 로 가능하지만, 그 하위 문서들 또는 Space 전체 문서를 한 번에 뽑아내는 기능은 찾기가 조금 어려워서 따로 메모해 둔다. 출처는 바로 여기. 물론, 해당 문서가 존재하는 Space 에 권한을 가지고 있어야 된다. 반대로 이야기하면, Personal Space에서는 제약 없이 사용이 가능하다. 이 설명은 Confluence 5.4.3 에서 적용이 가능하다. 그 이하 버전 (특히 Confluence 4.x) 에서는 다른 방법을 쓰거나 플러그인을 써야 할 수도 있다.","title":"Confluence 문서들을 PDF로 출력"},{"content":"Firefox에서 Chrome으로 넘어가려고 하는데, 발목을 잡았던 것이 바로 \u0026lsquo;읽기 도구\u0026rsquo; 였다. Firefox는 내장된 게 있지만, Chrome은 그렇지 못했다. 누군가가 \u0026lsquo;Pocket을 쓰세요!\u0026rsquo; 라고 하던데, 이건 내가 나중에 두고두고 읽고 참고할 페이지를 모아두는 곳이지.. 그저 한 번 읽자고 보관하는 그런 서비스는 아니라고 생각했다. Chrome에서 엇비슷하게 구현해 둔 확장 프로그램은 많았지만 (EasyReader, Read Mode) 결국 Mercury Reader를 쓰기로 했다.\n웹 스토어 링크를 따라가면 설치가 가능하다. 그나마 내가 본 확장 프로그램 중에선 이게 가장 나아보인다. 테마 지원도 되고 (개인적으로 검은색 바탕으로 읽는 걸 좋아하는데, 앞의 두 프로그램은 그런 기능이 지원되지 않는 것 같다) 나무위키에서 테스트 해 보니 잘 된다. 그런데 Firefox 에 내장된 읽기 도구보다는 아무래도 불편한 것이,\n 음성 읽기가 안 된다. 이건 Firefox도 비교적 최근에 도입된 것이고 잘 쓰지도 않아서 큰 불편함은 없다. 링크의 title 부분이 팝업으롤 뜨지 않는다. 나무위키 페이지에서 주석을 가리키면 뜨는 설명이 안 나온다는 것이다   ","permalink":"https://interp.blog/chrome%EC%9D%98-%EC%9D%BD%EA%B8%B0-%EB%8F%84%EA%B5%AC-mecury-reader/","summary":"Firefox에서 Chrome으로 넘어가려고 하는데, 발목을 잡았던 것이 바로 \u0026lsquo;읽기 도구\u0026rsquo; 였다. Firefox는 내장된 게 있지만, Chrome은 그렇지 못했다. 누군가가 \u0026lsquo;Pocket을 쓰세요!\u0026rsquo; 라고 하던데, 이건 내가 나중에 두고두고 읽고 참고할 페이지를 모아두는 곳이지.. 그저 한 번 읽자고 보관하는 그런 서비스는 아니라고 생각했다. Chrome에서 엇비슷하게 구현해 둔 확장 프로그램은 많았지만 (EasyReader, Read Mode) 결국 Mercury Reader를 쓰기로 했다.\n웹 스토어 링크를 따라가면 설치가 가능하다. 그나마 내가 본 확장 프로그램 중에선 이게 가장 나아보인다.","title":"Chrome의 읽기 도구, Mecury Reader"},{"content":"리눅스에서 바이너리(Binary) 배포판을 받아 설치할 때, 필요한 라이브러리가 누락된 경우에 적용할 수 있는 방법이다. 이 방법은 yum 을 사용하는 RHEL 배포판 (CentOS, Fedora 등) 에서 적용 가능하다. 데비안/우분투 (Debian/Ubuntu) 계열에서 동일한 기능을 하는 명령을 찾는다면 여기를 참고하도록 하자.\n먼저 ldd 를 이용해서 빠진 라이브러리가 무엇인지 찾는다. 저기서는 libX11.so.6 가 없다고 나온다.\n해당 라이브러리를 제공하는 패키지 이름을 찾는다. yum whatprovides 명령으로 가능하다.\n여러 가지 있는데, 애석하게도 해당 라이브러리가 32-bit 이므로 ELSCLASS64 같은 에러를 맞기 싫으면 i686 으로 명명된 32-bit 패키지를 설치해야 한다. 다음 명령으로 설치를 완료하면 된다.\n","permalink":"https://interp.blog/binary-%EC%8B%A4%ED%96%89-%EC%8B%9C-%ED%95%84%EC%9A%94%ED%95%9C-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98/","summary":"리눅스에서 바이너리(Binary) 배포판을 받아 설치할 때, 필요한 라이브러리가 누락된 경우에 적용할 수 있는 방법이다. 이 방법은 yum 을 사용하는 RHEL 배포판 (CentOS, Fedora 등) 에서 적용 가능하다. 데비안/우분투 (Debian/Ubuntu) 계열에서 동일한 기능을 하는 명령을 찾는다면 여기를 참고하도록 하자.\n먼저 ldd 를 이용해서 빠진 라이브러리가 무엇인지 찾는다. 저기서는 libX11.so.6 가 없다고 나온다.\n해당 라이브러리를 제공하는 패키지 이름을 찾는다. yum whatprovides 명령으로 가능하다.\n여러 가지 있는데, 애석하게도 해당 라이브러리가 32-bit 이므로 ELSCLASS64 같은 에러를 맞기 싫으면 i686 으로 명명된 32-bit 패키지를 설치해야 한다.","title":"binary 실행 시 필요한 라이브러리 설치"},{"content":"","permalink":"https://interp.blog/%EB%8B%B9%EC%97%B0%ED%95%9C-%EC%83%9D%EB%9E%B5%EC%9D%80-%EC%97%86%EB%8B%A4/","summary":"","title":"당연한 생략은 없다"},{"content":"bash 쉘 스크립트를 작성할 때, 현재 디렉토리에 있는 파일 중 $1 문자열을 $2 문자열로 치환하라는 명령을 작성했다. 그런데 $1과 $2가 인식이 안 된다. 정확히 말하면 쉘이 \u0026lsquo;$1\u0026rsquo; 이라는 문자열을 찾아 \u0026lsquo;$2\u0026rsquo; 라는 문자열로 바꾸려고 시도했단 것이다. 이유가 뭘까? 바로 sed 명령을 작은 따옴표로 사용했기 때문이다.\n우선 방금 이야기한 간단한 스크립트를 보자. 작은 따옴표 안에서 변수를 참조하고 있는데, 잘 안 된 것이다.\nBash Reference 의 작은 따옴표/큰 따옴표 설명을 보면, 다음의 규칙이 존재한다.\n 작은 따옴표 안의 모든 문자들은, 문자 그대로의 의미를 지닌다.  즉, **작은 따옴표 안에서는 작은 따옴표를 표현할 수 없다**. 백슬래쉬를 앞에 두고 적어도 안 된다.  큰 따옴표 안의 대부분 문자들은, 문자 그대로의 의미를 지닌다. 단, 아래의 예외가 존재한다.   \u0026lt;/ol\u0026gt;  즉, 단순히 작은 따옴표(single quote)를 큰 따옴표(double quote)로 바꿨다. 명령 줄 안에서도 $가 변수로 인식된다.\n","permalink":"https://interp.blog/quote-in-bash/","summary":"bash 쉘 스크립트를 작성할 때, 현재 디렉토리에 있는 파일 중 $1 문자열을 $2 문자열로 치환하라는 명령을 작성했다. 그런데 $1과 $2가 인식이 안 된다. 정확히 말하면 쉘이 \u0026lsquo;$1\u0026rsquo; 이라는 문자열을 찾아 \u0026lsquo;$2\u0026rsquo; 라는 문자열로 바꾸려고 시도했단 것이다. 이유가 뭘까? 바로 sed 명령을 작은 따옴표로 사용했기 때문이다.\n우선 방금 이야기한 간단한 스크립트를 보자. 작은 따옴표 안에서 변수를 참조하고 있는데, 잘 안 된 것이다.\nBash Reference 의 작은 따옴표/큰 따옴표 설명을 보면, 다음의 규칙이 존재한다.","title":"bash 에서 따옴표를 쓸 때"},{"content":"퍼즐게임 The witness 글에서 언급하지 않았지만, 어떤 구역은 직접 미로를 돌아다니면서 문제를 풀어야 하는 곳이 있습니다. 문으로 가로막혀 있는 미로도 있고, 바닥에 얼룩이 지지 않은 곳으로 가야 하는 미로 등등 여러 단서를 예측해서 올바른 길로 통과해야 합니다. 판단이 서면 한 번에 갈 수 있겠지만, 대개는 직접 다니면서 부딪혀 봐야 합니다.\n개발자에게는 프로젝트나 일정을 진행하기 위해 \u0026lsquo;어떻게 할 것인지\u0026rsquo; 를 정하는 것을 디자인(설계) 이라고 합니다. 이 디자인을 정하는 것은, 마치 미로 입구 앞에 서서 어떻게 출구로 나가야 할지 정하는 작업입니다. 이 경우는 정해지지 않은 길 앞에 서서 어떻게 갈지 고민하는 것 자체가 아이러니긴 하지만요. 차라리 안개속이라고 하는 게 더 나은 비유일지도 모릅니다.\n이 미로를 내려다 볼 수 있을 정도로 키가 크지 않다면, 직접 다니면서 시행 착오를 겪는 것도 방법이 될 수 있습니다. 하지만 내려다 볼 수 있거나 막다른 길에 대한 단서를 파악할 수 있는 능력을 가지고 있다면, 손발을 고생시키지 않고도 설계가 가능합니다. (그래도 시도는 하겠지만요) 중요한 것은 어떻게 갈지 망설이다가 아무런 계획도 없는 상태입니다. 이런 상황이 가장 좋지 않다고 생각합니다.\n시간이 걸리더라도 돌아다니면 진척이 어느 정도 있을 뿐만 아니라, 모르고 있던 단서를 찾을 수 있는 능력도 생기게 되니까요. 모두가 키가 크진 않을 뿐더러, 그런 능력을 모두가 가지고 있지도 않습니다. 그러니 설계에서 너무 많은 경우의 수를 만들고 탐색하기 보다는, 미로를 많이 지나온 사람에게 묻던지 자신의 통찰이나 직관으로 결정을 하던 간에 어쨌든 앞으로 나가야 하지 않을까요? 어쨌건 목표가 정해졌고 시간은 한정되어 있으니까 말입니다.\n추가하자면, 해석을 과하게 해서 이 룰을 인생 전체에 적용하진 않았으면 합니다. 인생은 완결되는 목표가 없으니까요. 그리고 신중하게 고민하는 그 자체도 삶입니다. 엉뚱하게 생각하실 분이 있어 몇 줄 더 남깁니다.\n","permalink":"https://interp.blog/%EB%94%94%EC%9E%90%EC%9D%B8%EC%9D%80-%EB%AF%B8%EB%A1%9C/","summary":"퍼즐게임 The witness 글에서 언급하지 않았지만, 어떤 구역은 직접 미로를 돌아다니면서 문제를 풀어야 하는 곳이 있습니다. 문으로 가로막혀 있는 미로도 있고, 바닥에 얼룩이 지지 않은 곳으로 가야 하는 미로 등등 여러 단서를 예측해서 올바른 길로 통과해야 합니다. 판단이 서면 한 번에 갈 수 있겠지만, 대개는 직접 다니면서 부딪혀 봐야 합니다.\n개발자에게는 프로젝트나 일정을 진행하기 위해 \u0026lsquo;어떻게 할 것인지\u0026rsquo; 를 정하는 것을 디자인(설계) 이라고 합니다. 이 디자인을 정하는 것은, 마치 미로 입구 앞에 서서 어떻게 출구로 나가야 할지 정하는 작업입니다.","title":"디자인은 미로"},{"content":"원문 : http://vim.wikia.com/wiki/Search_and_replace\nbackreference (패턴의 앞/뒤에서 조건으로 둘 수 있는 문자열이지만, 실제 패턴의 치환에는 해당하지 않는 요소) 를 사용하려다 보니 위키 페이지를 정독했다. 기본적인 구문은 넘어간다.\n아래는, 공백이나 슬래쉬(/) 외에다른 문자를 달고 있는 astar(asterisk) 다음에, 공백을 추가하는 것이다. (슬래쉬를 뺀 이유는 주석 때문에)\n","permalink":"https://interp.blog/vim-%EA%B2%80%EC%83%89%EA%B3%BC-%EC%B9%98%ED%99%98/","summary":"원문 : http://vim.wikia.com/wiki/Search_and_replace\nbackreference (패턴의 앞/뒤에서 조건으로 둘 수 있는 문자열이지만, 실제 패턴의 치환에는 해당하지 않는 요소) 를 사용하려다 보니 위키 페이지를 정독했다. 기본적인 구문은 넘어간다.\n아래는, 공백이나 슬래쉬(/) 외에다른 문자를 달고 있는 astar(asterisk) 다음에, 공백을 추가하는 것이다. (슬래쉬를 뺀 이유는 주석 때문에)","title":"vim backreference"},{"content":"『창작과비평』 (이하 창비) 창간 50주년을 기념해, 공부에 대한 강연을 진행했다고 합니다. 공부는 학창시절에만 하는 게 아닌, 평생 하는 일이라는 데에 많은 분들이 공감하고 계실텐데, 그만큼 많은 분들이 찾아왔다고 합니다. 저도 미리 알았더라면 슬쩍 신청이나 해 봤을텐데, 그 아쉬움을 달래기 위해서인지 5명의 연사가 말한 내용을 한 권씩 엮어 \u0026lsquo;공부의 시대\u0026rsquo; 라는 책들이 나왔습니다. 각각의 리뷰를 따로 써야 할 만큼 값진 한 마디가 많았던 책인데, 여유가 있을 때 꼭 써보고 싶습니다. 지금은 단순히 책을 읽다가 든 생각을 정리하려고 합니다.\n강연을 진행하신 분들 모두 많은 책을 언급하고 있는데, 물론 강연내용은 미리 준비된 상태겠지만 질의응답 시간에 어떤 책을 권하거나 하는 것은 즉각적으로 말하는 것이니까, 저는 이게 굉장히 신기했습니다. \u0026lsquo;과거에 내가 이런 책을 읽었는데, 이 부분이 기억에 남는다.\u0026rsquo; 라고 하시는 부분들이요. 또 제 주위에서 책을 많이 읽으시는 분들은, 평소에도 심지어 술을 마실 때도 책 이야기를 곧잘 하십니다. 이야기 하다 보니 생각났는데 그 책 읽어봤냐고 말이죠. 물론 저는 들을 때마다 잘 모르겠다 합니다. 그렇다고 부끄러운 건 없고, 나중에 기회가 되면 서점에서 한번 들춰봐야겠다 하고 스마트폰에 끄적여두는 식입니다. 모르는 걸 부끄러워서 아는 척 하는게 더욱 자연스럽지 못합니다.\n이야기가 샜는데, 책에 박식한 사람을 보면 경외감 같은게 생깁니다. 하지만 드라마나 영화의 줄거를 줄줄 외거나 누가 나왔고 어떤 대사를 했는지 기억하는 사람도 많습니다. 저도 영화나 게임 장면은 잘 기억하고 대화에 맞춰 이야기하거나 추천해주는 편입니다. 물론 어디 가서 나 이만큼 안다고 자랑하고 다니진 않습니다만. 그렇죠, 미디어의 범위를 한정하지 않는다면 사람들은 모두 저마다의 추억과 기록을 언제든지 꺼낼 수 있는 능력이 있다고 봅니다. 하지만 왜 젊은이들은 책이 아니게 된 것일까. 미디어가 발전하기 전에 접하기가 쉬운 매체 중 하나는 바로 책이 아니었을까, 그래서 전체 대중매체에서 차지하는 비중의 차이가 있기 때문에 현대인들이 추억하는 서적의 풀(Pool)은 어쩌면 좁을 수 밖에 없다고 저는 생각합니다.\n그러나 (매체를 뜯어 볼 줄 아는 능력을 가진 평론가 분들을 제외한) 일반인 중에서 영화를 많이 아는 사람보다는 책을 많이 읽고 이야기하는 사람을 조금 더 높이 평가하는 것 같습니다. 다분히 제 생각이긴 하지만, 이유가 뭘까요. 영화는 보는 것으로 끝나는 행동 같아 보이는데, 책은 보고 상상하고 이해해야 하는 작업이 추가로 들어간다고 생각해서인지도 모르겠습니다. 더 많은 종류의 지식활동을 병행한 사람이 조금 더 부지런해 보여서가 아닐까요.\n","permalink":"https://interp.blog/%EC%B1%85%EC%9D%84-%EC%9D%B8%EC%9A%A9%ED%95%98%EB%8A%94-%ED%9E%98/","summary":"『창작과비평』 (이하 창비) 창간 50주년을 기념해, 공부에 대한 강연을 진행했다고 합니다. 공부는 학창시절에만 하는 게 아닌, 평생 하는 일이라는 데에 많은 분들이 공감하고 계실텐데, 그만큼 많은 분들이 찾아왔다고 합니다. 저도 미리 알았더라면 슬쩍 신청이나 해 봤을텐데, 그 아쉬움을 달래기 위해서인지 5명의 연사가 말한 내용을 한 권씩 엮어 \u0026lsquo;공부의 시대\u0026rsquo; 라는 책들이 나왔습니다. 각각의 리뷰를 따로 써야 할 만큼 값진 한 마디가 많았던 책인데, 여유가 있을 때 꼭 써보고 싶습니다. 지금은 단순히 책을 읽다가 든 생각을 정리하려고 합니다.","title":"책을 인용하는 힘"},{"content":"MapR의 Monitoring Metric 을 보다가, CPUNICE 라는 컬럼 이름에 다음과 같은 설명이 있었습니다. Amount of CPU time used by processes with a positive nice value. 오잉, 프로세스의 CPU 사용 시간인 것 까진 알겠는데, 양의 좋은 값이라니요? 실은, nice value가 다음과 같은 뜻이라고 합니다.\n Nice 값은 CPU의 스케줄링 우선순위를 의미합니다. 값의 범위는 +19 ~ -20으로, 숫자가 높을 수록 우선 순위는 낮습니다. man 2 getpriority 를 참고하시면, 더 자세한 정보가 나와 있습니다. 프로세스를 실행할 때 nice 명령어로 우선 순위를 부여할 수 있고, renice 명령어로 우선 순위를 조정할 수 있습니다. 우선 순위를 높이기 위해선, 슈퍼 유저 권한이 (root) 필요합니다. (출처)\n 참고로, getpriority() 는 프로세스의 현재 우선순위를 반환하는 인터페이스입니다. setpriority() 역시 존재하는데, 이 함수를 실행할 때 값을 낮추려면 슈퍼 유저 권한이 있어야 합니다. (값을 높이는 건 권한이 필요 없나 봅니다. 테스트 해 봐야 겠습니다.)\n","permalink":"https://interp.blog/%ED%94%84%EB%A1%9C%EC%84%B8%EC%84%9C%EC%9D%98-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%EA%B0%92-nice/","summary":"MapR의 Monitoring Metric 을 보다가, CPUNICE 라는 컬럼 이름에 다음과 같은 설명이 있었습니다. Amount of CPU time used by processes with a positive nice value. 오잉, 프로세스의 CPU 사용 시간인 것 까진 알겠는데, 양의 좋은 값이라니요? 실은, nice value가 다음과 같은 뜻이라고 합니다.\n Nice 값은 CPU의 스케줄링 우선순위를 의미합니다. 값의 범위는 +19 ~ -20으로, 숫자가 높을 수록 우선 순위는 낮습니다. man 2 getpriority 를 참고하시면, 더 자세한 정보가 나와 있습니다.","title":"프로세서의 우선순위 값 : nice"},{"content":"Eclipse CDT를 Ubuntu 에서 쓰려니까, GTK3 환경에서 자꾸 실행된다. 그 때문에 오버레이 스크롤이고 뭐고 전부 느린 현상이 발생해서, GTK2 환경에서 실행시키려고 했다. 환경설정 파일도 고치고 이것저것 해 봤지만 안 되니까, 결국 아래와 같이 1회에 한해 SWT_GTK3 값을 바꾸는 편법을 사용했다.\nSWT_GTK3을 끄면 GTK2 로 eclipse가 실행된다. 그리고 disown 옵션으로 background process를 실행하면 해당 터미널을 종료해도 프로세스가 상주하게 된다. 정확히 말하면 \u0026lsquo;Job 테이블에서 해당 Job을 제거한다 (Remove jobs from the table of active job.)\u0026rsquo; 라는 명령이다.\n","permalink":"https://interp.blog/eclipse-ubuntu%EC%97%90%EC%84%9C-gtk2%EB%A1%9C-%EC%8B%A4%ED%96%89/","summary":"Eclipse CDT를 Ubuntu 에서 쓰려니까, GTK3 환경에서 자꾸 실행된다. 그 때문에 오버레이 스크롤이고 뭐고 전부 느린 현상이 발생해서, GTK2 환경에서 실행시키려고 했다. 환경설정 파일도 고치고 이것저것 해 봤지만 안 되니까, 결국 아래와 같이 1회에 한해 SWT_GTK3 값을 바꾸는 편법을 사용했다.\nSWT_GTK3을 끄면 GTK2 로 eclipse가 실행된다. 그리고 disown 옵션으로 background process를 실행하면 해당 터미널을 종료해도 프로세스가 상주하게 된다. 정확히 말하면 \u0026lsquo;Job 테이블에서 해당 Job을 제거한다 (Remove jobs from the table of active job.","title":"Eclipse Ubuntu에서 GTK2로 실행"},{"content":"Jekyll은 확실히 좋다 그런데 왜 WordPress 인가 무료 호스팅으로 커버할 수 없겠지만, 그래도 국내엔 괜찮은 호스팅이 많다. 최소한의 비용은 투자되어도 좋다고 생각한다. 해커의 공격을 받을 수 있겠지만, 지속적인 관리를 통한다면 못 할 게 뭐가 있을까. 그리고 그렇게 인기있는 블로거도 아닌데 말이다.속도 문제는 플러그인을 최소화하고 테마를 간소하게 만들어서 캐싱을 하도록 했다. 그리고 웹 브라우저를 띄우고 글을 쓰는 것? 이것 때문에 사용한다 🙂\n","permalink":"https://interp.blog/jekyll-vs-wordpress/","summary":"Jekyll은 확실히 좋다 그런데 왜 WordPress 인가 무료 호스팅으로 커버할 수 없겠지만, 그래도 국내엔 괜찮은 호스팅이 많다. 최소한의 비용은 투자되어도 좋다고 생각한다. 해커의 공격을 받을 수 있겠지만, 지속적인 관리를 통한다면 못 할 게 뭐가 있을까. 그리고 그렇게 인기있는 블로거도 아닌데 말이다.속도 문제는 플러그인을 최소화하고 테마를 간소하게 만들어서 캐싱을 하도록 했다. 그리고 웹 브라우저를 띄우고 글을 쓰는 것? 이것 때문에 사용한다 🙂","title":"Jekyll vs. WordPress"},{"content":"여기에서 지목하는 다음 7가지를 알아봅시다.\n 제목과 내용 사이 한 줄을 넣는다. 제목은 50자 내외로 적는다. 제목 첫 글자는 대문자로 한다. 제목에는 마침표로 끝내지 않는다. 제목은 명령법으로 작성한다. 내용은 한 줄에 72자를 넘지 않도록 줄바꿈한다. 내용은 \u0026lsquo;어떻게\u0026rsquo; 수정했는지 적지 말고, \u0026lsquo;무엇을\u0026rsquo; \u0026lsquo;왜\u0026rsquo; 수정했는지 작성하라.  예를 들어,\n제목 제목은 최대한 간결하게, 마침표 없이 명령조로 작성해야 합니다. 제가 자주 본 commit 제목은 \u0026lsquo;Fixed issue #32\u0026rsquo; 같은 식인데, 이건 명령조도 아니고 무엇을 수정했는지도 모호하거든요. issue numbering 을 꼭 해야 한다면 \u0026lsquo;내용\u0026rsquo;에 작성하도록 합시다. 마지막에 \u0026lsquo;Resolved : #32\u0026rsquo; 같은 식으로 언급해도, 이슈 트래커에서 원활히 인식되기 때문입니다.\n내용 줄바꿈을 자동으로 하지 않기 때문에 git log pull 같은 명령으로 보면 눈이 아플 정도로 긴(…) 로그를 볼 수 있습니다. 그래서 간결하게 쓰는 것이 가장 좋겠지만, 줄바꿈을 수동으로 하거나 다음 문단에서 목록 형태로 나열하는 것을 추천합니다. 그리고 내용에 들어갈 부분에는 \u0026lsquo;어떻게\u0026rsquo; 수정했는지 설명하는 것은 별 효과가 없는 것 같다고 하는데, 공감이 가는 부분입니다. 해당 이유를 번역해 보면 다음과 같습니다.\n  ","permalink":"https://interp.blog/%EC%A2%8B%EC%9D%80-git-commit-log-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0/","summary":"여기에서 지목하는 다음 7가지를 알아봅시다.\n 제목과 내용 사이 한 줄을 넣는다. 제목은 50자 내외로 적는다. 제목 첫 글자는 대문자로 한다. 제목에는 마침표로 끝내지 않는다. 제목은 명령법으로 작성한다. 내용은 한 줄에 72자를 넘지 않도록 줄바꿈한다. 내용은 \u0026lsquo;어떻게\u0026rsquo; 수정했는지 적지 말고, \u0026lsquo;무엇을\u0026rsquo; \u0026lsquo;왜\u0026rsquo; 수정했는지 작성하라.  예를 들어,\n제목 제목은 최대한 간결하게, 마침표 없이 명령조로 작성해야 합니다. 제가 자주 본 commit 제목은 \u0026lsquo;Fixed issue #32\u0026rsquo; 같은 식인데, 이건 명령조도 아니고 무엇을 수정했는지도 모호하거든요.","title":"좋은 Git Commit Log 작성하기"},{"content":"GNU Make에서는 ‘Recipe Echoing’ 이라고 부르는데, 아무튼 일반적으로 나오는 컴파일 명령어 줄을 보고 싶지 않고 Warning/Error 만 확인하고자 할 때 사용할 수 있는 명령을 정리한다. 완벽한 해결책은 아닌게, 어떤 파일이 통과되는지 여부는 간단하게나마 확인이 가능해야 하기 때문이다. 이 방법으로는 통과되는 파일들의 목록을 전혀 볼 수 없다.\n이걸 대체하고 싶어서 나름 머리를 굴려서 이런 Rule을 덮어 썼다.\n","permalink":"https://interp.blog/recipe-echoing-in-compiling/","summary":"GNU Make에서는 ‘Recipe Echoing’ 이라고 부르는데, 아무튼 일반적으로 나오는 컴파일 명령어 줄을 보고 싶지 않고 Warning/Error 만 확인하고자 할 때 사용할 수 있는 명령을 정리한다. 완벽한 해결책은 아닌게, 어떤 파일이 통과되는지 여부는 간단하게나마 확인이 가능해야 하기 때문이다. 이 방법으로는 통과되는 파일들의 목록을 전혀 볼 수 없다.\n이걸 대체하고 싶어서 나름 머리를 굴려서 이런 Rule을 덮어 썼다.","title":"Recipe Echoing in Compiling"},{"content":"Image Rescue3 Recuva Photorec ","permalink":"https://interp.blog/%EC%82%AC%EC%A7%84-%EB%B3%B5%EA%B5%AC-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%82%AC%EC%9A%A9%EA%B8%B0/","summary":"Image Rescue3 Recuva Photorec ","title":"사진 복구 프로그램 사용기"},{"content":"따라서, pthread_mutex가 이미 unlock되었다면 unlock() 함수를 호출하지 않도록 해야 한다.\n","permalink":"https://interp.blog/pthread_mutex_unlock-%EC%A4%91%EB%B3%B5-%ED%98%B8%EC%B6%9C/","summary":"따라서, pthread_mutex가 이미 unlock되었다면 unlock() 함수를 호출하지 않도록 해야 한다.","title":"pthread_mutex_unlock() 중복 호출"},{"content":"","permalink":"https://interp.blog/%EC%95%84%EC%88%98%EB%9D%BC-2016/","summary":"","title":"아수라 (2016)"},{"content":"","permalink":"https://interp.blog/%EB%91%A0-doom-2016/","summary":"","title":"둠 (DOOM, 2016)"},{"content":"책「TED TALKS」에서는, 강연자가 다른 전문가처럼 굴지 않았으면 한다고 주문하는 부분이 있다. 공학자가 소설가처럼 각종 수사와 미려한 문장으로 말하려는 것보다, 공학자 그대로의 객관적이고 서술적인 설명을 통해 연설하는 것이 가장 자연스럽기 때문이다. 물론, 청중의 지식 수준을 무시한 채로 진행하라는 것은 아니지만 말이다.\n또, 책에서는 고대에 진행되었을 연설 장면을 묘사하는데, 모닥불에 빙 둘러앉은 부족원들 사이로 연륜 있는 강연자가 나서서 모두에게 뭔가를 말하는 장면이다. 그러면, 강연자가 그리는 세계를 같이 상상하며 감화되는 것이다. 가수의 목소리를 직접 들을 수 있는 콘서트 장에 갔던 기억을 떠올려 본다. 곡에서 울리는 악기 소리, 가수가 읊조리는 가사와 음정, 분위기에 맞춰 움직이는 조명. 모든 것이 가수가 만든 프레젠테이션인 것이다. 본인의 노래를 잘 들어주고 공감해주면 좋겠다는 \u0026lsquo;연설\u0026rsquo;인 것이다. 덕분에 큰 공감이 되었던 기억이 난다.\n","permalink":"https://interp.blog/%EC%A0%84%EB%AC%B8%EA%B0%80-%EA%B7%B8-%EC%9E%90%EC%B2%B4%EB%A1%9C%EC%9D%98-%EC%97%B0%EC%84%A4/","summary":"책「TED TALKS」에서는, 강연자가 다른 전문가처럼 굴지 않았으면 한다고 주문하는 부분이 있다. 공학자가 소설가처럼 각종 수사와 미려한 문장으로 말하려는 것보다, 공학자 그대로의 객관적이고 서술적인 설명을 통해 연설하는 것이 가장 자연스럽기 때문이다. 물론, 청중의 지식 수준을 무시한 채로 진행하라는 것은 아니지만 말이다.\n또, 책에서는 고대에 진행되었을 연설 장면을 묘사하는데, 모닥불에 빙 둘러앉은 부족원들 사이로 연륜 있는 강연자가 나서서 모두에게 뭔가를 말하는 장면이다. 그러면, 강연자가 그리는 세계를 같이 상상하며 감화되는 것이다. 가수의 목소리를 직접 들을 수 있는 콘서트 장에 갔던 기억을 떠올려 본다.","title":"전문가 그 자체로의 연설"},{"content":"  ","permalink":"https://interp.blog/todo%EB%A5%BC-%EB%8B%A4%EB%A3%A8%EA%B8%B0/","summary":"  ","title":"TODO를 다루기"},{"content":"모바일 제목이 줄바꿈 될 때 단어가 아니라 음절 단위로 잘려서 보기 흉했다. 다음과 같이 처리가 가능했다.\n ","permalink":"https://interp.blog/css%EB%A1%9C-%ED%95%9C%EA%B8%80-%EB%8B%A8%EC%96%B4-word-break/","summary":"모바일 제목이 줄바꿈 될 때 단어가 아니라 음절 단위로 잘려서 보기 흉했다. 다음과 같이 처리가 가능했다.\n ","title":"CSS로 한글 단어 word-break"},{"content":"","permalink":"https://interp.blog/243/","summary":"","title":"변하는 인연 속에서"},{"content":"","permalink":"https://interp.blog/gdb%EB%A1%9C-machine-code-%EB%A0%88%EB%B2%A8-%EB%94%94%EB%B2%84%EA%B9%85/","summary":"","title":"gdb로 Machine Code 레벨 디버깅"},{"content":"ibus -\u0026gt; fcitx VirtualBox coding/terminal font D2Coding 폰트를 사용해 보려고 한다. Powerline supported font 를 받기 위해 여기를 참고했다. Github에 있는 Powerline supported D2Coding 보다 더 깔끔하다. 대 만족!\n","permalink":"https://interp.blog/ubuntu-14-04-16-04-%EC%97%85%EA%B7%B8%EB%A0%88%EC%9D%B4%EB%93%9C/","summary":"ibus -\u0026gt; fcitx VirtualBox coding/terminal font D2Coding 폰트를 사용해 보려고 한다. Powerline supported font 를 받기 위해 여기를 참고했다. Github에 있는 Powerline supported D2Coding 보다 더 깔끔하다. 대 만족!","title":"Ubuntu 14.04 \u003e 16.04 업그레이드"},{"content":"","permalink":"https://interp.blog/%EB%8B%A8%EA%B8%B0%EA%B0%84%EC%97%90-%EC%9E%98-%ED%95%98%EB%8A%94-%EA%B2%83/","summary":"","title":"단기간에 잘 하는 것"},{"content":"","permalink":"https://interp.blog/%EB%AA%A9%ED%91%9C%EB%8F%84-%EC%A4%91%EC%9A%94%ED%95%98%EA%B3%A0-%EA%B2%BD%ED%97%98%EB%8F%84-%EC%A4%91%EC%9A%94%ED%95%98%EB%8B%A4/","summary":"","title":"목표도 중요하고 경험도 중요하다"},{"content":"원인은 간단하다. ddd에 설정된 폰트로 정상 출력할 수 없는 문자가 포함되어 있기 때문이다. 바로 한글 (코멘트) 때문이다. 해결책은 2가지.\n 한글 코멘트를 쓰지 않는다 (…) ddd 실행 전에 다음의 환경변수를 지정한다. $ export LC_ALL=C   ","permalink":"https://interp.blog/ddd%EC%97%90%EC%84%9C-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C-%ED%8C%A8%EB%84%90-%EB%AC%B8%EC%A0%9C-2/","summary":"원인은 간단하다. ddd에 설정된 폰트로 정상 출력할 수 없는 문자가 포함되어 있기 때문이다. 바로 한글 (코멘트) 때문이다. 해결책은 2가지.\n 한글 코멘트를 쓰지 않는다 (…) ddd 실행 전에 다음의 환경변수를 지정한다. $ export LC_ALL=C   ","title":"ddd에서 소스코드 패널 문제"},{"content":"","permalink":"https://interp.blog/ssh-public-key-%EA%B5%90%ED%99%98-%EC%8B%A4%ED%8C%A8-%EC%8B%9C/","summary":"","title":"SSH Public Key 교환 실패 시"},{"content":"초반에 비밀번호를 풀지 않고도 전화를 걸 수 있는 방법이 있다. 긴급 전화이다. 긴급 전화로 119 에 연결하면 관할 소방서로 연결되지만 주인공이 무심결에 \u0026lsquo;국가안보부에 갇혀있다\u0026rsquo; 고 말하게 되고, 상담원이 망설이면서 \u0026lsquo;국가안보부로 연결됩니다\u0026rsquo; 라는 말만 하고는 전화가 끊긴다. 여기서 알 수 있는 점은, 게임 시작 전에 주인공이 누구에게 납치되어 왔는지 이미 알고 있다는 것이다.\n도전 과제 – 스탠리 앱에 390 이라고 적혀있는 앱을 한 번 클릭하면 4885가 문자로 \u0026lsquo;쓸데없는 짓 말라\u0026rsquo; 고 한다. 이걸 몇번 더 연달아 클릭하면 갑자기 4885가 \u0026lsquo;음.. 그럼 50번 정도 클릭해 볼래?\u0026rsquo; 라고 한다. 계속 클릭하면 \u0026lsquo;이건 우화가 아니야, 그러니까 하던 일 해\u0026rsquo; 라는 4885의 마지막 메시지가 도착하면서 도전 과제가 달성된다. 스탠리 우화도 아직 엔딩을 다 보지 못했는데… 앱 제목인 390은 뭘 의미하는 걸까.\n도전 과제 – 피핑톰 Follow 앱은 계속 비밀번호를 틀려도 힌트가 주어지지 않는다. (힌트 없는데? 라고 되려 약올린다) 끈기있게 계속 틀리면(?) 비밀번호 초기화 코드를 받을 수 있는 메뉴가 뜬다. 이 메뉴를 통해 메시지를 받을 수 있는데, 처음엔 \u0026lsquo;CALL\u0026rsquo; 이 오고 한번 더 받으면 \u0026lsquo;BALL\u0026rsquo; 이 온다. 계속 초기화 코드를 받으면 두 문자가 그냥 번갈아 온다. 아무런 조건없이 번갈아 오기 때문에, 단서는 여기서 끝이다. 분명히 CALL이나 BALL이 같은 비밀번호를 가리켜야 하는 상황이라는 점을 고려했는데, 문득 저 영어를 그대로 자판에 치면 숫자가 되는 경우가 있는지 생각해보니 있었다. 쿼티 자판이 아니라 3×4 배열의 휴대폰 자판 배열이라면! abc는 2이고 l이 위치한 숫자는 5이다. CALL이나 BALL이나 모두 \u0026lsquo;2255\u0026rsquo;를 누를 수 밖에 없으니, 확신을 갖고 풀었고 바로 풀 수 있었다. 주의할 점은, 초기화 코드를 받기 전까지는 틀릴 수 밖에 없다.\n","permalink":"https://interp.blog/replica/","summary":"초반에 비밀번호를 풀지 않고도 전화를 걸 수 있는 방법이 있다. 긴급 전화이다. 긴급 전화로 119 에 연결하면 관할 소방서로 연결되지만 주인공이 무심결에 \u0026lsquo;국가안보부에 갇혀있다\u0026rsquo; 고 말하게 되고, 상담원이 망설이면서 \u0026lsquo;국가안보부로 연결됩니다\u0026rsquo; 라는 말만 하고는 전화가 끊긴다. 여기서 알 수 있는 점은, 게임 시작 전에 주인공이 누구에게 납치되어 왔는지 이미 알고 있다는 것이다.\n도전 과제 – 스탠리 앱에 390 이라고 적혀있는 앱을 한 번 클릭하면 4885가 문자로 \u0026lsquo;쓸데없는 짓 말라\u0026rsquo; 고 한다.","title":"Replica"},{"content":"1. Kernel 업데이트 2. BIOS의 Secure Boot 기능을 끄는 방법  재부팅 후, BIOS 설정으로 이동한다. 고급 모드로 진입한다. 부팅 탭에서, 안전 부팅 (Secure Book) 소항목으로 이동한다. 운영체제 종류(OS Type)가 \u0026lsquo;Windows UFEI\u0026rsquo; 로 되어 있는지 확인한다. 만약 \u0026lsquo;Other OS\u0026rsquo;로 되어 있다면 \u0026lsquo;Windows UFEI\u0026rsquo;로 설정해 주자. (잠시만 할 것이다) 그러면 키 관리 (Key Management) 가 아래 소항목으로 뜨는데, 여기로 이동한다. 맨 위에 \u0026lsquo;안전 부팅 키 지우기(Clear secure boot keys)\u0026rsquo; 를 선택한 뒤 OK를 누른다. 이전 화면으로 돌아와서, 운영체제 종류(OS Type)을 \u0026lsquo;Other OS\u0026rsquo; 로 설정한다. 바이오스 내용을 저장한 뒤 재부팅한다.   ","permalink":"https://interp.blog/virtualbox-%EA%B0%80-%EC%95%88-%EB%90%A0-%EB%95%8C/","summary":"1. Kernel 업데이트 2. BIOS의 Secure Boot 기능을 끄는 방법  재부팅 후, BIOS 설정으로 이동한다. 고급 모드로 진입한다. 부팅 탭에서, 안전 부팅 (Secure Book) 소항목으로 이동한다. 운영체제 종류(OS Type)가 \u0026lsquo;Windows UFEI\u0026rsquo; 로 되어 있는지 확인한다. 만약 \u0026lsquo;Other OS\u0026rsquo;로 되어 있다면 \u0026lsquo;Windows UFEI\u0026rsquo;로 설정해 주자. (잠시만 할 것이다) 그러면 키 관리 (Key Management) 가 아래 소항목으로 뜨는데, 여기로 이동한다. 맨 위에 \u0026lsquo;안전 부팅 키 지우기(Clear secure boot keys)\u0026rsquo; 를 선택한 뒤 OK를 누른다.","title":"Virtualbox가 안 될 때"},{"content":"새로운 개념을 처음 배우기 시작할 때, 쏟아져 나오는 여러 튜토리얼 매체를 접할 수 있다. 이걸 무턱대고 따라하는 것보다는, 숨어있는 의미를 이해하고 넘어가야 되지 않을까 하는 강박이 생기기 마련이다. 어느 정도의 수준은 필요할지 몰라도 모든 개념을 이해하면서 튜토리얼을 따라가는 것은 여러 면에서 부적합하다는 이야기를 하고 싶다.\n먼저, 새로운 개념이 꼭 필요한 것이라면 모르겠지만 우리는 하루에도 수 십번의 개념을 접하게 된다. 흥미가 있는 것인지, 업무에 필요한 것인지 따지지 않고 밝게 빛나는 형광등에 모여든 나방 한마리 처럼 그저 가까이 다가가는 경우에는 특히 더 조심해야 한다. 이 빛이 도움이 될지 안 될지 모르면서 자꾸 가까이 다가가면 들이는 노력에 비해 성과가 없기 때문이다.\n꼭 필요한 개념이라 하더라도, 튜토리얼 내용 진행에 지장이 없는 추상적인 개념의 본질이나 추가 설치 프로그램의 원리, 에디터의 기능 분석 같은 건 당장 필요없다. 어떤 것을 꼭 배워야 하는지, 어떤 개념을 이해해야 하는지가 중요한 것이지 곁다리에 있는 과정은 크게 상관이 없다는 것이다. 대개는, 그렇게 지나친 부분은 자연스럽게 체득할 수 있었고 당장 그렇지 않더라도 그럴 기회는 얼마든지 있다. 리눅스 설치와 설정을 하면서 사용한 에디터인 빔(vim)은 처음에 a키를 눌러 입력하는 것과 저장하는 방법만 알았지만, 지금은 그렇지 않으니까.\n튜토리얼의 본질은 훓어보는 것이다. 관광지에 들른 방문객은, 제한된 시간에 둘러봐야 하기에 유능한 가이드와 함께 유명한 장소들만 들른 뒤 홀연히 떠난다. 출발한 지가 얼마 되지도 않았는데 자리를 깔고 지질탐사를 하거나 사료채취 따위를 하지 않는다. 우리는 그런 마음으로, 관광객의 마음으로 튜토리얼을 대해야 하겠다.\n","permalink":"https://interp.blog/%EA%B4%80%EA%B4%91%EA%B0%9D%EC%9D%98-%EC%9E%85%EC%9E%A5%EC%97%90%EC%84%9C-%ED%9B%93%EC%96%B4%EB%B3%B4%EA%B8%B0/","summary":"새로운 개념을 처음 배우기 시작할 때, 쏟아져 나오는 여러 튜토리얼 매체를 접할 수 있다. 이걸 무턱대고 따라하는 것보다는, 숨어있는 의미를 이해하고 넘어가야 되지 않을까 하는 강박이 생기기 마련이다. 어느 정도의 수준은 필요할지 몰라도 모든 개념을 이해하면서 튜토리얼을 따라가는 것은 여러 면에서 부적합하다는 이야기를 하고 싶다.\n먼저, 새로운 개념이 꼭 필요한 것이라면 모르겠지만 우리는 하루에도 수 십번의 개념을 접하게 된다. 흥미가 있는 것인지, 업무에 필요한 것인지 따지지 않고 밝게 빛나는 형광등에 모여든 나방 한마리 처럼 그저 가까이 다가가는 경우에는 특히 더 조심해야 한다.","title":"관광객의 입장에서 훓어보기"},{"content":" 키보드로 쓰기 너무 좋다.  키보드 단축키로 제목도 설정할 수 있다. 어떤 문서에 대한 링크도 (제목 일부만 알면) 바로 넣을 수 있다. 테이블도 키보드로 바로 만들고, 늘릴 수 있다. 다양한 패널 (panel, tip, note, warning, code)을 바로 넣을 수 있다   문서 이동이 자유롭다.  어떤 문서의 하위 문서로 생성/이동시킬 수 있다. 사용자 스페이스가 있다.   Gliffy! 단언컨대 가장 편하고 깔끔한 드로잉 도구  Luciachart, Draw.io 등을 다 써봤지만.. Gliffy 만한 것이 없더라.    ","permalink":"https://interp.blog/wordpress%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%9C-%EC%9D%B4%EC%9C%A0/","summary":"키보드로 쓰기 너무 좋다.  키보드 단축키로 제목도 설정할 수 있다. 어떤 문서에 대한 링크도 (제목 일부만 알면) 바로 넣을 수 있다. 테이블도 키보드로 바로 만들고, 늘릴 수 있다. 다양한 패널 (panel, tip, note, warning, code)을 바로 넣을 수 있다   문서 이동이 자유롭다.  어떤 문서의 하위 문서로 생성/이동시킬 수 있다. 사용자 스페이스가 있다.   Gliffy! 단언컨대 가장 편하고 깔끔한 드로잉 도구  Luciachart, Draw.io 등을 다 써봤지만.","title":"WordPress를 선택한 이유"},{"content":"  ","permalink":"https://interp.blog/%EA%B7%80%ED%96%A5-2016/","summary":"  ","title":"귀향 (2016)"},{"content":"옆집 아저씨가 아닌, 미국에서 건너온 킬러 스토리 : 우리에게 왜 이러는 거예요 액션 : 스케일 업, 리얼리티 다운 나름 선전한 배우들 비교하면 실망하고, 처음 보면 평범한 영화 ","permalink":"https://interp.blog/%EC%9A%B0%EB%8A%94-%EB%82%A8%EC%9E%90%EC%97%AC-%EC%9A%B0%EB%A6%AC%EC%97%90%EA%B2%8C-%EC%99%9C-%EC%9D%B4%EB%9F%AC%EB%8A%94-%EA%B1%B0%EC%98%88%EC%9A%94/","summary":"옆집 아저씨가 아닌, 미국에서 건너온 킬러 스토리 : 우리에게 왜 이러는 거예요 액션 : 스케일 업, 리얼리티 다운 나름 선전한 배우들 비교하면 실망하고, 처음 보면 평범한 영화 ","title":"우는 남자여, 우리에게 왜 이러는 거예요?"},{"content":"doxygen 과 graphviz 를 사용해서 다이어그램을 출력할 때, 다음의 에러가 뜨면서 다이어그램 그림파일이 생성중단되는 경우가 있었다.\n세줄 요약 ","permalink":"https://interp.blog/doxygen-graphviz-%EC%82%AC%EC%9A%A9-%EC%8B%9C-dot-%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95/","summary":"doxygen 과 graphviz 를 사용해서 다이어그램을 출력할 때, 다음의 에러가 뜨면서 다이어그램 그림파일이 생성중단되는 경우가 있었다.\n세줄 요약 ","title":"doxygen + graphviz 사용 시 DOT 에러 해결방법"},{"content":"","permalink":"https://interp.blog/%EC%86%8C%EC%86%8C%ED%95%9C-%EC%9D%BC%EC%83%81-201209%EC%9B%94-2/","summary":"","title":"소소한 일상, 2012.09월 (2)"}]